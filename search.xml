<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>加油,China</title>
      <link href="/2020/09/03/%E5%8A%A0%E6%B2%B9-China/"/>
      <url>/2020/09/03/%E5%8A%A0%E6%B2%B9-China/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/2020/09/01/flag.jpg" alt="China"></p><p>加油，中国，一起共度难关！🇨🇳🇨🇳🇨🇳</p>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>转换hooks的开发建议</title>
      <link href="/2020/08/28/%E8%BD%AC%E6%8D%A2hooks%E7%9A%84%E5%BC%80%E5%8F%91%E5%BB%BA%E8%AE%AE/"/>
      <url>/2020/08/28/%E8%BD%AC%E6%8D%A2hooks%E7%9A%84%E5%BC%80%E5%8F%91%E5%BB%BA%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>同学，还不试一把React-hooks吗？</p></blockquote><p>使用hooks开发有一阵时间了，几乎是从推出后就尝试使用，一路走来，一顿毒打，踩了不少坑，也逐渐体会到了hooks模式下，开发方式的变化，不得不说还是要吹一波的。</p><p>接触到的最开始就是<a href="https://material-ui.com/zh/" target="_blank" rel="noopener">MaterialUI</a>了，当时hooks模式正式发布后，MaterialUI也推了一版，并且官方文档就已经使用到了hooks，当时以为hooks就是存个state，后来发现完全是另一种开发组件的思想。</p><p>本篇只是希望给同学们提供一些不一样的开发思路，更多是和大家讨论一下hooks模式，涉及到具体的api使用，及更深入可去<a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">React-Hooks</a>学习。</p><h2 id="Hooks模式介绍"><a href="#Hooks模式介绍" class="headerlink" title="Hooks模式介绍"></a>Hooks模式介绍</h2><p>2019年第一季度,React16.7正式发布，Hooks模式也可以用于生产环境中，</p><p>首先必须要明确的一点，hooks是在function组件中使用的，所以函数式组件的使用是直接调用的，比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React 16.13.0 ReactFiberHooks.new.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Component即jsx转换后传递的 Function组件的引用</span></span><br><span class="line"><span class="keyword">let</span> children = Component(props, secondArg);</span><br></pre></td></tr></table></figure><p>但是基于ReactFiber架构，即有了为Function组件拓展的可能，在fiber上挂载一个hooks的链</p><p>个人认为，发布的hooks主要分为三大块方向</p><ul><li>存储数据型 （useState, useReducer …）</li></ul><p>主要负责将数据和’生命周期’连接起来，有了同class组件类似的this.state功能，能够满足函数式组件自己定义状态的能力。</p><ul><li>辅助记忆型 （useMemo, useCallback …）</li></ul><p>由于函数式组件每次都是重新执行一遍,所以自己存储的一些数据会丢失，需要重新来一次，比如使用到了一个计算较为昂贵的值，就可以使用该函数缓存起来。</p><ul><li>工具型 （useEffect, useRef, useContext …）</li></ul><p>使得函数式组件有了能够和React内部有了关联，比如能够对数据生命周期控制，或者能够获取到上下文Context,或是存储ref对象</p><h2 id="Hooks解决了什么"><a href="#Hooks解决了什么" class="headerlink" title="Hooks解决了什么"></a>Hooks解决了什么</h2><p>hooks开发时有两点感觉还是很不错的，能和之前class组件有不同的开发方式</p><h3 id="以数据为生命周期"><a href="#以数据为生命周期" class="headerlink" title="以数据为生命周期"></a>以数据为生命周期</h3><p>之前使用class组件时，我们都是以整个组件的周期去统揽我们的各个数据，应该在这个组件什么生命周期去操作他，使用它，同样的,我们的核心是组件的生命周期，所有数据要应用到组件的生命周期，这就有一个问题，我们其实更加关心的是这个数据的生命周期。</p><p>比如我们展示一个好友列表，如果当前没数据，我们去从服务端拉起数据，同样的，如果这个数据发生了改变，需要更新好友列表时，我们需要从服务端拉取数据。那么实际上，我们就是在看这个好友列表，而且最终反应到界面，更不知道组件的生命周期状态发生了改变。</p><p>hooks模式下，则完全变成了我们对一个数据的生命周期的操作，不管当前这个组件是什么状态，只关心最终呈现到页面上，这也更符合我们的思考逻辑，同时也对开发者更加友好，<em>减少bug的最好方式就是少写代码</em>。</p><h4 id="以搜索框举例"><a href="#以搜索框举例" class="headerlink" title="以搜索框举例"></a>以搜索框举例</h4><p>我们需要通过一个搜索框中内容的改变做一些校验</p><ul><li>Class组件中</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state = &#123;</span><br><span class="line">  search: <span class="string">'defaultValue'</span>,</span><br><span class="line">  resultList: [],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了放大问题，使用间接的方式修改resultlist</span></span><br><span class="line">componentDidUpdate(prevState) &#123;</span><br><span class="line">  <span class="keyword">if</span> (prevState.search !== <span class="keyword">this</span>.state.search) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      resultList: fetchData(<span class="keyword">this</span>.search)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件挂载好，去修改默认搜索内容</span></span><br><span class="line">componentDidMount()&#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    resultList: fetchData(<span class="keyword">this</span>.search)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Function组件中</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设定search搜索框中的内容状态</span></span><br><span class="line"><span class="keyword">const</span> [search, setSearch] = React.useState(<span class="string">'defaultValue'</span>)</span><br><span class="line"><span class="comment">// 当search内容发生改变时，更新结果列表</span></span><br><span class="line"><span class="keyword">const</span> [resultList, setResultList] = React.useState([])</span><br><span class="line">React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  setResultList(fetchResult(search))</span><br><span class="line">&#125;, [search])</span><br></pre></td></tr></table></figure><h3 id="逻辑更为集中"><a href="#逻辑更为集中" class="headerlink" title="逻辑更为集中"></a>逻辑更为集中</h3><p>当时用了class组件时，大部分逻辑是处于分散在各个生命周期内的，因为我们使用的类，所以必须是一个个方法，如果又要配合生命周期使用，那么<code>state</code>+<code>logic</code>+<code>lifecycle</code>会分散出来，然而大部分组件内状态的管理都会使用到这三个方式，能将某一部分集中起来，代码量再多的情况下，也会更好的拆分出来。</p><h2 id="hooks开发相关建议"><a href="#hooks开发相关建议" class="headerlink" title="hooks开发相关建议"></a>hooks开发相关建议</h2><blockquote><p>hooks不止是存储了this.state/this.setState</p></blockquote><h3 id="无需刻意在function组件中模拟class的周期"><a href="#无需刻意在function组件中模拟class的周期" class="headerlink" title="无需刻意在function组件中模拟class的周期"></a>无需刻意在function组件中模拟class的周期</h3><p>如果真的需要class组件周期使用的，那么使用class组件是更好的方式。</p><p>大部分人会模拟生命周期，比较明显的就是<code>didMount</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 模拟componentDidMount</span></span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>其实可以写很多个，内部使用依赖进行比较，一个空的依赖始终都是一样的，所以只会执行一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name相关操作</span></span><br><span class="line"><span class="keyword">const</span> [name, setName] = React.useState(<span class="string">''</span>)</span><br><span class="line">React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 初始化name操作...</span></span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// age相关操作</span></span><br><span class="line"><span class="keyword">const</span> [age, setAge] = React.useState(<span class="number">0</span>)</span><br><span class="line">React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 初始化age操作...</span></span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><h3 id="使用callback时的闭包"><a href="#使用callback时的闭包" class="headerlink" title="使用callback时的闭包"></a>使用callback时的闭包</h3><p>当使用callback，他会缓存当前的执行栈相关的信息，这里的缓存如果控制不好依赖，就容易造成很大的问题，同样的window自带的<code>setTimeout</code>,<code>setInterval</code>也会有相关的问题。</p><p>比如我们需要在组件挂载3s后打印当前的state状态</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = React.useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(count)</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据需要进行卸载 return () =&gt; &#123; clearTimeout(timer) &#125;</span></span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;button onClick=&#123;() =&gt; &#123; setCount(count + <span class="number">1</span>) &#125;&#125;&gt;increment&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure><p>即使同样都是用到了count,多次点击按钮，发现3s钟后打印出的count还是0,因为创建时已经绑定了环境，及count已经为0了，（使用class组件并没体现出来，this.state.count，一串引用）</p><p>使用引用去解决引用,ref</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = React.useState(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> callbackRef = React.useRef()</span><br><span class="line">React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  callbackRef.current = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(count)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [count])</span><br><span class="line"></span><br><span class="line">React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    callbackRef.current()</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>最终由于count的改变，修改了<code>callbackRef</code>的<code>current</code>，并且timeout绑定的是执行栈的<code>callbackRef</code>,然而他的ref已经被跟新了</p><h3 id="不要欺骗你的hooks"><a href="#不要欺骗你的hooks" class="headerlink" title="不要欺骗你的hooks"></a>不要欺骗你的hooks</h3><p>hooks的依赖项决定了当前这个hooks是否在组件渲染时重新更新，即绑定了上下文环境中的变量，所以当他缓存起来时，就已经决定了内部的各种state值，可以说已经被替换为相应的数值，不再是一个变量了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件申明时</span></span><br><span class="line"><span class="keyword">const</span> [count, setCount] = React.useState(<span class="number">0</span>)</span><br><span class="line">React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// count ...</span></span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后续组件被缓存，可以理解为</span></span><br><span class="line">React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 0 ...</span></span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p><strong>当使用各种callback去优化时，一定要注意使用的依赖是否正确</strong></p><h3 id="hooks放置在函数组件顶部"><a href="#hooks放置在函数组件顶部" class="headerlink" title="hooks放置在函数组件顶部"></a>hooks放置在函数组件顶部</h3><blockquote><p><a href="https://zh-hans.reactjs.org/docs/hooks-rules.html#explanation" target="_blank" rel="noopener">官方说明</a></p></blockquote><p>hooks内部的实现是挂载于fiber内的一个链表，无论是<code>useState</code>,还是<code>useEffect</code>等，React无法用一个明显的key值去区分挂载于fiber上的具体哪一个节点对应哪一个hooks，使用他们的顺序index也就成了目前最好的选择</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = React.useState()</span><br><span class="line"></span><br><span class="line">React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> price = React.useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// ....价格由一堆复杂折扣计算而来， f(discount)</span></span><br><span class="line">&#125;, [ discount ])</span><br></pre></td></tr></table></figure><p>之后挂载与该Fiber上的hooks链表大致为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123; (count代表的useState) , next-&gt;(useEffect)&#125;</span><br><span class="line">&#123; (useEffect) , next-&gt;(useEffect)&#125;</span><br><span class="line">&#123; (count代表的useState) , next-&gt;(price代表的useMemo)&#125;</span><br><span class="line">&#123; (price代表的useMemo) , next-&gt;(<span class="literal">null</span>)&#125;</span><br></pre></td></tr></table></figure><p>正常情况React再次渲染时，根据出现的顺序，将Fiber上记忆的每一个hooks，依据顺序去赋值操作，正好也是对上的</p><p>如果有hooks前后出现顺序不一致，则会出现再次渲染时对不上，导致hooks调用错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误写法</span></span><br><span class="line"><span class="keyword">if</span> (!isLogin) &#123;</span><br><span class="line">  React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">  &#125;, [])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里想表示，某一个effect逻辑只在登陆时做检查，但是由于当前这个hooks（useEffect）是被嵌套的，很可能出现该hooks在函数内的执行顺序不一致</p><ul><li>isLogin == true</li></ul><p>hooks对应情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] ----&gt; React.useState</span><br><span class="line">  执行相关effect内部方法   ----&gt; React.useEffect</span><br><span class="line"><span class="keyword">const</span> price             ----&gt; React.useMemo</span><br></pre></td></tr></table></figure><ul><li>isLogin == false</li></ul><p>hooks对应情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] ----&gt; React.useState</span><br><span class="line"><span class="keyword">const</span> price      ----&gt; React.useEffect</span><br></pre></td></tr></table></figure><p>这时出现了，对不上hooks存储的相关数据与其对应的使用发生了错误，即出现了问题</p><ul><li>正确的使用方式</li></ul><p>将判断逻辑，嵌套内置与hooks内部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!isLogin) &#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>无论程序执行状况是怎样的，最终都是稳定，正确的hooks调用关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] ----&gt; React.useState</span><br><span class="line">  执行相关effect内部方法   ----&gt; React.useEffect</span><br><span class="line"><span class="keyword">const</span> price             ----&gt; React.useMemo</span><br></pre></td></tr></table></figure><h2 id="需要立刻替换hooks吗"><a href="#需要立刻替换hooks吗" class="headerlink" title="需要立刻替换hooks吗"></a>需要立刻替换hooks吗</h2><p>可以着手于新的组件使用hooks模式（如果喜欢这种开发方式），hooks模式与class模式是可以共存的，所以并不用着力去修改。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Object与Map的选用</title>
      <link href="/2020/08/28/Object%E4%B8%8EMap%E7%9A%84%E9%80%89%E7%94%A8/"/>
      <url>/2020/08/28/Object%E4%B8%8EMap%E7%9A%84%E9%80%89%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br></pre></td></tr></table></figure><h2 id="各自的特点"><a href="#各自的特点" class="headerlink" title="各自的特点"></a>各自的特点</h2><table><thead><tr><th></th><th>Map</th><th>Object</th></tr></thead><tbody><tr><td>默认值</td><td>不包含任何的值，只有显式插入的键</td><td>Object上有原型，原型上的键可能会与自定义键名冲突</td></tr><tr><td>key类型</td><td>任意的类型</td><td><code>String</code> 或者<code>Symbol</code></td></tr><tr><td>长度</td><td>通过属性size获取</td><td>键值个数只能手动计算</td></tr><tr><td>性能</td><td>频繁增删键值对有一定的性能优化</td><td>对频繁增添场景未进行优化</td></tr></tbody></table><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><ul><li>有原生的JSON相关转换方法，可以更方面的转换为json串</li><li>其key需为<code>string</code>,<code>symbol</code>相对来说有一些限制</li><li>不可直接迭代</li><li>原型上有相关方法，注意不要与key重复<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o.constructor) <span class="comment">//  Object() &#123; [native code] &#125;</span></span><br><span class="line">o.constructor = <span class="number">1</span> <span class="comment">// `.`操作的用法</span></span><br><span class="line"><span class="built_in">console</span>.log(o.constructorr) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可能出问题的部分</span></span><br><span class="line"><span class="keyword">let</span> count = o[key] || <span class="number">0</span> <span class="comment">// 如果key为constructor则第一次初始化不到0</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul><li>其key可以为任何类型。<ul><li>key为正则，可以为一类数据匹配结果</li><li>key也可为对象，直接<code>key.status = xxx &amp;&amp; key.code === xxx</code></li></ul></li><li>Map对象插入是有顺序的，可以直接迭代拿出顺序</li><li>其key不会有任何冲突，因为他是使用方法操作的数据，并不是通过<code>.</code>来操作数据</li></ul><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">'zhn'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">let</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'name'</span>, <span class="string">'zhn'</span>]</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h3 id="增删"><a href="#增删" class="headerlink" title="增删"></a>增删</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> key = <span class="string">'age'</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">obj[key] = value</span><br><span class="line">map.set(key, value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obj[key]</span><br><span class="line">map.delete(key)</span><br></pre></td></tr></table></figure><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> key = <span class="string">'name'</span></span><br><span class="line"></span><br><span class="line">obj[key] <span class="comment">// zhn</span></span><br><span class="line">map.get(key) <span class="comment">// zhn</span></span><br></pre></td></tr></table></figure><h3 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h3><h4 id="Object-1"><a href="#Object-1" class="headerlink" title="Object"></a>Object</h4><p>object可搭配<code>Object.keys(obj)</code>进行遍历</p><p>object本身就不能保证顺序，但是其Object.keys可以返回一定的顺序（ES6+）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123; &#125;;</span><br><span class="line">object[<span class="string">'key1'</span>] = <span class="string">'value1'</span>;</span><br><span class="line">object[<span class="string">'key0'</span>] = <span class="string">'value0'</span>;</span><br><span class="line">object; <span class="comment">// &#123; key1: "value1", key0: "value0" &#125;</span></span><br><span class="line">object[<span class="number">20</span>] = <span class="string">'value20'</span>; <span class="comment">// 经历了隐式类型转换</span></span><br><span class="line">object; <span class="comment">// &#123; 20: "value20", key1: "value1", key0: "value0" &#125;</span></span><br></pre></td></tr></table></figure><p>借助Object遍历的方式，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(object)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key1</span></span><br><span class="line"><span class="comment">// key2</span></span><br><span class="line"><span class="comment">// key3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> value <span class="keyword">of</span> <span class="built_in">Object</span>.values(object)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// value1</span></span><br><span class="line"><span class="comment">// value2</span></span><br><span class="line"><span class="comment">// value3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> entry <span class="keyword">of</span> <span class="built_in">Object</span>.entries(object)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(entry);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ["key1", "value1"]</span></span><br><span class="line"><span class="comment">// ["key2", "value2"]</span></span><br><span class="line"><span class="comment">// ["key3", "value3"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(object)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key,value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//"key1", "value1"</span></span><br><span class="line"><span class="comment">//"key2", "value2"</span></span><br><span class="line"><span class="comment">//"key3", "value3"</span></span><br></pre></td></tr></table></figure><p>object不是可迭代对象，所以<strong>不能</strong>使用<code>for-of</code>直接获取其值，<strong>可以</strong>使用<code>for-in</code>方法去获取keys</p><h4 id="Map-1"><a href="#Map-1" class="headerlink" title="Map"></a>Map</h4><p>map是一个可迭代的对象，并且保证了其在迭代的顺序是可以保证的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// forEach</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">'key1'</span>, <span class="string">'value1'</span>);</span><br><span class="line">map.set(<span class="string">'key2'</span>, <span class="string">'value2'</span>);</span><br><span class="line">map.set(<span class="string">'key3'</span>, <span class="string">'value3'</span>);</span><br><span class="line">map.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// key1 value1</span></span><br><span class="line"><span class="comment">// key2 value2</span></span><br><span class="line"><span class="comment">// key3 value3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//for...of...</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> entry <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(entry);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ["key1", "value1"]</span></span><br><span class="line"><span class="comment">// ["key2", "value2"]</span></span><br><span class="line"><span class="comment">// ["key3", "value3"]</span></span><br></pre></td></tr></table></figure><h2 id="如何更好的选用"><a href="#如何更好的选用" class="headerlink" title="如何更好的选用"></a>如何更好的选用</h2><blockquote><p>不能用map去代替object，只是一种补充方案</p></blockquote><p>考虑键值类型，是<code>string, symbol</code>,如果较为简单，则使用object即可，如果有更为复杂的key类型，使用map也可以。</p><p>考虑之后遍历是否需要保证其中的顺序，map是可以保证顺序的，object的本意就是没有顺序的，而且隐式类型转换也有问题。</p><p>频繁操作性能考虑，map的结构是一个哈希结构，频繁增上有较好的性能优化效果</p><p>考虑其key的可能性，如果key是用户可自定的话，要考虑是否会覆盖，比如用户自定了<code>toString</code>这个键，那么使用map较好</p><p>考虑是否需要使用JSON，object原生对json串支持较好，map需要自己去做实现</p><p>考虑是否要在key上做文章，map的key为任意类型，其中改写为正则类型，会有更好的拓展延伸效果</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>优化多个判断分支</title>
      <link href="/2020/08/28/%E4%BC%98%E5%8C%96%E5%A4%9A%E4%B8%AA%E5%88%A4%E6%96%AD%E5%88%86%E6%94%AF/"/>
      <url>/2020/08/28/%E4%BC%98%E5%8C%96%E5%A4%9A%E4%B8%AA%E5%88%A4%E6%96%AD%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<p>在充斥了大量的<code>if-else</code>的场景中，如果分支切换过多，会导致以后看起来不是很直观，需要进行策略模式的设计</p><h1 id="使用switch"><a href="#使用switch" class="headerlink" title="使用switch"></a>使用switch</h1><p>适用于操作不多的情况，直接做一些转换，比如redux中就使用了这种方式，其优点是可以做一些透穿，一定要注意break，或者直接return了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'ADD'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ... &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'UPDATE'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ... &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; ... &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="抽出成key-value的形式"><a href="#抽出成key-value的形式" class="headerlink" title="抽出成key-value的形式"></a>抽出成key-value的形式</h1><p>将switch中的判断case做成key即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// object类型</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="string">'ADD'</span>, function1,</span><br><span class="line">  <span class="string">'UPDATE'</span>, function2,</span><br><span class="line">  <span class="string">'default'</span>, function2,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> command = <span class="string">'ADD'</span></span><br><span class="line"><span class="keyword">const</span> res = actions[command] || actions[<span class="string">'default'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// map类型</span></span><br><span class="line"><span class="keyword">const</span> actions = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'ADD'</span>, function1],</span><br><span class="line">  [<span class="string">'UPDATE'</span>, function2],</span><br><span class="line">  [<span class="string">'default'</span>, function3],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> command = <span class="string">'ADD'</span></span><br><span class="line"><span class="keyword">const</span> res = actions.get(command) || actions.get(<span class="string">'default'</span>)</span><br></pre></td></tr></table></figure><h1 id="多层嵌套判断"><a href="#多层嵌套判断" class="headerlink" title="多层嵌套判断"></a>多层嵌套判断</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (guest) &#123;</span><br><span class="line">  <span class="keyword">if</span> (command === <span class="string">'ADD'</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command === <span class="string">'UPDATE'</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (....)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (master) &#123;</span><br><span class="line">  <span class="keyword">if</span> (command === <span class="string">'ADD'</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command === <span class="string">'UPDATE'</span>) &#123;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (....)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// object，map都可以叠加作为key</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="string">'guest_ADD'</span>, function1,</span><br><span class="line">  <span class="string">'guest_UPDATE'</span>, function2,</span><br><span class="line">  <span class="string">'master_ADD'</span>, function3,</span><br><span class="line">  <span class="string">'master_UPDATE'</span>, function2,</span><br><span class="line">  <span class="string">'default'</span>, function2,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> identity = <span class="string">'guest'</span></span><br><span class="line"><span class="keyword">let</span> action = <span class="string">'ADD'</span></span><br><span class="line"><span class="keyword">let</span> command = <span class="string">`<span class="subst">$&#123;identity&#125;</span>_<span class="subst">$&#123;action&#125;</span>`</span></span><br><span class="line"><span class="keyword">const</span> res = actions[command] || actions[<span class="string">'default'</span>]</span><br></pre></td></tr></table></figure><h1 id="利用map的key多类型，做高级key"><a href="#利用map的key多类型，做高级key" class="headerlink" title="利用map的key多类型，做高级key"></a>利用map的key多类型，做高级key</h1><p>使用正则表达式去匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="regexp">/^guest_(ADD|UPDATE)$/</span>, function1], <span class="comment">// 匹配 guest_ADD, guest_UPDATE</span></span><br><span class="line">  [<span class="regexp">/^master_[1-4]$/</span>, function2] <span class="comment">// 匹配 master_1, master_2, ..., master_3</span></span><br><span class="line">  [<span class="regexp">/default/</span>, function3]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> identity = <span class="string">'guest'</span></span><br><span class="line"><span class="keyword">let</span> action = <span class="string">'ADD'</span></span><br><span class="line"><span class="keyword">let</span> command = <span class="string">`<span class="subst">$&#123;identity&#125;</span>_<span class="subst">$&#123;action&#125;</span>`</span></span><br><span class="line"><span class="keyword">const</span> res = [...actions].find(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> key.test(command))</span><br></pre></td></tr></table></figure><p>将key直接做成一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [&#123; <span class="attr">identity</span>: <span class="string">'guest'</span>, <span class="attr">action</span>: <span class="string">'ADD'</span>&#125;, fucntion1],</span><br><span class="line">  [&#123; <span class="attr">identity</span>: <span class="string">'guest'</span>, <span class="attr">action</span>: <span class="string">'UPDATE'</span>&#125;, fucntion2],</span><br><span class="line">  [&#123; <span class="attr">identity</span>: <span class="string">'master'</span>, <span class="attr">action</span>: <span class="string">'ADD'</span>&#125;, fucntion3],</span><br><span class="line">  [&#123; <span class="attr">identity</span>: <span class="string">'master'</span>, <span class="attr">action</span>: <span class="string">'UPDATE'</span>&#125;, fucntion4],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">])</span><br><span class="line"><span class="keyword">let</span> identity = <span class="string">'guest'</span></span><br><span class="line"><span class="keyword">let</span> action = <span class="string">'ADD'</span></span><br><span class="line"><span class="keyword">let</span> command = <span class="string">`<span class="subst">$&#123;identity&#125;</span>_<span class="subst">$&#123;action&#125;</span>`</span></span><br><span class="line"><span class="keyword">const</span> res = [...actions].find(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> key.identity === identitu &amp;&amp; key.action === action)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2020-0814</title>
      <link href="/2020/08/14/2020-0814/"/>
      <url>/2020/08/14/2020-0814/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/2020/08/14/1.jpeg" alt="Beijing"><br>2020-08-14 北京-海淀-中关村紫金大厦（字节出差于海淀大厦）</p><p>有幸于22岁的最后一天赶上末班车，回头一看，已经23岁了，时间挺快的，一切都来不及思考，接下来加油咯</p><p>实习-8k Bytedance</p><p>next-age =&gt; 16k</p><p>送自己一句话，折中的选择，会吸收两者共同的缺点，虽然都是歪理，但还是挺喜欢的，接下来好好努力，顺着一个方向深挖，加油。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TT</title>
      <link href="/2020/08/03/TT/"/>
      <url>/2020/08/03/TT/</url>
      
        <content type="html"><![CDATA[<p>现在已经是20200803了，最近国际形势也是飞速变换，Tiktok同样收到了重创，ByteDance风评被害,一鸣也风评被害，目前不清楚所有的形式，也不能妄自予以判断，还记得上一篇种好每一颗土豆，华为算是挺过来，但是也被各种DISS爱国营销，作为一个局外人，我还在这吃瓜，但是这次自己也算是一个developer，对于TT大家还都是引以为傲的，网络上吃瓜群众也很多，也不知道那些吃瓜群众都是什么心态，其他就交给大佬们了，自己先把手头工作做好，加油，<code>Always Day 1!</code></p><p><img src="/img/2020/08/03/source_lake.jpg" alt="source_lake"><br>杭州·西湖白堤</p>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JSON.stringify转换字符串</title>
      <link href="/2020/06/18/JSON-stringify%E8%BD%AC%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2020/06/18/JSON-stringify%E8%BD%AC%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>字符串转换时，会使用到JSON.stringify他会将一个对象转换为json串格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zhn'</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj) <span class="comment">// "&#123;"name":"zhn","age":18&#125;" 代表一个字符串,其中内容为&#123;"name":"zhn","age":18&#125;</span></span><br></pre></td></tr></table></figure><h1 id="转换纯字符串"><a href="#转换纯字符串" class="headerlink" title="转换纯字符串"></a>转换纯字符串</h1><p>同时也可以转换普通的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">'str'</span>) <span class="comment">// ""str"" 代表一个字符串，其中的内容为"str"</span></span><br></pre></td></tr></table></figure><h1 id="转换纯字符串中引号"><a href="#转换纯字符串中引号" class="headerlink" title="转换纯字符串中引号"></a>转换纯字符串中引号</h1><p>默认会转换为双引号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">'str'</span>) <span class="comment">// ""str""</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">"str"</span>) <span class="comment">// ""str""</span></span><br></pre></td></tr></table></figure><p>单引号会依旧存在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">"st'666'r"</span>) <span class="comment">// ""st'666'r""</span></span><br></pre></td></tr></table></figure><p>双引号会被转义（默认转换为双引号）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">'st"666"r'</span>) <span class="comment">// ""st\"666\"r""</span></span><br></pre></td></tr></table></figure><p>如果有引号叠加的状态，则会保留，因为字符串如果输入正确就已经被转移过了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">"st\"666\"r"</span>) <span class="comment">// ""st\"666\"r""</span></span><br></pre></td></tr></table></figure><h1 id="应用于webpack打包"><a href="#应用于webpack打包" class="headerlink" title="应用于webpack打包"></a>应用于webpack打包</h1><blockquote><p>具体要看插件是如何定义的，如<code>webpack.DefinePlugin</code>在其文档写清楚了</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如我们最终打包后的代码为</span></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">'console.log(1)'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行代码时，只需要</span></span><br><span class="line"><span class="built_in">eval</span>(code)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果我们最终是一个字符串</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'hello word'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终暴露</span></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">'module.exports = '</span> + str <span class="comment">// 最终code = 'module.exports = hello word'</span></span><br><span class="line"><span class="built_in">eval</span>(code) <span class="comment">// 报错 hello 找不到应用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终暴露</span></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">'module.exports = '</span> + <span class="built_in">JSON</span>.stringify(str) <span class="comment">// 最终code = 'module.exports = "hello word"'</span></span><br><span class="line"><span class="built_in">eval</span>(code) <span class="comment">// 可正常执行</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>隐藏元素3种方式区别</title>
      <link href="/2020/06/15/%E9%9A%90%E8%97%8F%E5%85%83%E7%B4%A03%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/06/15/%E9%9A%90%E8%97%8F%E5%85%83%E7%B4%A03%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="display-none"><a href="#display-none" class="headerlink" title="display:none;"></a><code>display:none;</code></h1><blockquote><p><code>display: none/block;</code></p></blockquote><p>该元素会彻底从页面上消息，DOM结构会消失，所以会直接触发页面重排重绘，所以不适合频繁地显示隐藏元素。并且由于其消失后，自身绑定的事件更不会触发，也不能有过渡效果。其等于从页面上消失，所以被遮挡的元素不受到影响，依然可以正常的操作。</p><p>用作nav时，下拉的提示效果。</p><h1 id="visibility-hidden"><a href="#visibility-hidden" class="headerlink" title="visibility:hidden;"></a><code>visibility:hidden;</code></h1><blockquote><p><code>visibility: hidden/visible;</code></p></blockquote><p>从页面上仅仅是隐藏该元素，DOM结果均会存在，只是当时在一个不可见的状态，不会触发重排，但是会触发重绘，并且他给人的效果是隐藏了，所以他自身的事件不支持，他隐藏后，被遮挡住的元素依然可以正常的触发其自身事件。</p><p><strong>其子元素仍然可以设置visible来显示出来</strong></p><p>一般用作较为频繁的显示和隐藏时，可以用到。</p><h1 id="opacity-0"><a href="#opacity-0" class="headerlink" title="opacity:0;"></a><code>opacity:0;</code></h1><blockquote><p><code>opacity: 0/1;</code></p></blockquote><p>这是使用浏览器降低alpha数值来达到隐藏的效果，可以说是元素此时还正常，只是正好透明了，我们看不到而已，所以不会引发重排，一般情况下也不会引发重绘，由于其仍然是存在于页面上的，所以他自身的的事件仍然是可以出发的，但被他遮挡的元素是不能触发其事件的。</p><p><strong>其子元素不能设置opacity来达到显示的效果</strong></p><h1 id="三种方式的对比"><a href="#三种方式的对比" class="headerlink" title="三种方式的对比"></a>三种方式的对比</h1><table><thead><tr><th></th><th><code>display: none</code></th><th><code>visibility: hidden</code></th><th><code>opacity: 0</code></th></tr></thead><tbody><tr><td>页面中</td><td>不存在</td><td>存在</td><td>存在</td></tr><tr><td>重排（reflow）</td><td>会</td><td>不会</td><td>不会</td></tr><tr><td>重绘（paint）</td><td>会</td><td>会</td><td>不一定</td></tr><tr><td>自身绑定事件</td><td>不触发</td><td>不触发</td><td>可触发</td></tr><tr><td>transition</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>子元素可复原</td><td>不能</td><td>能</td><td>不能</td></tr><tr><td>被遮挡的元素可触发事件</td><td>能</td><td>能</td><td>不能</td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>每个人都可以发光</title>
      <link href="/2020/06/11/%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E5%8F%AF%E4%BB%A5%E5%8F%91%E5%85%89/"/>
      <url>/2020/06/11/%E6%AF%8F%E4%B8%AA%E4%BA%BA%E9%83%BD%E5%8F%AF%E4%BB%A5%E5%8F%91%E5%85%89/</url>
      
        <content type="html"><![CDATA[<p>今天结束了字节的3面+HR面,总的来说体验还是很不错的，首先要怒夸一波bytedance,办公效率真的是很高，一共用了4天。</p><p>day1:我去官网投了面试，很快收到了字节的邮件回复，看样子像是自动回复（尚未考证过）不过署名是来自字节的人力资源。</p><p>day2:人事联系了我，（没想到那么快，那早还在床上，突然收到电话，差点以为是骚扰电话挂了<code>010</code>开头）和我约了时间，她看了下当天下午，应该是排满了，于是就安排了我于第二天下午14:00,就是前一秒的你还在床上看<code>bilibili</code>的沙雕视频，下一秒你就得知明天面试了。</p><p>day3:下午13:50多，面试官也基本提前来了,当天气氛还算可以，1面+2面（二面代码，思考偏多，结束后连面试官都不太记得长什么样了），当天做到16点，结束后，也算是休息一波，hr通知我，今天时间可能来不及了，于是约到了第二天下午16点。</p><p>day4:13:59面试官还没到，感到有点不对劲，于是看了下手机，发现hr之前发了短信，还打了电话给我，（电话被我静音了，呜呜呜！）后面hr在电话里很是抱歉，表示有一个紧急会议，而且声音很委婉。（应该用这个形容词吧）不禁让我一惊<code>Σ(っ °Д °;)っ</code>，对面只是一个还不知道状况的实习生，也能如此尊敬，后来我以为要改时间了，但是他说推迟到1个小时即可，那么今天还是可以正常进行的，还是很好的。最后3面+HR面，结束也都18点40多了。总的来说，字节还是很认真的，而且面试官也是很不错的，挺像同学的，和他聊天。</p><p>最终结果要等到下周一，整个过程还是挺愉快的，挺不错的一次体验，不得不说，bytedance效率真高，隔壁面Tencent的同学两轮面试之间差了2周多。</p><blockquote><p>以下和自己面试没关系，单纯是了解抖音时的一些感想。</p></blockquote><p>还有就是自己对抖音的理解吧，之前一直认为抖音在消耗人的时间，众多短视频平台里的佼佼者，也几乎没有怎么细细去看过，但是前两天，当我打开抖音官网时，被他震住了，突然感觉抖音不是我想象的软件，<strong>记录美好生活</strong>突然间有了更深的意义，或许我们每个人并没有那样华丽的光环，大多数都是在自己的生活中默默无闻的奉献，那么每个人将自己平凡的生活做一个记录，留下些许记忆的片刻，何尝不是好事情呢，或许世界这么大，每个人都有每个人的生活，自己才是人生的主角，努力去记忆，等到以后回忆时，也会有某种独特的思绪吧，或许这才是科技应该给人带来的，记录每个人平凡的生活，用数字的方式记录下来，曾几何时，再让我们回忆起，那么也会有着某种思绪万千的回忆吧。</p><hr><p>很喜欢官网的这个宣传片，借此机会保存下来。</p><video width="100%" controls><br>  <source src="/uploads/videos/2020/douyin-value.mp4"><br></video><p>如有幸入职实习，那么还是加油了！搞出点东西来！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端跨域</title>
      <link href="/2020/06/10/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F/"/>
      <url>/2020/06/10/%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么会有跨域"><a href="#为什么会有跨域" class="headerlink" title="为什么会有跨域"></a>为什么会有跨域</h1><p>只要协议、域名、端口有任何一个不同，都被当作是不同的域。</p><p>浏览器为了安全考虑，随便使用他人的资源可能会发生安全问题，所以会有跨域问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">URL                      说明       是否允许通信</span><br><span class="line">http://www.a.com/a.js</span><br><span class="line">http://www.a.com/b.js     同一域名下   允许</span><br><span class="line"></span><br><span class="line">http://www.a.com/lab/a.js</span><br><span class="line">http://www.a.com/script/b.js 同一域名下不同文件夹 允许</span><br><span class="line"></span><br><span class="line">http://www.a.com:8000/a.js</span><br><span class="line">http://www.a.com/b.js     同一域名，不同端口  不允许</span><br><span class="line"></span><br><span class="line">http://www.a.com/a.js</span><br><span class="line">https://www.a.com/b.js 同一域名，不同协议 不允许</span><br><span class="line"></span><br><span class="line">http://www.a.com/a.js</span><br><span class="line">http://70.32.92.74/b.js 域名和域名对应ip 不允许</span><br><span class="line"></span><br><span class="line">http://www.a.com/a.js</span><br><span class="line">http://script.a.com/b.js 主域相同，子域不同 不允许（cookie这种情况下也不允许访问）</span><br><span class="line"></span><br><span class="line">http://www.a.com/a.js</span><br><span class="line">http://a.com/b.js 同一域名，不同二级域名（同上） 不允许（cookie这种情况下也不允许访问）</span><br><span class="line"></span><br><span class="line">http://www.cnblogs.com/a.js</span><br><span class="line">http://www.a.com/b.js 不同域名 不允许</span><br></pre></td></tr></table></figure><h1 id="遇到跨域问题的情况"><a href="#遇到跨域问题的情况" class="headerlink" title="遇到跨域问题的情况"></a>遇到跨域问题的情况</h1><h2 id="操作不同域的DOM"><a href="#操作不同域的DOM" class="headerlink" title="操作不同域的DOM"></a>操作不同域的DOM</h2><p>使用iframe的时候，外部iframe如果和里面源src不一样，操作起来可能会有问题</p><h2 id="获取网页的存储信息，cookie-localStorage"><a href="#获取网页的存储信息，cookie-localStorage" class="headerlink" title="获取网页的存储信息，cookie, localStorage"></a>获取网页的存储信息，cookie, localStorage</h2><p>在<code>www.baidu.com</code>做了登录，信息是在<code>www.baidu.com</code>但是在<code>yun.baidu.com</code>也可以获取到相应的登录信息。</p><h2 id="获取数据操作"><a href="#获取数据操作" class="headerlink" title="获取数据操作"></a>获取数据操作</h2><p>数据地址与前端页面不在一个域下，可以发送数据，单出于同源考虑，浏览器不会使用数据</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="操作不同域的DOM-1"><a href="#操作不同域的DOM-1" class="headerlink" title="操作不同域的DOM"></a>操作不同域的DOM</h2><p>只需要能保证能够通过父子页面中，直接操作到其html的内容即可</p><p>父获取子，可以获取到iframe后<code>iframe.contentWindow</code></p><p>子获取父，可以直接访问parent<code>parent</code>即为父的window。（子的<code>window.parent</code>是父元素<code>window</code>）</p><h3 id="使用document-domain"><a href="#使用document-domain" class="headerlink" title="使用document.domain"></a>使用<code>document.domain</code></h3><p><strong>修改document.domain的方法只适用于不同子域的框架间的交互。</strong></p><p>浏览器中不同域的框架之间是不能进行js的交互操作的。不同的框架之间是可以获取window对象的，但却无法获取相应的属性和方法。比如，有一个页面，它的地址是<a href="http://www.damonare.cn/a.html" target="_blank" rel="noopener">http://www.damonare.cn/a.html</a> ， 在这个页面里面有一个iframe，它的src是<a href="http://damonare.cn/b.html" target="_blank" rel="noopener">http://damonare.cn/b.html</a>, 很显然，这个页面与它里面的iframe框架是不同域的，所以我们是无法通过在页面中书写js代码来获取iframe中的东西的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> iframe = <span class="built_in">document</span>.getElementById(<span class="string">'ifame'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> win = iframe.contentWindow;<span class="comment">//可以获取到iframe里的window对象，但该window对象的属性和方法几乎是不可用的</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> doc = win.document;<span class="comment">//这里获取不到iframe里的document对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> name = win.name;<span class="comment">//这里同样获取不到window对象的name属性</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span> = <span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://damonare.cn/b.html"</span> <span class="attr">onload</span> = <span class="string">"test()"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只要把<a href="http://www.damonare.cn/a.html" target="_blank" rel="noopener">http://www.damonare.cn/a.html</a> 和 damonare.cn/b.html 这两个页面的document.domain都设成相同的域名就可以了。但要注意的是，document.domain的设置是有限制的，我们只能把document.domain设置成自身或更高一级的父域，且主域必须相同。</p><p>在页面<a href="http://www.damonare.cn/a.html" target="_blank" rel="noopener">http://www.damonare.cn/a.html</a> 中设置document.domain:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span> = <span class="string">"iframe"</span> <span class="attr">src</span>=<span class="string">"http://damonare.cn/b.html"</span> <span class="attr">onload</span> = <span class="string">"test()"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.domain = <span class="string">'damonare.cn'</span>;<span class="comment">//设置成主域</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="built_in">document</span>.getElementById(<span class="string">'iframe'</span>).contentWindow);<span class="comment">//contentWindow 可取得子窗口的 window 对象</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在页面<a href="http://damonare.cn/b.html" target="_blank" rel="noopener">http://damonare.cn/b.html</a> 中也设置document.domain:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.domain = <span class="string">'damonare.cn'</span>;<span class="comment">//在iframe载入这个页面也设置document.domain，使之与主页面的document.domain相同</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取网页的存储信息，cookie-localStorage-1"><a href="#获取网页的存储信息，cookie-localStorage-1" class="headerlink" title="获取网页的存储信息，cookie, localStorage"></a>获取网页的存储信息，cookie, localStorage</h2><blockquote><p><a href="http://www.baidu域名下面登录了，发现yun.baidu域名下面也自然而然登录了；淘宝登录了，发现天猫也登录了，淘宝和天猫是完全不一样的2个域名。" target="_blank" rel="noopener">www.baidu域名下面登录了，发现yun.baidu域名下面也自然而然登录了；淘宝登录了，发现天猫也登录了，淘宝和天猫是完全不一样的2个域名。</a></p></blockquote><p>用来传递信息的，因为有跨域不能去拿其他页面存储的内容，所以可以在目标页面生成一个iframe，匹配存储内容的src，之后拿到数据发回主页面即可。</p><h3 id="使用location-hash来跨域"><a href="#使用location-hash来跨域" class="headerlink" title="使用location.hash来跨域"></a>使用location.hash来跨域</h3><p>hash是明文存储的，存在直接暴露在url中，数据容量和类型都有限等的问题。</p><blockquote><p>URL有一部分被称为hash，就是#号及其后面的字符，它一般用于浏览器锚点定位，Server端并不关心这部分，应该说HTTP请求过程中不会携带hash，所以这部分的修改不会产生HTTP请求，但是会产生浏览器历史记录。</p></blockquote><p>假如父页面是baidu.com/a.html,iframe嵌入的页面为google.com/b.html（此处省略了域名等url属性），要实现此两个页面间的通信可以通过以下方法。</p><ul><li>a.html传送数据到b.html<ul><li>a.html下修改iframe的src为google.com/b.html#paco</li><li>b.html监听到url发生变化，触发相应操作</li></ul></li><li>b.html传送数据到a.html，由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于父窗口域名下的一个代理iframe<ul><li>b.html下创建一个隐藏的iframe，此iframe的src是baidu.com域下的，并挂上要传送的hash数据，如src=”<a href="http://www.baidu.com/proxy.html#…&quot;" target="_blank" rel="noopener">www.baidu.com/proxy.html#…&quot;</a></li><li>proxy.html监听到url发生变化，修改a.html的url（因为a.html和proxy.html同域，所以proxy.html可修改a.html的url hash）</li><li>a.html监听到url发生变化，触发相应操作</li></ul></li></ul><p>子页面b.html关键如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    parent.location.hash = <span class="string">'data'</span>;  </span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;  </span><br><span class="line">    <span class="comment">// ie、chrome的安全机制无法修改parent.location.hash，  </span></span><br><span class="line">    <span class="keyword">var</span> ifrproxy = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);  </span><br><span class="line">    ifrproxy.style.display = <span class="string">'none'</span>;  </span><br><span class="line">    ifrproxy.src = <span class="string">"http://www.baidu.com/proxy.html#data"</span>;  </span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(ifrproxy);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>proxy.html关键如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//因为parent.parent（即baidu.com/a.html）和baidu.com/proxy.html属于同一个域，所以可以改变其location.hash的值  </span></span><br><span class="line">parent.parent.location.hash = self.location.hash.substring(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="使用document-domain-1"><a href="#使用document-domain-1" class="headerlink" title="使用document.domain"></a>使用<code>document.domain</code></h3><p>如果两个面主域名完全相同，则使用该方法就可以，和上面介绍的方法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// www.a.com</span></span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">'a.com'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// yun.a.com</span></span><br><span class="line"><span class="built_in">document</span>.domain = <span class="string">'a.com'</span></span><br></pre></td></tr></table></figure><h3 id="使用postMessage"><a href="#使用postMessage" class="headerlink" title="使用postMessage"></a>使用<code>postMessage</code></h3><p>如果两个域名完全不相同，可以用postMessage和iframe相结合的方法。postMessage(data,origin)方法允许来自不同源的脚本采用异步方式进行通信。</p><p>postMessage的使用方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">otherWindow.postMessage(message, targetOrigin);</span><br><span class="line"></span><br><span class="line">otherWindow:指目标窗口，也就是给哪个<span class="built_in">window</span>发消息，是 <span class="built_in">window</span>.frames 属性的成员或者由 <span class="built_in">window</span>.open 方法创建的窗口</span><br><span class="line">message:   是要发送的消息，类型为 <span class="built_in">String</span>、<span class="built_in">Object</span> (IE8、<span class="number">9</span> 不支持)</span><br><span class="line">targetOrigin:   是限定消息接收范围，不限制请使用 <span class="string">'*'</span></span><br></pre></td></tr></table></figure><p>比如damonare.cn域的A页面通过iframe嵌入了一个google.com域的B页面，可以通过以下方法实现A和B的通信。</p><h4 id="A-gt-B发送数据"><a href="#A-gt-B发送数据" class="headerlink" title="A-&gt;B发送数据"></a>A-&gt;B发送数据</h4><p>使用A页面通过postMessage发送数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> ifr = <span class="built_in">document</span>.getElementById(<span class="string">'ifr'</span>);  </span><br><span class="line">    <span class="keyword">var</span> targetOrigin = <span class="string">"http://www.google.com"</span>;  </span><br><span class="line">    ifr.contentWindow.postMessage(<span class="string">'hello world!'</span>, targetOrigin);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>B页面通过message事件监听并接受消息:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> data = event.data;<span class="comment">//消息  </span></span><br><span class="line">  <span class="keyword">var</span> origin = event.origin;<span class="comment">//消息来源地址  </span></span><br><span class="line">  <span class="keyword">var</span> source = event.source;<span class="comment">//源Window对象  </span></span><br><span class="line">  <span class="keyword">if</span>(origin==<span class="string">"http://www.baidu.com"</span>)&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(data);<span class="comment">//hello world!  </span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理兼容，绑定事件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.addEventListener != <span class="string">'undefined'</span>) &#123;  </span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, onmessage, <span class="literal">false</span>);  </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.attachEvent != <span class="string">'undefined'</span>) &#123;  </span><br><span class="line">  <span class="comment">//for ie  </span></span><br><span class="line">  <span class="built_in">window</span>.attachEvent(<span class="string">'onmessage'</span>, onmessage);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="B-gt-A发送数据"><a href="#B-gt-A发送数据" class="headerlink" title="B-&gt;A发送数据"></a>B-&gt;A发送数据</h4><p>与A-&gt;B发送数据是相同的</p><p>在子页面B中，要在B内操作逻辑，<code>parent</code>即为父元素A的window</p><p>B元素发送时<code>parent.postMessage(data, target)</code></p><p>A元素接收时<code>window.addEventListener(&#39;message&#39;, handle)</code>即可。</p><h2 id="与服务端拉取数据的"><a href="#与服务端拉取数据的" class="headerlink" title="与服务端拉取数据的"></a>与服务端拉取数据的</h2><p>前端环境部署的服务器地址，与后端环境的数据地址并不在同一个地方，所以浏览器在访问时就会遇到跨域的问题。</p><h3 id="使用反向代理"><a href="#使用反向代理" class="headerlink" title="使用反向代理"></a>使用反向代理</h3><blockquote><p>前端开发时，可以配置webpack的代理。多用于开发环境</p></blockquote><p>跨域是浏览器端的，服务端并无此问题，我们可以使用开发时的node中转一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mmodule.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">      proxy: &#123;</span><br><span class="line">          <span class="string">'/api'</span>: <span class="string">'http://localhost:3000'</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>fetch(&#39;/api/xxx&#39;)</code>也就是对自己发出访问，通过代理走一层。</p><p>请求到 /api/xxx 现在会被代理到请求 <a href="http://localhost:3000/api/xxx" target="_blank" rel="noopener">http://localhost:3000/api/xxx</a>, 例如 /api/user 现在会被代理到请求 <a href="http://localhost:3000/api/user" target="_blank" rel="noopener">http://localhost:3000/api/user</a></p><h3 id="使用jsonp"><a href="#使用jsonp" class="headerlink" title="使用jsonp"></a>使用jsonp</h3><blockquote><p>jsonp和ajax并无关系，是两种不一样的东西，只是jQuery做了封装，使得<code>$.ajax</code>可以做jsonp</p></blockquote><p>jsonp需要后端来配合,只能使用一些简单的请求。<strong>依赖后端配合</strong></p><p>我们定义了使用这个数据的方法，等到这个数据请求成功后，返回结果就是调用方法，并且参数已经是我们想要的结果了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">dosomething</span>(<span class="params">jsondata</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//处理获得的json数据</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://example.com/data.php?callback=dosomething"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 返回结果，dosomething(['a','b','c']);上述函数会被直接触发 --&gt;</span></span><br></pre></td></tr></table></figure><p>jQuery中的处理方法，其实他在内部也是一样的，他创建了个临时方法，并且在使用完毕之后立即销毁了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $.getJSON(<span class="string">'http://example.com/data.php?callback=?,function(jsondata)'</span>)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//处理获得的json数据</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用CORS"><a href="#使用CORS" class="headerlink" title="使用CORS"></a>使用CORS</h3><p>这也是目前使用最主流的方式,<strong>依赖后端配合</strong>。</p><blockquote><p>CORS（Cross-Origin Resource Sharing）跨域资源共享，定义了必须在访问跨域资源时，浏览器与服务器应该如何沟通。CORS背后的基本思想就是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是失败。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a></p></blockquote><p>也就是说浏览器用了各种原因限制了我们，我们用各种方法绕过跨域检查，也可以从正面走，就是让浏览器知道这个源，我跨域了，但是他就是我想要的，他是安全的，而且服务端返回的地址里，也有客户端的地址，是开发人员指定的，我们发送请求和之前并无异样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"GET"</span>, <span class="string">"http://segmentfault.com/u/trigkit4/"</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>如果前端要发送凭证(携带<code>cookie</code>)时，设置<code>withCredentials: true</code></p><blockquote><p>如果要使用<code>withCredentials</code>，服务端请求头<code>Access-Control-Allow-Origin: 不能为*</code></p></blockquote><ul><li>xhr：<code>xhr.withCredentials = true</code></li><li>fetch: <code>fetch(url, {credentials: &#39;include&#39;});</code></li></ul><p>服务端要配置<code>CORS</code>相关头</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/5815f4abbf22ec006893b431" target="_blank" rel="noopener">https://juejin.im/post/5815f4abbf22ec006893b431</a></p><p><a href="https://www.cnblogs.com/xjy20170907/p/11772416.html" target="_blank" rel="noopener">https://www.cnblogs.com/xjy20170907/p/11772416.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BFC块状格式化区域</title>
      <link href="/2020/06/09/BFC%E5%9D%97%E7%8A%B6%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8C%BA%E5%9F%9F/"/>
      <url>/2020/06/09/BFC%E5%9D%97%E7%8A%B6%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8C%BA%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h1><p>BFC（block-fomatting-context）是一种css渲染规则，规定了其内部元素的渲染规律，css2.1规定了BFC,IFC,css3又规定了BFC,IFC,GFC,FFC。</p><p>BFC就是块级的作用域。GFC就是grid作用域。IFC就是内联作用域。FFC就是flex作用域。</p><p>BFC可以理解为一种渲染的独立区域，规定了内部如何渲染，并且与外部也毫不关联。常用在独立的定位区域，并多余float关联（float也是营造出BFC的一种方式）</p><h1 id="BFC内部特性如下"><a href="#BFC内部特性如下" class="headerlink" title="BFC内部特性如下"></a>BFC内部特性如下</h1><ul><li>内部的Box会在垂直方向上一个接着一个放置。</li><li>Box垂直方向的距离由 margin 决定。属于同一个BFC中的两个相邻的Box上下margin会发生叠加。</li><li>每个元素的margin box 的左边，与包含块border box 的左边相接触。即使浮动也是如此。</li><li>BFC 的区域不会与float box 重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响外面的元素，反之也如此。</li><li>计算BFC的高度时，浮动元素也参与计算。</li></ul><p>也就是说我们的BFC环境中，他的计算都是独立出来的，与外部的BFC区域边界接触。并且内部与外部不相互影响。</p><h1 id="营造出BFC环境的几种方式"><a href="#营造出BFC环境的几种方式" class="headerlink" title="营造出BFC环境的几种方式"></a>营造出BFC环境的几种方式</h1><ul><li><code>position</code>:absolute或者fixed。</li><li><code>float</code>:不是none。</li><li><code>overflow</code>: 不是visible。</li><li><code>display</code>: inline-box或者flex</li><li>根元素<code>&lt;html&gt;</code></li></ul><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><h2 id="右下角广告"><a href="#右下角广告" class="headerlink" title="右下角广告"></a>右下角广告</h2><p>跟随屏幕移动，设置其<code>position: fixed</code>形成了一个BFC，可对内布局。</p><h2 id="浮动区域"><a href="#浮动区域" class="headerlink" title="浮动区域"></a>浮动区域</h2><p>left与right两个元素，通常情况下，将left设置为BFC(float)那么如果right的高度特别大，right元素会环绕在left的四周，这也是float最初的设计，文字排版中做图片环绕的功能。如果将right也设置为BFC(float)那么两个元素的边界才会挨在一起。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .float-wrapper &#123;</span></span><br><span class="line"><span class="undefined">    border: 2px solid red;</span></span><br><span class="line"><span class="undefined">    overflow: auto;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  .left &#123;</span></span><br><span class="line"><span class="undefined">    float: left;</span></span><br><span class="line"><span class="undefined">    background: yellowgreen;</span></span><br><span class="line"><span class="undefined">    width: 50px;</span></span><br><span class="line"><span class="undefined">    height: 50px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  .right &#123;</span></span><br><span class="line"><span class="undefined">    float: left;</span></span><br><span class="line"><span class="undefined">    background: hotpink;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float-wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>当其内部元素都为float时，会造成高度塌陷，因为我们的BFC是独立的，所以我们可以为父元素设置为BFC，解决清除浮动。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.wrapper &#123; overflow: auto; &#125;</span></span><br><span class="line"><span class="undefined">.box &#123; float: left; width: 50px; height: 50px; &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="解决margin无效的问题"><a href="#解决margin无效的问题" class="headerlink" title="解决margin无效的问题"></a>解决margin无效的问题</h2><p>同一个BFC内，会出现margin合并的问题，我们可以在区域内营造出他自己的BFC环境，与外界隔离即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .box &#123;</span></span><br><span class="line"><span class="undefined">    width: 50px;</span></span><br><span class="line"><span class="undefined">    height: 50px;</span></span><br><span class="line"><span class="undefined">    margin: 50px 0;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .wrapper &#123;</span></span><br><span class="line"><span class="undefined">    overflow: auto;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- margin出现重合 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- margin恢复 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="其他-圣杯布局"><a href="#其他-圣杯布局" class="headerlink" title="其他-圣杯布局"></a>其他-圣杯布局</h1><p>按照解析顺序，center在前。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>会使用到<code>margin-left: -100px;</code>他会向左去走，如果这个元素之前被挤下来了，那么他会又上去。</p><p>使用<code>padding: 0 100px</code>然后在将元素浮动到位置，使用<code>position</code>之后，定位到空缺里，实现左右两侧固定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  header, footer &#123;</span></span><br><span class="line"><span class="undefined">    background: hotpink;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .wrapper &#123;</span></span><br><span class="line"><span class="undefined">    padding: 0 50px;</span></span><br><span class="line"><span class="undefined">    overflow: auto;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .center &#123;</span></span><br><span class="line"><span class="undefined">    float: left;</span></span><br><span class="line"><span class="undefined">    width: 100%;</span></span><br><span class="line"><span class="undefined">    background: yellowgreen;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  .left &#123;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">    float: left;</span></span><br><span class="line"><span class="undefined">    left: -50px;</span></span><br><span class="line"><span class="undefined">    width: 50px;</span></span><br><span class="line"><span class="undefined">    margin-left: -100%;</span></span><br><span class="line"><span class="undefined">    background: deeppink;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  .right &#123;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">    right: -50px;</span></span><br><span class="line"><span class="undefined">    float: left;</span></span><br><span class="line"><span class="undefined">    width: 50px;</span></span><br><span class="line"><span class="undefined">    margin-left: -50px;</span></span><br><span class="line"><span class="undefined">    background: deeppink;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本身使用<code>float</code>+<code>margin-left: -50px</code>就可以实现，但是会覆盖住<code>center</code>所以，设置了<code>wrapper</code>的两侧的<code>padding</code>,并且将其向两侧定位即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模拟async自执行函数</title>
      <link href="/2020/06/07/%E6%A8%A1%E6%8B%9Fasync%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
      <url>/2020/06/07/%E6%A8%A1%E6%8B%9Fasync%E8%87%AA%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="回顾generator函数"><a href="#回顾generator函数" class="headerlink" title="回顾generator函数"></a>回顾generator函数</h1><p>generator函数是用来处理异步编程的解决方案，它使得一个函数可以暂时离开当前的执行栈，并将函数的执行权交由外部去处理。</p><p><code>next</code>方法，手动获取当前的执行情况，<code>next()</code>方法的返回值，是yield的右侧内容，而<code>next(param)</code>参数param则是传递给generator函数中被yield挂起的左侧返回值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data1 = <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">const</span> data2 = <span class="keyword">yield</span> data1 + <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> data2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 执行情况1 */</span></span><br><span class="line"><span class="keyword">const</span> gen = generator()</span><br><span class="line">gen.next() <span class="comment">// &#123; value: 2, done: false &#125; 函数从头开始，停在在yield 2右处</span></span><br><span class="line">gen.next() <span class="comment">// &#123; value: NaN, done: false &#125; 函数从yield 2 左侧开始，并返回undefined, 停在yield data1 + 1 </span></span><br><span class="line">gen.next() <span class="comment">// &#123; value: NaN, done: true &#125; 函数从yield data1 + 1 左侧开始 并返回undefined 停在执行完函数return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 执行情况2 */</span></span><br><span class="line"><span class="keyword">const</span> gen = generator()</span><br><span class="line">gen.next() <span class="comment">// &#123; value: 2, done: false &#125; 函数从头开始，停在在yield 2右处</span></span><br><span class="line">gen.next(<span class="number">8</span>) <span class="comment">// &#123; value: 9, done: false &#125; 函数从yield 2 左侧开始，并返回8, 停在yield data1 + 1 </span></span><br><span class="line">gen.next(<span class="number">2</span>) <span class="comment">// &#123; value: 2, done: true &#125; 函数从yield data1 + 1 左侧开始, 并返回2, 停在执行完函数return</span></span><br></pre></td></tr></table></figure><p>可以看出generator设计并不是将yield右侧内容，异步处理完毕后解析给左侧，他是让你来处理，只不过大多数情况我们都将处理的结果返回yield,造成了一种假象，并且其实直接返回内容给yield正是我们的本意</p><p><code>for-of</code>循环可以在done为false的情况下，不断执行，使用generator执行fibonacci</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibonacci</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [pre, cur] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    [pre, cur] = [cur, pre + cur];</span><br><span class="line">    <span class="keyword">yield</span> cur</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> n <span class="keyword">of</span> fibonacci()) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(n) <span class="comment">// 1 ... 89</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现一个async-await的实现"><a href="#实现一个async-await的实现" class="headerlink" title="实现一个async/await的实现"></a>实现一个<code>async/await</code>的实现</h1><blockquote><p><code>async/await</code>是<code>generator</code>函数的一个语法糖</p></blockquote><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>使用<code>async/await</code>重写例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data1 = <span class="keyword">await</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">const</span> data2 = <span class="keyword">await</span> data1 + <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> data2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">asyncFunc().then(<span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">console</span>.log(val)) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>我们期望通过封装之后能够实现<code>async/await</code>类似的效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> asyncFunc = asyncToGenerator(<span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> data1 = <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">const</span> data2 = <span class="keyword">yield</span> data1 + <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> data2</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">asyncFunc().then(<span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">console</span>.log(val)) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>如果实现串式，需要使用到Promise,核心内容为，如果当前<code>next</code>未执行完毕，则在下一个<code>promise.then</code>中继续调用next(),也即我们构建了一个Promise，省略了generator中若干可控制的yield,只将他的返回值取出来了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncToGenerator</span>(<span class="params">generatorFunc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> gen = generatorFunc.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params">key, arg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> generatorResult</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          generatorResult = gen[key](arg)</span><br><span class="line">        &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">          <span class="keyword">return</span> reject(error)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> &#123; value, done &#125; = generatorResult</span><br><span class="line">        <span class="keyword">if</span> (done) &#123;</span><br><span class="line">          <span class="keyword">return</span> resolve(value)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(value).then(<span class="function"><span class="params">val</span> =&gt;</span> step(<span class="string">'next'</span>,val), err =&gt; step(<span class="string">'throw'</span>,err))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 开启任务</span></span><br><span class="line">      step(<span class="string">'next'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">calcFunc</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="keyword">yield</span> num * <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">  <span class="keyword">const</span> y = <span class="number">3</span> * (<span class="keyword">yield</span> x + <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(y);</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> gen = asyncToGenerator(calcFunc)</span><br><span class="line">gen(<span class="number">2</span>).then(<span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">console</span>.log(val)); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js中常用继承方式</title>
      <link href="/2020/06/06/js%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/06/06/js%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>继承能够实现，是因为对象找属性，如果找不到会一直顺着原型链走下去，直到找到null为之。</p></blockquote><h1 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h1><p>将原型指向一个创建的新的父对象</p><p>优点：可以访问父对象的所有方法<br>缺点：1.父对象的数据会被所以子类共享，2.无法向构造函数内传参</p><p>如果为子类改原型之后，要修改好之后再去添加原型上的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.names = [<span class="string">'kevin'</span>, <span class="string">'daisy'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> child1 = <span class="keyword">new</span> Child();</span><br><span class="line"> </span><br><span class="line">child1.names.push(<span class="string">'yayu'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(child1.names); <span class="comment">// ["kevin", "daisy", "yayu"]</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> child2 = <span class="keyword">new</span> Child();</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(child2.names); <span class="comment">// ["kevin", "daisy", "yayu"]</span></span><br></pre></td></tr></table></figure><h1 id="类式继承，构造器继承，经典继承"><a href="#类式继承，构造器继承，经典继承" class="headerlink" title="类式继承，构造器继承，经典继承"></a>类式继承，构造器继承，经典继承</h1><p>利用创建对象时，<em>同es6中类的construct中this的特性</em>,也即最终返回的结果会是真正创建出来</p><p>他避免了原型继承的大部分缺点，并且等于将父类’构造器‘借用了自己一下。</p><p>优点：1.避免子类所有属性共享。2.可以向构造器内传参<br>缺点：1.不能访问父类原型方法。2.只是使用一下父类原型，但是每一次都要重新创建父类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> child1 = <span class="keyword">new</span> Child(<span class="string">'kevin'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(child1.name); <span class="comment">// kevin</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> child2 = <span class="keyword">new</span> Child(<span class="string">'daisy'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(child2.name); <span class="comment">// daisy</span></span><br></pre></td></tr></table></figure><h1 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h1><p>原型链继承 + 类式继承</p><p>原型继承重点关注了原型部分，类式继承重点关注了实例部分，将他们进行一次组合</p><p>优点：1.不能访问父类原型方法。2.避免子类所有属性共享。3.可以向构造器内传参<br>缺点：1.只是使用一下父类原型，但是每一次都要重新创建父类，调用2次，创建实例一次，绑定原型一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">'kevin'</span>, <span class="string">'18'</span>);</span><br><span class="line"> </span><br><span class="line">child1.colors.push(<span class="string">'black'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(child1.name); <span class="comment">// kevin</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.age); <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.colors); <span class="comment">// ["red", "blue", "green", "black"]</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child(<span class="string">'daisy'</span>, <span class="string">'20'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(child2.name); <span class="comment">// daisy</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.age); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.colors); <span class="comment">// ["red", "blue", "green"]</span></span><br></pre></td></tr></table></figure><h1 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h1><p>创建对象时，直接以某个对象为原型挂载，和原型链继承相似，只不过我们并没有提供构造函数。</p><p>他和原型链继承的区别是：</p><ul><li>原型链继承，有构造函数，改变<code>prototype</code></li><li>原型式继承，无构造函数，内部创建一个空构造函数，直接替换<code>prototype</code>,只关心以某个对象为原型的创建。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6官方实现</span></span><br><span class="line"><span class="built_in">Object</span>.create()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在内部手动创建了构造器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">proto</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  F.prototype = proto</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：1.可以使用原型链的方法。2.创建起来比较简单。<br>缺点：1.会共享父对象方法，但不一定会改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">'kevin'</span>,</span><br><span class="line">  friends: [<span class="string">'daisy'</span>, <span class="string">'kelly'</span>]</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> person1 = createObj(person);</span><br><span class="line"><span class="keyword">let</span> person2 = createObj(person);</span><br><span class="line"> </span><br><span class="line">person1.name = <span class="string">'person1'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person2.name); <span class="comment">// kevin</span></span><br><span class="line"> </span><br><span class="line">person1.friends.push(<span class="string">'taylor'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person2.friends); <span class="comment">// ["daisy", "kelly", "taylor"]</span></span><br></pre></td></tr></table></figure><p>这里一定要注意<code>.</code>操作符，如果他没有该属性，会进行添加，然后进行修改的话是不会发生改变的。</p><p>所以，修改<code>person1.name</code>的值，<code>person2.name</code>的值并未发生改变，并不是因为<code>person1</code>和<code>person2</code>有独立的 <code>name</code> 值，而是因为<code>person1.name = &#39;person1&#39;</code>，给<code>person1</code>添加了<code>name</code>值，并非修改了原型上的<code>name</code>值。</p><p>同样，如果是<code>person1.friends = [ xxx ]</code>这样以后再修改，也是不会影响到原型上的方法的。</p><h1 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h1><p>和原型式继承很像，只是增添了一些方法，类似于包装了一层</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> clone = <span class="built_in">Object</span>.create(o)</span><br><span class="line">  clone.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h1><p>他是结合了上述的优点，只是我们再使用继承时，一般不会希望子类去共享父类的方法，（有的话，就使用组合继承）所以会创建很多对象，其原型上可能会有一些用不到的对象，那么我们用组合继承就可以避免</p><p>优点：1.可以访问父类原型。2.避免共享父类数据。3.可以调用父类构造函数传参。4.免去原型上不必要的属性。</p><p>就是在组合继承的基础上，避免直接<code>prototype = new Xxx()</code>,而是采用迂回的方式。</p><p>最终Parent上的属性，通过类式继承，借给子类，等于直接变成了子类的属性，而在原型上，由于并没有new操作，所以也并不会将Parent上的部分无用属性挂载到原型上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subObj, supperObj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> prototype = <span class="built_in">Object</span>.create(supperObj.prototype)</span><br><span class="line">  prototype.constructor = subObj</span><br><span class="line">  prototype.constructor.prototype = prototype</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(Child, Parent)</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>(<a href="https://www.cnblogs.com/lanyueff/p/7792009.html)[https://www.cnblogs.com/lanyueff/p/7792009.html]" target="_blank" rel="noopener">https://www.cnblogs.com/lanyueff/p/7792009.html)[https://www.cnblogs.com/lanyueff/p/7792009.html]</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>致2年前的自己</title>
      <link href="/2020/06/04/%E8%87%B42%E5%B9%B4%E5%89%8D%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
      <url>/2020/06/04/%E8%87%B42%E5%B9%B4%E5%89%8D%E7%9A%84%E8%87%AA%E5%B7%B1/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/2020/06/05/bear.png" alt="bear"></p><p>2年前的自己应该是在准备高考了，今年受到疫情影响有所推迟，应该是到7月份了。今天和同学聊了聊人生，感觉不知不觉大家也都开始考虑人生了，反观自己，这里一路走来还是得以有父母能一直支持与鼓励我。教育真的很重要，一定不能小看了他的作用，不仅是教授一个人知识，更是约束一个人在正确时间干正确的事，希望父母一切安好，也给自己打气，加油！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>标准Package打包方式</title>
      <link href="/2020/05/31/%E6%A0%87%E5%87%86Package%E6%89%93%E5%8C%85%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/05/31/%E6%A0%87%E5%87%86Package%E6%89%93%E5%8C%85%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前半部分是father-build，后部分是打包需要注意的部分</p></blockquote><p>使用<a href="https://github.com/umijs/father/tree/2.x" target="_blank" rel="noopener">father-build</a>打包</p><p>具体可参考<a href="https://github.com/search?q=redux&amp;ref=opensearch" target="_blank" rel="noopener">redux</a>的包管理，是一个相对比较规范的包管理仓库(<a href="https://unpkg.com/browse/redux@4.0.1/" target="_blank" rel="noopener">unpkg</a>)</p><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装方式</span></span><br><span class="line">yarn add father-build -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方式</span></span><br><span class="line"><span class="string">"build"</span>: <span class="string">"father-build"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应该为在当前目录下安装依赖后直接使用</span></span><br><span class="line">father-build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处为了节省node_modules，均安装在了上一级目录</span></span><br><span class="line">../node_modules/.bin/father-build</span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p><code>.fatherrc.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup（推荐）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  entry: <span class="string">'src/index.js'</span>,</span><br><span class="line">  esm: &#123;</span><br><span class="line">    type: <span class="string">'rollup'</span>,</span><br><span class="line">    mjs: <span class="literal">true</span>, <span class="comment">// 开启mjs</span></span><br><span class="line">  &#125;,</span><br><span class="line">  cjs: <span class="string">'rollup'</span>,</span><br><span class="line">  umd: &#123;</span><br><span class="line">    name: <span class="string">'demo'</span>, <span class="comment">// 暴露全局的名称</span></span><br><span class="line">    minFile: <span class="literal">true</span>, <span class="comment">// 是否打出umd.min</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// babel</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  entry: <span class="string">'src/index.js'</span>,</span><br><span class="line">  esm: &#123;</span><br><span class="line">    type: <span class="string">'babel'</span>,</span><br><span class="line">    mjs: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  cjs: <span class="string">'babel'</span>,</span><br><span class="line">  umd: &#123;</span><br><span class="line">    name: <span class="string">'demo'</span>,</span><br><span class="line">    minFile: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意包名称"><a href="#注意包名称" class="headerlink" title="注意包名称"></a>注意包名称</h1><ul><li>目录名称</li><li>package.json名称</li><li>package.json版本</li></ul><h1 id="包指向"><a href="#包指向" class="headerlink" title="包指向"></a>包指向</h1><ul><li>main(cjs)</li><li>module(esm)</li><li>unpkg(umd)</li></ul><h1 id="包含的文件"><a href="#包含的文件" class="headerlink" title="包含的文件"></a>包含的文件</h1><p>package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"files"</span>: [</span><br><span class="line">    <span class="string">"dist/"</span>,</span><br><span class="line">    <span class="string">"lib/"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="发包前检查"><a href="#发包前检查" class="headerlink" title="发包前检查"></a>发包前检查</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm pack</span><br></pre></td></tr></table></figure><h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用requestIdleCallback调度任务</title>
      <link href="/2020/05/27/%E4%BD%BF%E7%94%A8requestIdleCallback%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2020/05/27/%E4%BD%BF%E7%94%A8requestIdleCallback%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="任务调度系统"><a href="#任务调度系统" class="headerlink" title="任务调度系统"></a>任务调度系统</h1><h2 id="操作系统中调度"><a href="#操作系统中调度" class="headerlink" title="操作系统中调度"></a>操作系统中调度</h2><p>操作系统中，基于时间片调度时，如果到了时间该程序还没有运行完毕，那么此时会有中断，将该程序的相关运行位置，以及上下文环境等存入相关的寄存器中，之后进行恢复</p><h2 id="浏览器中调度"><a href="#浏览器中调度" class="headerlink" title="浏览器中调度"></a>浏览器中调度</h2><p>我们在浏览器中，也可以近似的模拟出调度算法，但是js程序必须自己守时，如果到了时间不自己退出，或者是长时间占用主线程，那么卡顿是必然的，所以在浏览器中必须来手动尽可能的控制程序的运行。</p><h1 id="浏览器中目前提供的方式"><a href="#浏览器中目前提供的方式" class="headerlink" title="浏览器中目前提供的方式"></a>浏览器中目前提供的方式</h1><p>在一个EventLoop，如果当前这个循环需要更新，js代码-requestAnimationFrame-UI渲染(layout, paint)-requestIdleCallback(0个或多个)-macroTask</p><h2 id="requestIdleCallback"><a href="#requestIdleCallback" class="headerlink" title="requestIdleCallback"></a>requestIdleCallback</h2><p>当浏览器运行时，主线程有空闲的时间，那么就会去运行代码，但是浏览器空闲下来，谁也不能保证接下来浏览器会发生什么，会不会有优先级更高的任务进来,如用户点击的交互事件，或者是动画事件,相关的研究发现，人在50ms内是不太容易察觉出变化来的，所以如果当前线程空闲（用户不操作，或者当前并没什么操作进行）当前requestIdleCallback会设定<code>&lt;50ms</code>执行时间。</p><p>requestIdleCallback(fn, timeout?)</p><ul><li>fn最终回调执行<code>fn(deadline)</code>,<code>deadline.timeout是否超时</code>,<code>deadline.timeRemaining()</code>剩余时间，&gt;=0, 到0表示已经执行超时了。</li><li>timeout,表示超时时间，因为<code>rIC</code>并不一定会执行，如果浏览器长时间忙碌，那么他会在timeout超时下强制执行</li></ul><h2 id="React的polyfill"><a href="#React的polyfill" class="headerlink" title="React的polyfill"></a>React的<code>polyfill</code></h2><blockquote><p><a href="mailto:`React@16.6.x" target="_blank" rel="noopener">`React@16.6.x</a>`</p></blockquote><p>React团队考虑到浏览器兼容问题，并没有使用<code>rIC</code>,而是使用<code>rAF</code>+<code>setTimeout</code>来进行<code>polyfill</code></p><ul><li><code>rAF,requestAnimationFrame</code>用来在每个渲染时，发出执行的信号</li></ul><p>并且其调动callback时，会传入类似当前<code>performace.now</code>，他使用计算屏幕的刷新率（多次<code>rAF</code>间隔）计算出下一次渲染的<code>deadline</code>当然这里包括了UI线程的时间，<code>deadline</code>与当前时间<code>now</code>可近似算出，这一帧还有多少的执行时间。</p><ul><li><p><code>setTimeout</code>同样是为了防止该任务在浏览器繁忙时，多次得不到执行而设定的一个超时</p></li><li><p>在<code>rAF</code>中发出<code>postMessage</code>，UI渲染结束后，调用<code>macroTask</code>,监听<code>message</code>回调的事件会执行，并通过上下文计算是否超时</p></li></ul><h1 id="使用rIC-requestIdleCallback-小例子"><a href="#使用rIC-requestIdleCallback-小例子" class="headerlink" title="使用rIC(requestIdleCallback)小例子"></a>使用<code>rIC(requestIdleCallback)</code>小例子</h1><blockquote><p>使用chrome时，可在<code>Performance</code>调低性能，效果较为明显。</p></blockquote><p>执行一定数量的console.log操作，使用同步异步来执行</p><h2 id="模拟浏览器忙碌的情况"><a href="#模拟浏览器忙碌的情况" class="headerlink" title="模拟浏览器忙碌的情况"></a>模拟浏览器忙碌的情况</h2><p>使用一个css动画模拟浏览器的忙碌情况，从而更好的测试性能，我们创建了一个左右移动的box</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="comment">/* 使用margin移动，更好验证效果，如果做动画，transform还是首选 */</span></span></span><br><span class="line"><span class="css">@<span class="keyword">keyframes</span> slide &#123;</span></span><br><span class="line"><span class="undefined">  0% &#123;</span></span><br><span class="line"><span class="undefined">    margin-left: 0;</span></span><br><span class="line"><span class="css">    <span class="comment">/* transform: translateX(0); */</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  50% &#123;</span></span><br><span class="line"><span class="undefined">    margin-left: 200px;</span></span><br><span class="line"><span class="css">    <span class="comment">/* transform: translateX(200px); */</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  100% &#123;</span></span><br><span class="line"><span class="undefined">    margin-left: 0;</span></span><br><span class="line"><span class="css">    <span class="comment">/* transform: translateX(0); */</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">  width: 400px;</span></span><br><span class="line"><span class="undefined">  height: 200px;</span></span><br><span class="line"><span class="undefined">  animation-duration: 3s;</span></span><br><span class="line"><span class="undefined">  animation-name: slide;</span></span><br><span class="line"><span class="undefined">  animation-iteration-count: infinite;</span></span><br><span class="line"><span class="undefined">  background: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">box</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TEST_SIZE = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">performSync</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(TEST_SIZE)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.time(<span class="string">'push'</span>)</span><br><span class="line">  <span class="comment">// 放入数组中</span></span><br><span class="line">  <span class="keyword">for</span> (; i &lt; TEST_SIZE; i++) &#123;</span><br><span class="line">    arr[i] = i</span><br><span class="line">  &#125;</span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">'push'</span>) <span class="comment">// push: 0.41015625ms</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.time(<span class="string">'sync-log'</span>)</span><br><span class="line">  <span class="comment">// 打印</span></span><br><span class="line">  <span class="keyword">for</span> (; i &lt; TEST_SIZE; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">'sync-log'</span>) <span class="comment">// sync-log: 2690.320068359375ms</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，执行performSync时，浏览器动画发生了明显的卡顿，也即js占用时间过长，导致后面出现掉帧</p><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>我们这里存取数据时，需要使用链表进行操作了，可能会涉及到频繁的增添元素，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">performAsync</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> deadline = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> firstCallbackNode = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> lastCallbackNode = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(TEST_SIZE)</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.time(<span class="string">'push'</span>)</span><br><span class="line">  <span class="comment">// 放入链中</span></span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; TEST_SIZE; i++) &#123;</span><br><span class="line">    obj = &#123; <span class="attr">next</span>: <span class="literal">null</span>, <span class="attr">payload</span>: i &#125;</span><br><span class="line">    <span class="keyword">if</span> (firstCallbackNode === <span class="literal">null</span>) &#123;</span><br><span class="line">      lastCallbackNode = firstCallbackNode = obj</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      lastCallbackNode = lastCallbackNode.next = obj</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">'push'</span>) <span class="comment">// push: 1.015869140625ms</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行链表中的任务</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">flushWork</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (deadline.timeRemaining() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 结束任务</span></span><br><span class="line">      <span class="keyword">if</span> (firstCallbackNode === <span class="literal">null</span>) &#123;</span><br><span class="line">        lastCallbackNode = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      callback(firstCallbackNode.payload)</span><br><span class="line">      firstCallbackNode = firstCallbackNode.next</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 进行调度</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">scheduleWork</span>(<span class="params">deadlineObj</span>) </span>&#123;</span><br><span class="line">    deadline = deadlineObj</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结束</span></span><br><span class="line">    <span class="keyword">if</span> (firstCallbackNode === <span class="literal">null</span>) &#123;</span><br><span class="line">      deadline = <span class="literal">null</span></span><br><span class="line">      <span class="built_in">console</span>.timeEnd(<span class="string">'async-log'</span>) <span class="comment">// async-log: 7676.759033203125ms</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下一次继续调度</span></span><br><span class="line">    requestIdleCallback(scheduleWork)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前执行刷新任务</span></span><br><span class="line">    flushWork(<span class="built_in">console</span>.log)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.time(<span class="string">'async-log'</span>)</span><br><span class="line">  <span class="comment">// 启动调度</span></span><br><span class="line">  requestIdleCallback(scheduleWork)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在执行performAsync时，动画执行依旧比较流畅，当然相应所耗费时间还是增加的。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>浏览要干的活是一定的，你让他一下干完，时间很少，但是发生了明显的卡顿（他自己的活来不及干了）。让他空闲的时候执行，动画较为流畅，执行任务所需的时间也久了（给你干活的时间少了）</p><p>React团队同时引进了<code>ConcurrentMode</code>意为给任务增加不同的优先级，这样能够更好的调度，当然他采用“懒”策略，能不执行就不执行，等他要超时了，赶紧执行。保证了有大量间隙时间给用户交互，但是任务越积越多，到最后<code>一大笔帐</code>要算的时候，还是会出现卡顿。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用对象池创建数据</title>
      <link href="/2020/05/25/%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E6%B1%A0%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/05/25/%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E6%B1%A0%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在React中,使用到pool的地方并不少，比如<em><code>SyntheticEvent.js</code>中使用事件对象池，来创建销毁事件。<code>ReactChild.js</code>使用child对象池，<code>React.Children.forEach</code>来遍历子节点。</em></p></blockquote><p>使用对象池来创建数据，可以很好地帮助我们创建那些需要频繁创建销毁的元素,并在性能上做一部分优化。</p><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><p>我们使用Marker来标记地图上的点</p><blockquote><p>参考<code>React.16.6.0</code>中<code>SyntheticEvent.js</code>创建事件池的写法</p></blockquote><h2 id="定义Marker对象"><a href="#定义Marker对象" class="headerlink" title="定义Marker对象"></a>定义Marker对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Marker</span>(<span class="params">x, y, containerInfo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x</span><br><span class="line">  <span class="keyword">this</span>.y = y</span><br><span class="line">  <span class="keyword">this</span>.containerInfo = containerInfo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Marker.prototype.destroy = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.y = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.containerInfo = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Marker.prototype.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`x: <span class="subst">$&#123;<span class="keyword">this</span>.x&#125;</span> y:<span class="subst">$&#123;<span class="keyword">this</span>.y&#125;</span> containerInfo:<span class="subst">$&#123;<span class="keyword">this</span>.containerInfo&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义对象池相关"><a href="#定义对象池相关" class="headerlink" title="定义对象池相关"></a>定义对象池相关</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象池大小</span></span><br><span class="line"><span class="keyword">const</span> MARKER_POOL_SIZE = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从pool中得到一个marker对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPooledMarker</span>(<span class="params">x, y, containerInfo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MarkerConstructor = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (MarkerConstructor.markerPool.length) &#123;</span><br><span class="line">    <span class="keyword">const</span> instance = MarkerConstructor.markerPool.pop()</span><br><span class="line">    MarkerConstructor.call(instance, x, y, containerInfo)</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MarkerConstructor(x, y, containerInfo)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归还一个marker对象到pool中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">releasePooledMarker</span>(<span class="params">marker</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MarkerConstructor = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (marker <span class="keyword">instanceof</span> MarkerConstructor === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">Error</span>() <span class="comment">// 当前marker不是由其创造,错误提示</span></span><br><span class="line">  &#125;</span><br><span class="line">  marker.destroy()</span><br><span class="line">  <span class="keyword">if</span> (MarkerConstructor.markerPool.length &lt; MARKER_POOL_SIZE) &#123;</span><br><span class="line">    MarkerConstructor.markerPool.push(marker)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向Marker上挂载对象池的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMarkerPoolingTo</span>(<span class="params">MarkerConstructor</span>) </span>&#123;</span><br><span class="line">  MarkerConstructor.markerPool = []</span><br><span class="line">  MarkerConstructor.getPooled = getPooledMarker</span><br><span class="line">  MarkerConstructor.release = releasePooledMarker</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将对象池应用到Marker上</span></span><br><span class="line">addMarkerPoolingTo(Marker)</span><br></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><blockquote><p>这里手动释放marker,即<code>marker = null</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未使用对象池</span></span><br><span class="line"><span class="keyword">let</span> marker1 = <span class="keyword">new</span> Marker(<span class="number">1</span>, <span class="number">1</span>, <span class="string">'container1'</span>)</span><br><span class="line"></span><br><span class="line">marker1.show()</span><br><span class="line"></span><br><span class="line">marker1.destroy()</span><br><span class="line">marker1 = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用对象池</span></span><br><span class="line"><span class="keyword">let</span> marker2 = Marker.getPooled(<span class="number">2</span>, <span class="number">2</span>, <span class="string">'container2'</span>)</span><br><span class="line"></span><br><span class="line">marker2.show()</span><br><span class="line"></span><br><span class="line">Marker.release(marker2)</span><br><span class="line">marker2 = <span class="literal">null</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>事件回调系统中处理错误</title>
      <link href="/2020/05/21/%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/"/>
      <url>/2020/05/21/%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="更优的调试方式"><a href="#更优的调试方式" class="headerlink" title="更优的调试方式"></a>更优的调试方式</h2><p>如何让我们在调试代码时，既看到具体的报错信息，又能不影响当前的执行环境,使用<code>try-catch</code>的方式会帮我们静默捕获</p><blockquote><p>程序出错是不能走正常的逻辑，所以我们仅是记录错误信息，hasError等并且去走出错的逻辑，<em><code>React的ErrorBandage</code>渲染错误的备用UI</em>，这里仅是能看到报错的具体信息，但是又不影响出错的逻辑。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟出效果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleError</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="built_in">Error</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)</span><br><span class="line">toggleError()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际执行效果</span></span><br><span class="line">script start</span><br><span class="line">Uncaught <span class="built_in">Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终期望的执行结果</span></span><br><span class="line">script start</span><br><span class="line">Uncaught <span class="built_in">Error</span></span><br><span class="line">script end</span><br></pre></td></tr></table></figure><h2 id="事件回调系统"><a href="#事件回调系统" class="headerlink" title="事件回调系统"></a>事件回调系统</h2><p>事件回调系统拥有自己的上下文，即便在自己的事件回调系统中触发了错误也不会影响到整个事件的处理系统</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用事件回调系统</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Init: 1"</span>);</span><br><span class="line">  DOES_NOT_EXIST++; <span class="comment">// error</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Init: 2"</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时console中会显示如下内容</span></span><br><span class="line">Init: <span class="number">1</span></span><br><span class="line">Uncaught <span class="built_in">ReferenceError</span>: DOES_NOT_EXIST is not defined</span><br><span class="line">Init: <span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery中使用回调系统实现</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Init: 1"</span>);</span><br><span class="line">  DOES_NOT_EXIST++; <span class="comment">// error</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Init: 2"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时console中会显示如下内容</span></span><br><span class="line">Init: <span class="number">1</span></span><br><span class="line">Uncaught <span class="built_in">ReferenceError</span>: DOES_NOT_EXIST is not defined</span><br></pre></td></tr></table></figure><p>可以看到使用了事件处理函数会使得某个回调事件中发生了错误不会破坏到整个系统</p><h2 id="不同环境下处理错误的不同"><a href="#不同环境下处理错误的不同" class="headerlink" title="不同环境下处理错误的不同"></a>不同环境下处理错误的不同</h2><h3 id="生产环境使用的try-catch"><a href="#生产环境使用的try-catch" class="headerlink" title="生产环境使用的try-catch"></a>生产环境使用的<code>try-catch</code></h3><p>此时发生的错误会被我们捕获，并且继续进行后续的执行，(比如React中ErrorBandage可渲染备用的错误UI)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleError</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="built_in">Error</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  toggleError()</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// 处理错误信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开发环境中"><a href="#开发环境中" class="headerlink" title="开发环境中"></a>开发环境中</h3><p>当然使用<code>try-catch</code>是没有问题的，但是既然我们正在开发，就应该得知具体的报错情况，并且处理掉，但是我们一旦使用<code>try-catch</code>就会帮我们静默的处理，并不会暴露错误，<em>chrome中有调试工具<code>pause on caught exception</code>只有出错就暂停到此处</em>,所以我们使用一种曲线救国的方式，使用事件回调的方式去运行，报错并不会影响到外部环境。</p><p>模拟React中的<code>invokeGuardedCallback</code>，即将回调放到一个自定义事件函数中，立即触发，有错误不会影响外部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hasError = <span class="literal">true</span></span><br><span class="line"><span class="keyword">let</span> error = <span class="literal">null</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invokeGuardedCallback</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 全局error事件，有错误记录error信息</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleWindowError</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    error = event.error</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'error'</span>, handleWindowError);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义事件处理回调</span></span><br><span class="line">  <span class="keyword">const</span> eventType = <span class="string">'fakeErrEventType'</span></span><br><span class="line">  <span class="keyword">const</span> evt = <span class="built_in">document</span>.createEvent(<span class="string">'Event'</span>)</span><br><span class="line">  evt.initEvent(eventType, <span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">const</span> fakeNode = <span class="built_in">document</span>.createElement(<span class="string">'fake-err'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理回调</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">callCallback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    fakeNode.removeEventListener(eventType, callCallback, <span class="literal">false</span>)</span><br><span class="line">    callback.call(<span class="literal">null</span>)</span><br><span class="line">    <span class="comment">// 默认有错误，如果正常执行callback，则认为没有错误发生</span></span><br><span class="line">    hasError = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绑定自定义事件并触发</span></span><br><span class="line">  fakeNode.addEventListener(eventType, callCallback, <span class="literal">false</span>)</span><br><span class="line">  fakeNode.dispatchEvent(evt)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不同方法处理实例"><a href="#不同方法处理实例" class="headerlink" title="不同方法处理实例"></a>不同方法处理实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标回调函数toggleError</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleError</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="built_in">Error</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不进行错误处理"><a href="#不进行错误处理" class="headerlink" title="不进行错误处理"></a>不进行错误处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)</span><br><span class="line">toggleError()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line">script start</span><br><span class="line">Uncaught <span class="built_in">Error</span></span><br></pre></td></tr></table></figure><h3 id="使用try-catch处理"><a href="#使用try-catch处理" class="headerlink" title="使用try-catch处理"></a>使用<code>try-catch</code>处理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  toggleError()</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="comment">// err 错误相关信息</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果， 并不能看出错误详情位置，可能会忽略发生了错误，因为被处理了</span></span><br><span class="line">script start</span><br><span class="line">script end</span><br></pre></td></tr></table></figure><h3 id="使用invokeGuardedCallback"><a href="#使用invokeGuardedCallback" class="headerlink" title="使用invokeGuardedCallback"></a>使用<code>invokeGuardedCallback</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)</span><br><span class="line">invokeGuardedCallback(toggleError)</span><br><span class="line"><span class="keyword">if</span> (hasError) &#123;</span><br><span class="line">  <span class="comment">// error 是全局捕获的出错信息</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果， 能看出错误详情位置</span></span><br><span class="line">script start</span><br><span class="line">Uncaught <span class="built_in">Error</span></span><br><span class="line">script end</span><br></pre></td></tr></table></figure><p>参考资料</p><p><a href="https://www.cnblogs.com/fangzhaolee/p/3719384.html" target="_blank" rel="noopener">https://www.cnblogs.com/fangzhaolee/p/3719384.html</a></p><p><a href="https://github.com/facebook/react/blob/22f7663f14f12ebd6174292931e94d2b352cf666/packages/shared/invokeGuardedCallbackImpl.js#L61" target="_blank" rel="noopener">https://github.com/facebook/react/blob/22f7663f14f12ebd6174292931e94d2b352cf666/packages/shared/invokeGuardedCallbackImpl.js#L61</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>正负0的问题</title>
      <link href="/2020/05/16/0-0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/16/0-0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在其他语言中（Java）如果出现了<code>1/0</code>这种操作，则会直接报出Exception,但是在js中并不会报错，而是给出一个特殊值<code>Infinity</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>/<span class="number">1</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>/<span class="number">0</span> = <span class="literal">Infinity</span> <span class="comment">// 无限大</span></span><br></pre></td></tr></table></figure><h1 id="0和-0的区别"><a href="#0和-0的区别" class="headerlink" title="+0和-0的区别"></a><code>+0</code>和<code>-0</code>的区别</h1><p><code>+0</code>和<code>-0</code>是完全相等的，所以要是进行比较还是应该从<code>1/0</code>的特性来说</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span> === <span class="number">-0</span> <span class="comment">// true</span></span><br><span class="line">+<span class="number">0</span> === <span class="number">0</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">-0</span> === <span class="number">0</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>/<span class="number">0</span> = <span class="literal">Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>/<span class="number">-0</span> = -<span class="literal">Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="literal">Infinity</span> === <span class="literal">Infinity</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">Infinity</span> === -<span class="literal">Infinity</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以下计算在正常情况，不要故意改变 .e.g</span></span><br><span class="line"><span class="comment"> *  Infinity + (-Infinity) = NaN</span></span><br><span class="line"><span class="comment"> *  Infinity * (1 / Infinity) = NaN</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 这样不改变运算情况是可以的</span></span><br><span class="line"><span class="comment"> *  Infinity * -Infinity = -Infinity</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * `*`，`/`运算要考虑n的符号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="literal">Infinity</span> + n = <span class="literal">Infinity</span> <span class="comment">// n为所有值</span></span><br><span class="line"></span><br><span class="line"><span class="literal">Infinity</span> - n = <span class="literal">Infinity</span> <span class="comment">// n为非Infinity</span></span><br><span class="line"><span class="literal">Infinity</span> - <span class="literal">Infinity</span> = <span class="literal">NaN</span></span><br><span class="line"></span><br><span class="line"><span class="literal">Infinity</span> * n = <span class="literal">Infinity</span> <span class="comment">// n为所有值</span></span><br><span class="line"></span><br><span class="line"><span class="literal">Infinity</span> / n = <span class="literal">Infinity</span> <span class="comment">// n为非Infinity</span></span><br><span class="line"><span class="literal">Infinity</span> / <span class="literal">Infinity</span> = <span class="literal">NaN</span></span><br></pre></td></tr></table></figure><h1 id="NaN和0的关系"><a href="#NaN和0的关系" class="headerlink" title="NaN和0的关系"></a><code>NaN</code>和<code>0</code>的关系</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>/<span class="number">0</span> = <span class="literal">NaN</span> <span class="comment">// 特殊</span></span><br><span class="line"></span><br><span class="line">+n / <span class="number">0</span> = <span class="literal">Infinity</span></span><br><span class="line">-n / <span class="number">0</span> = -<span class="literal">Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> / n = <span class="literal">NaN</span> <span class="comment">// (n !== 0)</span></span><br><span class="line"></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h1 id="Object-is的polyfill"><a href="#Object-is的polyfill" class="headerlink" title="Object.is的polyfill"></a><code>Object.is</code>的polyfill</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x === y) &#123; <span class="comment">// 判断正负0</span></span><br><span class="line">    <span class="keyword">return</span> x !== <span class="number">0</span> || y !== <span class="number">0</span> || <span class="number">1</span>/x === <span class="number">1</span>/y</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// NaN !== Nan, 这里polyfill认为 两者相等</span></span><br><span class="line">    <span class="keyword">return</span> x !== x || y !== y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js对首屏渲染的问题</title>
      <link href="/2020/05/12/js%E5%AF%B9%E9%A6%96%E5%B1%8F%E6%B8%B2%E6%9F%93%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/12/js%E5%AF%B9%E9%A6%96%E5%B1%8F%E6%B8%B2%E6%9F%93%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器发出请求后，接收流程"><a href="#浏览器发出请求后，接收流程" class="headerlink" title="浏览器发出请求后，接收流程"></a>浏览器发出请求后，接收流程</h2><ol><li>Bytes, <code>(3C 62 5F 49 ....)</code></li><li>Characters, <code>&lt;html&gt;&lt;head&gt;....&lt;/head&gt;..</code></li><li>Tokens, <code>StartTag: html, StartTag: head, ... Hello .... EndTag: html</code></li><li>Nodes, <code>html, head, meta, body, p, Hello</code></li><li>DOM, <code>生成最终DOM树， HTML - head, body(树结构)</code></li></ol><h2 id="浏览器渲染流程"><a href="#浏览器渲染流程" class="headerlink" title="浏览器渲染流程"></a>浏览器渲染流程</h2><p>HTML生成为DOM对象，CSS生成为CSSOM对象，两者进行Attached操作后，即可生成一个render tree，通过layout（reflow）计算其在浏览器上的样式，最终进行paint绘制到浏览器上</p><h3 id="在没有JS的情况"><a href="#在没有JS的情况" class="headerlink" title="在没有JS的情况"></a>在没有JS的情况</h3><p>DOM对象和CSSOM对象同步生成，待CSSOM对象生成完毕后(如果之后的CSS对之前的样式进行修改，浏览器会发生多次重绘和回流，要等CSSOM生成完毕后在进行渲染)，之后从上到下显示页面，直到整个DOM渲染完成。</p><h3 id="JS对浏览器渲染引擎的影响"><a href="#JS对浏览器渲染引擎的影响" class="headerlink" title="JS对浏览器渲染引擎的影响"></a>JS对浏览器渲染引擎的影响</h3><p>因为JS可以操作DOM, CSS所以，js可能会修改之前的内容，使浏览器发生重绘，影响性能，浏览器此时需要阻塞当前线程，转而去运行js内容，运行完后，继续进行之后的渲染逻辑。</p><p>注意：如果script标签是异步拉取的，那么拉取之后到本地，当运行JS时，线程依然会阻塞</p><h3 id="HTML-CSS-JS存在的渲染情况"><a href="#HTML-CSS-JS存在的渲染情况" class="headerlink" title="HTML,CSS,JS存在的渲染情况"></a>HTML,CSS,JS存在的渲染情况</h3><p>浏览器接收到内容后，开始解析，先去匹配一下script标签，有的话就会匹配到也给tcp，去进行下载（并非执行到才回去加载，只是提前下载）,浏览器DOM,CSSOM，生成renderTree,之后绘制到浏览器，一旦遇到script标签后，阻塞当前线程，去运行script标签内的东西（也就是script内的操作之前的DOM结构，后面的还没有生成），如果后面还有内容，则不会渲染，严重情况可能会出现页面渲染了一半的情况。</p><h2 id="首屏渲染时间，页面加载完成时间"><a href="#首屏渲染时间，页面加载完成时间" class="headerlink" title="首屏渲染时间，页面加载完成时间"></a>首屏渲染时间，页面加载完成时间</h2><p>FP（First Paint）：首屏渲染，这里是首页需要显示的内容（部分是不需要被首次渲染出来的）</p><p>DCL(DOM Content Loaded)： 页面加载完成 (所有的js执行完成，触发DOMContentLoaded事件，window.onLoad)</p><p>我们关心的是首屏渲染事件，如果首屏渲染到一半，中间插入了js，如果该js占用较长时间，或加载问题，会造成页面被截断，只能显示一部分页面，所以我们关心的是这个部分。</p><h2 id="为什么js放到body最后"><a href="#为什么js放到body最后" class="headerlink" title="为什么js放到body最后"></a>为什么js放到body最后</h2><p>js放到最后也会下载，但是由于他在最后，并不会影响之前首屏内容的渲染，也就是说js文件放到前面还是后面，DOMContentLoad是不会改变的，但是不同的位置会影响FP,这里肯定是先让用户看到页面最好，所以一般js请求会放到最后面</p><blockquote><p>其实浏览器发现有js存在，会去开启下载，那么必然会占用那么一丢丢浏览资源，包括CPU</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 恰饭 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用二进制码表示状态</title>
      <link href="/2020/04/20/%E5%88%A9%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%A0%81%E8%A1%A8%E7%A4%BA%E7%8A%B6%E6%80%81/"/>
      <url>/2020/04/20/%E5%88%A9%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%A0%81%E8%A1%A8%E7%A4%BA%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p>在前端中，二进制码似乎在平常的开发中很少会去使用到，但是在一些框架中，也会看到其作为开发的一部分存在，并且结合位运算，有时也能达到较好的使用效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// react\packages\shared\ReactSideEffectTags.js 中使用的相关状态码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type SideEffectTag = number;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Don't change these two values. They're used by React Dev Tools.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> NoEffect = <span class="comment">/*              */</span> <span class="number">0b00000000000</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> PerformedWork = <span class="comment">/*         */</span> <span class="number">0b00000000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can change the rest (and add more).</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Placement = <span class="comment">/*             */</span> <span class="number">0b00000000010</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Update = <span class="comment">/*                */</span> <span class="number">0b00000000100</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> PlacementAndUpdate = <span class="comment">/*    */</span> <span class="number">0b00000000110</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Deletion = <span class="comment">/*              */</span> <span class="number">0b00000001000</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ContentReset = <span class="comment">/*          */</span> <span class="number">0b00000010000</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Callback = <span class="comment">/*              */</span> <span class="number">0b00000100000</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DidCapture = <span class="comment">/*            */</span> <span class="number">0b00001000000</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Ref = <span class="comment">/*                   */</span> <span class="number">0b00010000000</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Snapshot = <span class="comment">/*              */</span> <span class="number">0b00100000000</span>;</span><br></pre></td></tr></table></figure><h2 id="简单的位运算"><a href="#简单的位运算" class="headerlink" title="简单的位运算"></a>简单的位运算</h2><p>位运算不会进位，不要与二进制的加减运算混淆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 与(AND)      或(OR)      异或(XOR)     非(NOT)</span><br><span class="line"></span><br><span class="line">  0b001       0b001        0b011        </span><br><span class="line">&amp; 0b010     | 0b010      ^ 0b001      ~ 0b011</span><br><span class="line">--------    --------     --------     --------</span><br><span class="line">  0b000       0b011        0b010        0b100</span><br></pre></td></tr></table></figure><p>在js中的数字类型转换中:</p><ul><li><code>0</code>,<code>NaN</code>对应的boolean值为<code>false</code>  </li><li><code>123</code>,<code>-123</code>,<code>Infinity</code>,<code>...</code>对应的boolean值为<code>true</code>。</li></ul><p>所以利用这一特性可以将二进制数位运算的值转换为boolean值。</p><h2 id="运用位运算实例"><a href="#运用位运算实例" class="headerlink" title="运用位运算实例"></a>运用位运算实例</h2><p>吃饭，睡觉，打豆豆为例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存在的各种状态（为了对齐，借鉴React的书写方式）</span></span><br><span class="line"><span class="keyword">const</span> Eat = <span class="comment">/*      */</span> <span class="number">0b001</span> <span class="comment">// 吃饭</span></span><br><span class="line"><span class="keyword">const</span> Sleep = <span class="comment">/*    */</span> <span class="number">0b010</span> <span class="comment">// 睡觉</span></span><br><span class="line"><span class="keyword">const</span> Fight = <span class="comment">/*    */</span> <span class="number">0b100</span> <span class="comment">// 打豆豆</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Mode = <span class="comment">/*       */</span> <span class="number">0b000</span> <span class="comment">// 用户的初始状态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> eatAndSleep = Mode | Eat | Sleep <span class="comment">// 0b011</span></span><br><span class="line"><span class="keyword">let</span> emptyMode = Mode <span class="comment">// 0b000</span></span><br><span class="line"><span class="keyword">let</span> fightMode = Mode | Fight <span class="comment">// 0b100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检验是否吃饭</span></span><br><span class="line"><span class="built_in">console</span>.log(eatAndSleep &amp; Eat) <span class="comment">// 1 (0b001) -&gt; true</span></span><br><span class="line"><span class="built_in">console</span>.log(emptyMode &amp; Eat) <span class="comment">// 0 (0b000) -&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(fightMode &amp; Eat) <span class="comment">// 0 (0b000) -&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检验是否打豆豆</span></span><br><span class="line"><span class="built_in">console</span>.log(eatAndSleep &amp; Fight) <span class="comment">// 0 (0b000) -&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(emptyMode &amp; Fight) <span class="comment">// 0 (0b000) -&gt; false</span></span><br><span class="line"><span class="built_in">console</span>.log(fightMode &amp; Fight) <span class="comment">// 4 (0b100) -&gt; true</span></span><br></pre></td></tr></table></figure><h3 id="添加类型"><a href="#添加类型" class="headerlink" title="添加类型"></a>添加类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mode = Mode | Eat <span class="comment">// 增加吃饭的标记 0b001</span></span><br></pre></td></tr></table></figure><h3 id="是否有类型"><a href="#是否有类型" class="headerlink" title="是否有类型"></a>是否有类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hasEat = Mode &amp; Eat <span class="comment">// 结果0或者非0</span></span><br><span class="line"><span class="comment">// let hasEat = !!(Mode &amp; Eat) // 结果为true/false</span></span><br></pre></td></tr></table></figure><h3 id="去除类型"><a href="#去除类型" class="headerlink" title="去除类型"></a>去除类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mode = mode ^ Eat <span class="comment">// 去除睡觉的标记 0b000</span></span><br><span class="line"></span><br><span class="line">mode = mode &amp; ~(Eat) <span class="comment">// 去除睡觉的标记</span></span><br><span class="line">mode = mode &amp; ~(Eat | Sleep) <span class="comment">// 去除 睡觉，吃饭 的标记</span></span><br></pre></td></tr></table></figure><h3 id="更为通用的方法"><a href="#更为通用的方法" class="headerlink" title="更为通用的方法"></a>更为通用的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否存在当前的状态</span></span><br><span class="line"><span class="comment"> * @param  &#123;Number&#125;  currentMode 当前的状态</span></span><br><span class="line"><span class="comment"> * @param  &#123;Number&#125;  targetMode  目标状态</span></span><br><span class="line"><span class="comment"> * @return &#123;Boolean&#125;             是否存在</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasMode</span>(<span class="params">currentMode, targetMode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (currentMode &amp; targetMode) !== <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为当前状态码添加状态</span></span><br><span class="line"><span class="comment"> * @param  &#123;Number&#125;  currentMode 当前的状态</span></span><br><span class="line"><span class="comment"> * @param  &#123;Number&#125;  targetMode  目标状态</span></span><br><span class="line"><span class="comment"> * @return &#123;Number&#125;              新生成的状态吗</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMode</span>(<span class="params">currentMode, targetMode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> currentMode | targetMode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为当前状态码去除状态</span></span><br><span class="line"><span class="comment"> * @param  &#123;Number&#125;  currentMode 当前的状态</span></span><br><span class="line"><span class="comment"> * @param  &#123;Number&#125;  targetMode  目标状态</span></span><br><span class="line"><span class="comment"> * @return &#123;Number&#125;              新生成的状态吗</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeMode</span>(<span class="params">currentMode, targetMode</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// return currentMode &amp; ~targetMode // 也可使用</span></span><br><span class="line">  <span class="keyword">return</span> currentMode ^ targetMode <span class="comment">// 可使用 ^异或去除</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="使用封装的方法"><a href="#使用封装的方法" class="headerlink" title="使用封装的方法"></a>使用封装的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> eatMode = addMode(Mode, Eat)</span><br><span class="line"><span class="keyword">let</span> eatAndSleepMode = addMode(eatMode, Sleep)</span><br><span class="line"><span class="built_in">console</span>.log(hasMode(eatAndSleepMode, Eat)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sleepMode = removeMode(eatAndSleepMode, Eat)</span><br><span class="line"><span class="built_in">console</span>.log(hasMode(sleepMode, Eat)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="直接使用二进制操作"><a href="#直接使用二进制操作" class="headerlink" title="直接使用二进制操作"></a>直接使用二进制操作</h3><blockquote><p>React源码中大量使用到了位操作</p></blockquote><p><code>!!</code>操作可以直接转换为boolean值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> eatAndSleepMode = Mode | Eat | Sleep</span><br><span class="line"><span class="built_in">console</span>.log(!!(eatAndSleepMode &amp; Eat)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sleepMode = eatAndSleepMode &amp; ~Eat</span><br><span class="line"><span class="built_in">console</span>.log(!!(sleepMode &amp; Eat)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>有时React会直接操作当前mode</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">effectTag |= Ref <span class="comment">// 将Ref标识添加到effectTag中</span></span><br><span class="line"></span><br><span class="line">effectTag &amp;= ~Placement <span class="comment">// 将Placement状态从effectTag中去除</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深拷贝</title>
      <link href="/2020/04/14/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>/2020/04/14/%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="JS中的深拷贝"><a href="#JS中的深拷贝" class="headerlink" title="JS中的深拷贝"></a>JS中的深拷贝</h1><h2 id="最为简单的方式"><a href="#最为简单的方式" class="headerlink" title="最为简单的方式"></a>最为简单的方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br></pre></td></tr></table></figure><h2 id="使用递归，手写深拷贝"><a href="#使用递归，手写深拷贝" class="headerlink" title="使用递归，手写深拷贝"></a>使用递归，手写深拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> cloneTarget = <span class="built_in">Array</span>.isArray(target) ? [] : &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">      cloneTarget[key] = clone(target[key])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cloneTarget</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用map-防止循环引用自身的情况-重复引用情况"><a href="#使用map-防止循环引用自身的情况-重复引用情况" class="headerlink" title="使用map,防止循环引用自身的情况(重复引用情况)"></a>使用map,防止循环引用自身的情况(重复引用情况)</h2><blockquote><p>WeakMap,如果放入的对象其引用已经为null,则其中的元素会自动销毁，被垃圾回收器处理</p></blockquote><p>这里仅仅考虑最为普通的形式，即深层次递归的是一个数组或者是对象，<em>如果是函数function，则直接返回其引用即可，并没有什么深层次拷贝的意义</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span> (<span class="params">target, map = new WeakMap(</span>)) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> cloneTarget = <span class="built_in">Array</span>.isArray(target) ? [] : &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (map.get(target)) &#123;</span><br><span class="line">      <span class="keyword">return</span> map.get(target)</span><br><span class="line">    &#125;</span><br><span class="line">    map.set(target, cloneTarget)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">      cloneTarget[key] = clone(target[key], map)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cloneTarget</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="由于while循环速度较快，可以将for-in-循环改进成while循环"><a href="#由于while循环速度较快，可以将for-in-循环改进成while循环" class="headerlink" title="由于while循环速度较快，可以将for in 循环改进成while循环"></a>由于while循环速度较快，可以将<code>for in 循环改进成while循环</code></h2><blockquote><p>while循环效率 &gt; 普通for循环的效率 &gt; <code>for in</code>的效率</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach</span>(<span class="params">array, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">-1</span></span><br><span class="line">  <span class="keyword">const</span> length = array.length</span><br><span class="line">  <span class="keyword">while</span> (++index &lt; length) &#123;</span><br><span class="line">    callback.call(array[index], array[index], index)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="考虑多种数据类型"><a href="#考虑多种数据类型" class="headerlink" title="考虑多种数据类型"></a>考虑多种数据类型</h2><h3 id="重构判断基本类型"><a href="#重构判断基本类型" class="headerlink" title="重构判断基本类型"></a>重构判断基本类型</h3><blockquote><p>function直接当做基本类型，复制过去</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">typeof</span> obj</span><br><span class="line">  <span class="keyword">return</span> type !== <span class="literal">null</span> &amp;&amp; (type === <span class="string">'object'</span> || type === <span class="string">'function'</span> )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="克隆时，保证其原型对象挂载正常"><a href="#克隆时，保证其原型对象挂载正常" class="headerlink" title="克隆时，保证其原型对象挂载正常"></a>克隆时，保证其原型对象挂载正常</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInit</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Ctor = obj.constructor</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Ctor()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建多种类型，包括适合深拷贝"><a href="#构建多种类型，包括适合深拷贝" class="headerlink" title="构建多种类型，包括适合深拷贝"></a>构建多种类型，包括适合深拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 适合递归深拷贝的类型</span></span><br><span class="line"><span class="keyword">const</span> mapTag = <span class="string">'[object Map]'</span></span><br><span class="line"><span class="keyword">const</span> setTag = <span class="string">'[object Set]'</span></span><br><span class="line"><span class="keyword">const</span> arrayTag = <span class="string">'[object Array]'</span></span><br><span class="line"><span class="keyword">const</span> objectTag = <span class="string">'[object Object]'</span></span><br><span class="line"><span class="keyword">const</span> deepTag = [mapTag, setTag, arrayTag, objectTag]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其余重新拷贝的类型</span></span><br><span class="line"><span class="keyword">const</span> booleanTag = <span class="string">'[object Boolean]'</span></span><br><span class="line"><span class="keyword">const</span> dateTag = <span class="string">'[object Date]'</span></span><br><span class="line"><span class="keyword">const</span> errorTag = <span class="string">'[object Error]'</span></span><br><span class="line"><span class="keyword">const</span> numberTag = <span class="string">'[object Number]'</span></span><br><span class="line"><span class="keyword">const</span> regexpTag = <span class="string">'[object RegExp]'</span></span><br><span class="line"><span class="keyword">const</span> stringTag = <span class="string">'[object String]'</span></span><br><span class="line"><span class="keyword">const</span> symbolTag = <span class="string">'[object Symbol]'</span></span><br><span class="line"><span class="keyword">const</span> functionTag = <span class="string">'[object Function]'</span></span><br></pre></td></tr></table></figure><p>深度clone</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span> (<span class="params">target, map = new WeakMap(</span>)) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 克隆原始类型</span></span><br><span class="line">  <span class="keyword">if</span> (!isObject(target)) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="keyword">const</span> type = getType(target)</span><br><span class="line">  <span class="keyword">let</span> cloneTarget</span><br><span class="line">  <span class="keyword">if</span> (deepTag.includes(type)) &#123;</span><br><span class="line">    cloneTarget = getInit(target)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 防止循环引用</span></span><br><span class="line">  <span class="keyword">if</span> (map.get(target)) &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(target)</span><br><span class="line">  &#125;</span><br><span class="line">  map.set(target, cloneTarget)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 克隆set</span></span><br><span class="line">  <span class="keyword">if</span> (type === setTag) &#123;</span><br><span class="line">    target.foreach(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      cloneTarget.add(clone(value, map))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 克隆map</span></span><br><span class="line">  <span class="keyword">if</span> (type === mapTag) &#123;</span><br><span class="line">    target.foreach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      cloneTarget.set(key, clone(value, map))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 克隆数组</span></span><br><span class="line">  <span class="keyword">if</span> (type === arrayTag) &#123;</span><br><span class="line">    foreach(target, (value, index) =&gt; &#123;</span><br><span class="line">      <span class="comment">// [a, b, c] =&gt; 0:a 1:b 2:c 使用的是0,1,2</span></span><br><span class="line">      cloneTarget[index] = clone(target[index], map) </span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 克隆对象</span></span><br><span class="line">  <span class="keyword">if</span> (type === objectTag) &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(target)</span><br><span class="line">    foreach(keys, (key, index) =&gt; &#123;</span><br><span class="line">      <span class="comment">// ['name', 'age'] =&gt; 0: 'name', 1: 'age' 我们使用到的是name, age</span></span><br><span class="line">      cloneTarget[key] = clone(target[key], map)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="克隆函数的方式"><a href="#克隆函数的方式" class="headerlink" title="克隆函数的方式"></a>克隆函数的方式</h2><blockquote><p>函数可以直接引用地址，这里也可以使用正则匹配</p></blockquote><ul><li>箭头函数没有原型，可以直接使用<code>eval()</code>生成</li><li>普通函数有原型，需要使用<code>new Function(...params, functionBody)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneFunction</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> bodyReg = <span class="regexp">/(?&lt;=\&#123;)(.|\n)+(?=\&#125;)/m</span></span><br><span class="line">  <span class="keyword">const</span> paramsReg = <span class="regexp">/(?&lt;=\().+(?=\)\s+\&#123;)/</span></span><br><span class="line">  <span class="keyword">const</span> fnStr = fn.toString()</span><br><span class="line">  <span class="keyword">if</span> (fn.prototype) &#123;</span><br><span class="line">    <span class="comment">// 普通函数</span></span><br><span class="line">    <span class="keyword">const</span> body = bodyReg.exec(fnStr)</span><br><span class="line">    <span class="keyword">const</span> params = paramsReg.exec(fnStr)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无函数体</span></span><br><span class="line">    <span class="keyword">if</span> (!body) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参数</span></span><br><span class="line">    <span class="keyword">if</span> (!params) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(body[<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参数</span></span><br><span class="line">    <span class="keyword">const</span> paramsArr = params[<span class="number">0</span>].split(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(...paramsArr, body[<span class="number">0</span>])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 箭头函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(fnStr)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="克隆其他类型的方式"><a href="#克隆其他类型的方式" class="headerlink" title="克隆其他类型的方式"></a>克隆其他类型的方式</h2><p>除了<code>map, set, object, array</code>其余可以使用构造器，或者再生成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> type = getType(target)</span><br><span class="line"><span class="keyword">let</span> cloneTarget</span><br><span class="line"><span class="keyword">if</span> (deepTag.includes(type)) &#123;</span><br><span class="line">  cloneTarget = getInit(target)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> cloneOtherType(target, type)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 克隆其他类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneOtherType</span> (<span class="params">target, type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Ctor = target.constructor</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> booleanTag:</span><br><span class="line">    <span class="keyword">case</span> numberTag:</span><br><span class="line">    <span class="keyword">case</span> stringTag:</span><br><span class="line">    <span class="keyword">case</span> dateTag:</span><br><span class="line">    <span class="keyword">case</span> errorTag:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Ctor(target)</span><br><span class="line">    <span class="keyword">case</span> functionTag:</span><br><span class="line">      <span class="keyword">return</span> cloneFunction(target)</span><br><span class="line">    <span class="keyword">case</span> symbolTag:</span><br><span class="line">      <span class="keyword">return</span> cloneSymbol(target)</span><br><span class="line">    <span class="keyword">case</span> regexpTag:</span><br><span class="line">      <span class="keyword">return</span> cloneRegExp(target)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 克隆Symbol</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneSymbol</span> (<span class="params">symbol</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>(<span class="built_in">Symbol</span>.prototype.valueOf.call(symbol))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 克隆正则</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneRegExp</span> (<span class="params">regExp</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// const flagReg = /[i|m|g]*$/g</span></span><br><span class="line">  <span class="keyword">const</span> flagReg = <span class="regexp">/\w*$/g</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="built_in">RegExp</span>(regExp.source, flagReg.exec(regExp))</span><br><span class="line">  result.lastIndex = regExp.lastIndex</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>基本数据类型在栈中存储，一旦创建则不可改变；存储在堆中的引用类型则需要深拷贝。</p></blockquote><p>深拷贝时，要考虑三种类型的拷贝，基本数据类型，通过递归操作的引用类型，通过创建实例的其他引用类型</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>首先JS中的基本数据类型有,<code>null undefined boolean number string symbol object</code></p><p>要判断是基本数据类型还是引用类型，需要使用<code>typeof</code> 可区分</p><ul><li><code>typeof</code>会将<code>function</code>类型单独区分出来，其实是属于<code>object</code>类型中的</li><li><code>typeof null === &#39;object&#39;</code>这是早期js设计的bug,后来考虑到兼容性的问题，就没有在进行修复</li></ul><p>因为function类型并没有实际拷贝的需要，<code>lodash</code>中也是直接返回的</p><p>所以创建出一个判断是否是Object类型的方法，核心使用typeof进行判断，如果不是<code>object</code>类型(<code>function</code>类型也直接被返回了)，直接返回该值</p><h2 id="通过递归操作的引用类型"><a href="#通过递归操作的引用类型" class="headerlink" title="通过递归操作的引用类型"></a>通过递归操作的引用类型</h2><p>其次判断类型应该使用<code>Object.prototype.toString.call(target)</code>来判断，分为两类</p><ul><li>需要进行递归操作拷贝的类型<code>map, set, object, array</code><em>暂不考虑<code>WeakMap</code>, <code>WeakSet</code></em></li><li>另一类包括基本类型的一些包装类型<code>Number, Boolean, String</code>, 还有其他类型<code>Date, Symbol, RegExp</code></li></ul><p>需要深拷贝的类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> Ctor = target.constructor</span><br><span class="line"><span class="keyword">let</span> cloneTarget = <span class="keyword">new</span> Ctor()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 克隆set</span></span><br><span class="line">  <span class="keyword">if</span> (type === setTag) &#123;</span><br><span class="line">    target.foreach(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      cloneTarget.add(clone(value, map))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 克隆map</span></span><br><span class="line">  <span class="keyword">if</span> (type === mapTag) &#123;</span><br><span class="line">    target.foreach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      cloneTarget.set(key, clone(value, map))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 克隆数组</span></span><br><span class="line">  <span class="keyword">if</span> (type === arrayTag) &#123;</span><br><span class="line">    foreach(target, (value, index) =&gt; &#123;</span><br><span class="line">      <span class="comment">// [a, b, c] =&gt; 0:a 1:b 2:c 使用的是0,1,2</span></span><br><span class="line">      cloneTarget[index] = clone(target[index], map) </span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 克隆对象</span></span><br><span class="line">  <span class="keyword">if</span> (type === objectTag) &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(target)</span><br><span class="line">    foreach(keys, (key, index) =&gt; &#123;</span><br><span class="line">      <span class="comment">// ['name', 'age'] =&gt; 0: 'name', 1: 'age' 我们使用到的是name, age</span></span><br><span class="line">      cloneTarget[key] = clone(target[key], map)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="其他类型-通过创建实例的其他引用类型"><a href="#其他类型-通过创建实例的其他引用类型" class="headerlink" title="其他类型 通过创建实例的其他引用类型"></a>其他类型 通过创建实例的其他引用类型</h2><p>其他类型，包装类型，以及一些简单的类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Ctor = target.constructor</span><br><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line">  <span class="keyword">case</span> booleanTag:</span><br><span class="line">  <span class="keyword">case</span> numberTag:</span><br><span class="line">  <span class="keyword">case</span> stringTag:</span><br><span class="line">  <span class="keyword">case</span> dateTag:</span><br><span class="line">  <span class="keyword">case</span> errorTag:</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Ctor(target)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他类型 <code>Symbol</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>)</span><br><span class="line"><span class="comment">// const s2 = Symbol.prototype.valueOf.call(s1) // s1 === s2</span></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="built_in">Object</span>(<span class="built_in">Symbol</span>.prototype.valueOf.call(s1)) <span class="comment">// s1 !== s2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneSymbol</span>(<span class="params">symbol</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>(<span class="built_in">Symbol</span>.prototype.valueOf.call(symbol))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他类型 <code>RegExp</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneRegExp</span>(<span class="params">regExp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> flagReg = <span class="regexp">/\w*$/</span> <span class="comment">// 匹配结尾的模式修饰符img</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="built_in">RegExp</span>(regExp.source, flagReg.exec(regExp)) <span class="comment">// 重新创建示例</span></span><br><span class="line">  result.lastIndex = regExp.lastIndex <span class="comment">// 修正lastIndex</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他类型 <code>function</code></p><p><code>function</code>类型可以直接返回，但是这里也做出实现</p><ul><li>箭头函数没有原型，可以用<code>eval</code>直接返回</li><li>普通函数有原型，可以使用<code>new Function(...params, functionBody)</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneFunction</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> bodyReg = <span class="regexp">/(?&gt;=\&#123;)(.|\n)+(?=\&#125;)/m</span></span><br><span class="line">  <span class="keyword">const</span> paramsReg = <span class="regexp">/(?&gt;=\().+(?=\)\s+\&#123;)/</span></span><br><span class="line">  <span class="keyword">const</span> fnStr = fn.toString()</span><br><span class="line">  <span class="keyword">if</span> (fn.prototype) &#123;</span><br><span class="line">    <span class="comment">// 普通函数</span></span><br><span class="line">    <span class="keyword">const</span> body = bodyReg.exec(fnStr)</span><br><span class="line">    <span class="keyword">const</span> params = paramsReg.exec(fnStr)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无函数体</span></span><br><span class="line">    <span class="keyword">if</span> (!body) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参数</span></span><br><span class="line">    <span class="keyword">if</span> (!params) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(body[<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参数</span></span><br><span class="line">    <span class="keyword">const</span> paramsArr = params[<span class="number">0</span>].split(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(...paramsArr, body[<span class="number">0</span>])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 箭头函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(fnStr)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理循环引用"><a href="#处理循环引用" class="headerlink" title="处理循环引用"></a>处理循环引用</h2><p><code>WeakMap</code>,若key对应不在有引用，则下一次<code>GC</code>会对其引用回收，避免内存泄漏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 恰饭 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>win10优化</title>
      <link href="/2020/04/10/win10%E4%BC%98%E5%8C%96/"/>
      <url>/2020/04/10/win10%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="关闭应用商店中的后台应用"><a href="#关闭应用商店中的后台应用" class="headerlink" title="关闭应用商店中的后台应用"></a>关闭应用商店中的后台应用</h2><p>设置中搜索-后台应用，或者再隐私中找到后台关闭不需要的应用</p><h2 id="关闭不需要的通知"><a href="#关闭不需要的通知" class="headerlink" title="关闭不需要的通知"></a>关闭不需要的通知</h2><p>设置中搜索-通知，关闭不需要的通知提醒</p><h2 id="关闭动画"><a href="#关闭动画" class="headerlink" title="关闭动画"></a>关闭动画</h2><p>设置中搜索-轻松使用，关闭不需要的动画和过渡效果</p><h2 id="关闭平板模式"><a href="#关闭平板模式" class="headerlink" title="关闭平板模式"></a>关闭平板模式</h2><p>设置中搜索-平板模式，始终使用桌面模式，不询问我，不切换</p><h2 id="关闭不需要启动项"><a href="#关闭不需要启动项" class="headerlink" title="关闭不需要启动项"></a>关闭不需要启动项</h2><p>任务管理器中，选择启动之后关闭不需要的启动项</p><h2 id="开启卓越性能模式（噪声大，可选）"><a href="#开启卓越性能模式（噪声大，可选）" class="headerlink" title="开启卓越性能模式（噪声大，可选）"></a>开启卓越性能模式（噪声大，可选）</h2><p>设置中，搜索电池，选择电源计划，选择卓越性能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># powershell中，输入此代码，获取卓越性能模式</span></span><br><span class="line">powercfg -duplicatescheme e9a42b02-d5df-448d-aa00-03f14749eb61</span><br></pre></td></tr></table></figure><h2 id="禁用服务（视情况）"><a href="#禁用服务（视情况）" class="headerlink" title="禁用服务（视情况）"></a>禁用服务（视情况）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用win+R</span></span><br><span class="line">services.msc</span><br></pre></td></tr></table></figure><ul><li><code>Connected User Experiences and Telemetry</code> 上传可关闭</li><li><code>Windows Search</code> 可关闭</li></ul><h2 id="分析电脑安装的驱动"><a href="#分析电脑安装的驱动" class="headerlink" title="分析电脑安装的驱动"></a>分析电脑安装的驱动</h2><p>使用<a href="https://github.com/lostindark/DriverStoreExplorer" target="_blank" rel="noopener"><code>driverstore</code></a>进行分析电脑驱动，删除同命名的驱动，将旧的删除即可</p><blockquote><p>如果你选择了错误的驱动，如果不勾选强制删除，是没有问题的,不会删除掉正在使用的驱动</p></blockquote><h2 id="分析电脑磁盘中安装的大小"><a href="#分析电脑磁盘中安装的大小" class="headerlink" title="分析电脑磁盘中安装的大小"></a>分析电脑磁盘中安装的大小</h2><p>使用<a href="https://spacesniffer.en.softonic.com/" target="_blank" rel="noopener"><code>sspacesniffer</code></a>分析电脑中各盘所占的大小，自己去寻找占用较大的文件进行处理</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git回顾</title>
      <link href="/2020/04/05/git%E5%9B%9E%E9%A1%BE/"/>
      <url>/2020/04/05/git%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<p>Git是一种分布式代码管理的方式，相比传统的SVN相比，其速度更快（每个提交都是存储的完整快照，而不是项目补丁），性能更好（使用极致的压缩算法，使得存储占用很少）</p><h2 id="分布式VS集中式"><a href="#分布式VS集中式" class="headerlink" title="分布式VS集中式"></a>分布式VS集中式</h2><p>在早前，都是用集中式（SVN）代码管理的方式，即使用一台中心服务器作为代码管理，大家都从上面拉代码，然后提交代码，但是一旦此中心服务器发生问题，则可能会丢失代码（如果要恢复，至少有一个人保存过项目的所有完整快照）并且此服务器如果发生问题后，写的代码都是不保险的，因为没有本地的代码永远是那一份，不存在版本，如果错了，只能回退到服务器发生故障之前的代码。</p><p>分布式（Git）代码管理的方式，很好的解决了上面的问题，每个人的客户端都可以作为一个项目管理仓库，并且在本地也可以做版本控制，此时公司里可以找一台服务器当做一个特殊的客户端，当然如果它坏了，只是一个客户端坏了，所有人那边都是有代码的，不会造成太大的损失</p><p>根据他们的存储方式而言，分布式代码的管理方式要比集中式代码的管理方式，存储的内容多很多，因为每个人都要存完整的项目历史，<strong>但是，由于Git团队的极致优化压缩，所占用的存储空间并不是很大，相比SVN大那么一点点点</strong></p><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p>git其实本质是一个数据库，将各个文件，进行压缩后，得到一串hash值，保存到<code>.git</code>（通常隐藏目录）目录中，通过Git对象，Tree对象，Commit对象来对整个项目进行管理。</p><h3 id="Git对象"><a href="#Git对象" class="headerlink" title="Git对象"></a>Git对象</h3><p>一个文件存储到Git中时，就是一个Git对象，如果该文件发生了改变，那么存储过后，会生成一个新的Git对象。</p><p>只能存储Git对象的内容，并不能存储文件名称。</p><h3 id="Tree对象"><a href="#Tree对象" class="headerlink" title="Tree对象"></a>Tree对象</h3><p>多个修改好的文件，可以放到同一个提交树上，并且可以指定对象的Git对象的Hash值所对应的文件名称，等于一次存储了该项目的所有文件。</p><p><em>一个树对象至少有两个Git对象，一个是文件对象对应的Git对象，一个是此树对象对应的Git对象</em>。</p><h3 id="Commit对象"><a href="#Commit对象" class="headerlink" title="Commit对象"></a>Commit对象</h3><p>等于对整个项目快照进行了一次包裹，也就是包裹了一个tree对象，并且增加了其中提交备注，提交人，邮箱，时间等，并且可以指定他的父提交对象，也就是慢慢形成了一颗Commit树。</p><p>一个提交对象对应的是一个项目的版本，而其中包裹的树对象才是一个项目的快照。</p><h2 id="高级指令"><a href="#高级指令" class="headerlink" title="高级指令"></a>高级指令</h2><h3 id="git-init-初始化项目"><a href="#git-init-初始化项目" class="headerlink" title="git init 初始化项目"></a><code>git init</code> 初始化项目</h3><h3 id="git-add-添加文件到暂存区"><a href="#git-add-添加文件到暂存区" class="headerlink" title="git add ./ 添加文件到暂存区"></a><code>git add ./</code> 添加文件到暂存区</h3><blockquote><p><code>git hash-object -w</code>, <code>git update-index ...</code></p></blockquote><p>先将所有修改的文件生成Git对象，之后将其存入暂存区中</p><p>表面上是：工作区-暂存区，其实是：工作区-版本库-暂存区</p><h3 id="git-commit-m-quot-quot-创建一次提交"><a href="#git-commit-m-quot-quot-创建一次提交" class="headerlink" title="git commit -m &quot;.....&quot; 创建一次提交"></a><code>git commit -m &quot;.....&quot;</code> 创建一次提交</h3><blockquote><p><code>git write-tree</code>, <code>git commit-tree</code></p></blockquote><p>先将暂存区中的内容生成一个树对象，放入版本库中，在将这个树对象包裹成一个提交对象，存储版本库中</p><h3 id="git-status-查看文件的状态"><a href="#git-status-查看文件的状态" class="headerlink" title="git status 查看文件的状态"></a><code>git status</code> 查看文件的状态</h3><p>已暂存，已修改，已提交</p><h3 id="git-commit-提交修改"><a href="#git-commit-提交修改" class="headerlink" title="git commit 提交修改"></a><code>git commit</code> 提交修改</h3><ul><li><code>git commit</code> 直接提交当前缓存区的文件，进入Vim编辑器编写提交注释</li><li><code>git commit -m &quot;这里是注释信息&quot;</code> 直接提交当前缓存区的文件，跳过Vim编辑器</li><li><code>git commit -a</code> 直接提交当前所有追踪文件，跳过存入暂存区，直接提交</li></ul><h3 id="git-diff-查看文件修改状况"><a href="#git-diff-查看文件修改状况" class="headerlink" title="git diff 查看文件修改状况"></a><code>git diff</code> 查看文件修改状况</h3><ul><li><code>git diff --staged</code> 查看暂存区中的文件改变情况</li></ul><h3 id="git-log-查看git提交历史记录"><a href="#git-log-查看git提交历史记录" class="headerlink" title="git log 查看git提交历史记录"></a><code>git log</code> 查看git提交历史记录</h3><ul><li><code>git log</code> 查看完整的git提交记录</li><li><code>git log --oneline  /  git log --pretty=oneline</code> 查看git历史一行</li></ul><h3 id="删除-重命名"><a href="#删除-重命名" class="headerlink" title="删除/重命名"></a>删除/重命名</h3><ul><li><code>git rm xxx</code> 直接删除文件，只需要<code>git commit</code>，相当于工作目录删除，并且追踪</li><li><code>git mv xxx yyy</code> 直接重命名，只需要<code>git commit</code>，相当于工作目录重命名，增加删除追踪和新增追踪，并且合并到rename</li></ul><h2 id="分支指令"><a href="#分支指令" class="headerlink" title="分支指令"></a>分支指令</h2><p>git的分支相比其他而言来说，较为快速，也是让其脱颖而出的功能</p><p>分支本质就是一个提交对象，Head默认指向master,切换分支就是让Head指向不同的分支，当发生提交时，本质上就Head带着分支走</p><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a><code>git branch</code></h3><ul><li><code>git branch</code> 显示当前的分支列表</li><li><code>git branch xxx</code> 创建xxx分支</li><li><code>git branch xxx &lt;commitHash&gt;</code> 在指定的提交上创建分支</li><li><code>git branch -d xxx</code> 删除分支, 要求不能自家删自己，要到别的分支来删除<ul><li><code>git branch -D xxx</code> 大D，强制删除</li></ul></li><li><code>git branch -v</code> 查看branch版本</li><li><code>git branch -r</code> 查看远端的分支版本</li></ul><h3 id="git-checkout-xxx-检出分支"><a href="#git-checkout-xxx-检出分支" class="headerlink" title="git checkout xxx 检出分支"></a><code>git checkout xxx</code> 检出分支</h3><ul><li><code>git checkout -b xxx</code> 创建一个新的分支并切换过去</li></ul><h3 id="git-merge-xxx-合并分支"><a href="#git-merge-xxx-合并分支" class="headerlink" title="git merge xxx 合并分支"></a><code>git merge xxx</code> 合并分支</h3><p>当前的分支，会将xxx分支合并过来</p><ul><li><code>git reset --hard &lt;branchName&gt;</code> 使用分支强制合并</li><li>如果是克隆下来的分支，默认没有关联关系，需要手动合并跟踪分支，或者与本地创建关联</li></ul><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><h3 id="工作区，暂存区，版本库回退回退"><a href="#工作区，暂存区，版本库回退回退" class="headerlink" title="工作区，暂存区，版本库回退回退"></a>工作区，暂存区，版本库回退回退</h3><ul><li><code>git checkout --filename</code> 撤销工作区的内容</li><li><code>git reset HEAD filename</code> 撤销暂存区的内容</li><li><code>git reset HEAD~</code> 返回上一次提交，版本库的内容<ul><li><code>git reset HEAD~2</code> 返回上2次提交</li><li><code>git reset &lt;commitHash&gt;</code> 返回到提交对象上</li><li><code>git reset --soft</code> 仅是HEAD移动过去<ul><li>修改HEAD指向</li></ul></li><li><code>git reset --mixed</code>默认情况，等于<code>git reset</code>，将HEAD移动过去，并且将未修改的文件全部放入工作目录<ul><li>修改HEAD</li><li>修改暂存区的内容</li></ul></li><li><code>git reset --hard</code>（该操作是有破坏性的），直接回到那个状态<ul><li>修改HEAD</li><li>修改暂存区的内容</li><li>修改工作目录的内容的内容</li></ul></li></ul></li></ul><p><code>git reset</code>本质上还是回到分支上，并没有真正的回退，只是HEAD带着分支返回到了指定的位置，当使用<code>git reflog</code>还可以查看到，当前的分支</p><p>尽量少使用<code>reset --hard</code>，应该多开分支，之后进行merge, <code>git branch bugfix &lt;commitHash&gt;</code> 之后切换过去，并且进行merge。</p><p><code>git checkout &lt;commitHash&gt;</code>和<code>git reset --hard &lt;commitHash&gt;</code>的区别</p><ul><li><code>checkout</code> 仅是牵着HEAD走，而<code>reset --hard</code>是牵着HEAD，并且牵着分支走</li><li><code>checkout</code> 不会破坏工作区文件，而<code>reset --hard</code>会破坏工作区的文件</li></ul><h3 id="查看版本记录"><a href="#查看版本记录" class="headerlink" title="查看版本记录"></a>查看版本记录</h3><ul><li><code>git log --oneline</code> 只会查看当前HEAD所在分支的链</li><li><code>git reflog --oneline</code> 会查看git的所有操作记录</li><li><code>git log --graph --decorate --all --oneline</code> 查看当前git树状况</li></ul><h2 id="远程协作"><a href="#远程协作" class="headerlink" title="远程协作"></a>远程协作</h2><p>本地分支-远程跟踪分支-远程分支</p><ul><li>本地分支：本地代码库的分支</li><li>远程分支：远程仓库的分支</li><li>远程跟踪分支：代码被pull时自动创建，他会跟随远端自己向前，需要根据使用本地分支来合并远程跟踪分支以达到效果。</li></ul><p>在本地创建的代码，推送到远端。本地分支推送后，会生成远程跟踪分支。</p><h3 id="创建远端"><a href="#创建远端" class="headerlink" title="创建远端"></a>创建远端</h3><ul><li><code>git remote -v</code> 查看当前关联的远程分支</li><li><code>git remote add &lt;storageName&gt; &lt;sotrageURL&gt;</code> 增加仓库</li><li><code>git remote rm &lt;storageName&gt;</code> 删除仓库</li><li><code>git remote rename &lt;oldName&gt; &lt;newName&gt;</code> 重命名仓库名称</li></ul><h3 id="远程推拉（无关联关系·不推荐）"><a href="#远程推拉（无关联关系·不推荐）" class="headerlink" title="远程推拉（无关联关系·不推荐）"></a>远程推拉（无关联关系·不推荐）</h3><p><code>git push &lt;origin&gt; &lt;branchName&gt;</code> 推送代码</p><p><code>git fetch &lt;origin&gt;</code> 拉取代码<br>之后切换到远程跟踪分支<code>git checkout &lt;origin&gt;/&lt;branchName&gt;</code>,之后查看当前状态(如果确定安全，也可不查询状态)<br>如果没有问题的话，可以直接合并分支，<code>git merge &lt;origin&gt;/&lt;branchName&gt;</code></p><h3 id="删除远程跟踪分支"><a href="#删除远程跟踪分支" class="headerlink" title="删除远程跟踪分支"></a>删除远程跟踪分支</h3><ol start="0"><li><code>git push &lt;origin&gt; --delete &lt;branchName&gt;</code> 删除远程分支</li><li><code>git remote prune &lt;origin&gt; --dry-run</code> 列出远程分支已经无用，但是远程跟踪分支任存在</li><li><code>git remote prune &lt;origin&gt;</code> 删除上述列出的远程跟踪</li></ol><h3 id="远程推拉（有关联关系·推荐）"><a href="#远程推拉（有关联关系·推荐）" class="headerlink" title="远程推拉（有关联关系·推荐）"></a>远程推拉（有关联关系·推荐）</h3><blockquote><p>默认情况下 clone下来的库，其master分支与远端的master分支是有关联的，但是和本地创建的库master分支与远端master无关联</p></blockquote><h4 id="创建远端关联"><a href="#创建远端关联" class="headerlink" title="创建远端关联"></a>创建远端关联</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 远程创建一个分支</span></span><br><span class="line">git push --<span class="built_in">set</span>-upstream &lt;origin&gt; &lt;localBranch&gt;:&lt;originBranch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建跟踪分支关联</span></span><br><span class="line">git checkout -b 本地分支 远程跟踪分支</span><br><span class="line"></span><br><span class="line">git checkout --track 远程跟踪分支 <span class="comment">#（本地，远程跟踪分支名称相同）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 已有的分支进行关联</span></span><br><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/<span class="built_in">test</span></span><br><span class="line">git branch -u origin/<span class="built_in">test</span> <span class="comment">#（简写）</span></span><br></pre></td></tr></table></figure><h4 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h4><p>在当前分之下，<code>git pull</code></p><h4 id="推送代码"><a href="#推送代码" class="headerlink" title="推送代码"></a>推送代码</h4><p>在当前分支下，<code>git push</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>箭头函数的this指向</title>
      <link href="/2020/03/23/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84this%E6%8C%87%E5%90%91/"/>
      <url>/2020/03/23/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84this%E6%8C%87%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h2 id="this确定机制"><a href="#this确定机制" class="headerlink" title="this确定机制"></a>this确定机制</h2><blockquote><p>js中函数会建立一个作用域，<em>如果是类其内部也是函数，也即创造了作用域</em>会从当前作用域中寻找this</p></blockquote><h3 id="传统函数的this是运行时确定的"><a href="#传统函数的this是运行时确定的" class="headerlink" title="传统函数的this是运行时确定的"></a>传统函数的this是运行时确定的</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">id</span>: <span class="number">666</span> &#125;</span><br><span class="line">obj.foo = foo</span><br><span class="line">obj.foo() <span class="comment">// 输出undefined</span></span><br></pre></td></tr></table></figure><p>因为在事件循环中，timeout之后，由window调用了该函数,即运行时该this为window</p><h3 id="箭头函数的this是定义时确定的"><a href="#箭头函数的this是定义时确定的" class="headerlink" title="箭头函数的this是定义时确定的"></a>箭头函数的this是定义时确定的</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">id</span>: <span class="number">666</span> &#125;</span><br><span class="line">obj.foo = foo</span><br><span class="line">obj.foo() <span class="comment">// 输出666</span></span><br></pre></td></tr></table></figure><p>在函数被定义的时候，就确定了该调用者为obj</p><h2 id="箭头函数会依次向上寻找作用域中的this"><a href="#箭头函数会依次向上寻找作用域中的this" class="headerlink" title="箭头函数会依次向上寻找作用域中的this"></a>箭头函数会依次向上寻找作用域中的this</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'id:'</span>, <span class="keyword">this</span>.id);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = foo.call(&#123;<span class="attr">id</span>: <span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t1 = f.call(&#123;<span class="attr">id</span>: <span class="number">2</span>&#125;)()(); <span class="comment">// id: 1</span></span><br><span class="line"><span class="keyword">var</span> t2 = f().call(&#123;<span class="attr">id</span>: <span class="number">3</span>&#125;)(); <span class="comment">// id: 1</span></span><br><span class="line"><span class="keyword">var</span> t3 = f()().call(&#123;<span class="attr">id</span>: <span class="number">4</span>&#125;); <span class="comment">// id: 1</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数仅是固化了this，在其函数内部并没有this实例"><a href="#箭头函数仅是固化了this，在其函数内部并没有this实例" class="headerlink" title="箭头函数仅是固化了this，在其函数内部并没有this实例"></a>箭头函数仅是固化了this，在其函数内部并没有this实例</h2><p>由于箭头函数内并没有this，所以并不能使用bind,call,apply方法来再次确定this指向</p><h2 id="类中的this指向"><a href="#类中的this指向" class="headerlink" title="类中的this指向"></a>类中的this指向</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span> = <span class="string">'zhn'</span></span><br><span class="line"></span><br><span class="line">  hello() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;this.name&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  study = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`study <span class="subst">$&#123;this.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  bye = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="keyword">this</span>: Person</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`bye <span class="subst">$&#123;this.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person()</span><br><span class="line">p.hello() <span class="comment">// hello zhn</span></span><br><span class="line">p.study() <span class="comment">// study zhn</span></span><br><span class="line">p.bye() <span class="comment">// bye zhn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy: <span class="built_in">any</span> = &#123; name: <span class="number">666</span> &#125;</span><br><span class="line">p.hello.call(proxy) <span class="comment">// hello 666</span></span><br><span class="line">p.study.call(proxy) <span class="comment">// study zhn 已经固化了this</span></span><br><span class="line">p.bye.call(proxy) <span class="comment">// bye 666</span></span><br></pre></td></tr></table></figure><p>其中hello方法，作为其方法，会挂载到原型上，所以this，即实例对象</p><p>其中study方法，作为一个成员，实例属性，(为其挂载了初始化值)，由于是箭头函数，无法修改this指向（为当前绑定的环境）</p><p>其中bye方法，作为一个成员，实例属性，(为其挂载了初始化值)，由于是普通函数，可以修改this指向，默认运行时的调用者为person实例</p><h2 id="字面量中的this指向"><a href="#字面量中的this指向" class="headerlink" title="字面量中的this指向"></a>字面量中的this指向</h2><p>字面量中定义函数的方法</p><ul><li>使用属性值定义<code>study: function () {},</code></li><li>使用短属性的方式，和上述一样<code>study() {},</code></li><li>使用箭头函数，<strong>注意无法直接获取this</strong> <code>study: () =&gt; {}</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj: <span class="built_in">any</span> = &#123;</span><br><span class="line">  name: <span class="string">'obj'</span>,</span><br><span class="line">  study: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`study <span class="subst">$&#123;this.name&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  hello() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;this.name&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  eat: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(`eat $&#123;this.name&#125;`);</span></span><br><span class="line">  &#125;,</span><br><span class="line">  designFn() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`designFn <span class="subst">$&#123;this.name&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.study.call(&#123; name: <span class="string">'666'</span> &#125;) <span class="comment">// 输出 study 666</span></span><br><span class="line">obj.hello.call(&#123; name: <span class="string">'666'</span> &#125;) <span class="comment">// 输出 hello 666</span></span><br><span class="line">obj.eat.call(&#123; name: <span class="string">'666'</span> &#125;) <span class="comment">// 由于箭头函数中直接使用this,ts会报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = obj.designFn.call(&#123; name: <span class="string">'666'</span> &#125;) <span class="comment">// 箭头函数向上绑定了一层上下文</span></span><br><span class="line">fn() <span class="comment">// 输出designFn 666</span></span><br></pre></td></tr></table></figure><p>ts中使用this</p><p>在ts中，对象属性里使用this时，默认会为一个any类型的对象，可以自己申明该对象类型，之后将this带入</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Obj &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj: Obj = &#123;</span><br><span class="line">  name: <span class="string">'z'</span>,</span><br><span class="line">  fn(<span class="keyword">this</span>: Obj) &#123;</span><br><span class="line">    <span class="comment">// this.name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>箭头函数中，this是void类型，不可改变，不能显示申明</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function">(<span class="params"><span class="keyword">this</span>: <span class="built_in">void</span></span>) =&gt;</span> &#123;&#125; <span class="comment">// Error Arrow function can not have 'this'</span></span><br></pre></td></tr></table></figure><p>在函数的接口申明中，可以申明出this</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Obj &#123;</span><br><span class="line">  fn: <span class="function">(<span class="params"><span class="keyword">this</span>: <span class="built_in">void</span></span>) =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o1: Obj = &#123;</span><br><span class="line">  fn: <span class="function"><span class="params">()</span> =&gt;</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o2: Obj = &#123;</span><br><span class="line">  fn(<span class="keyword">this</span>: <span class="built_in">void</span>) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>event对象的几种定位</title>
      <link href="/2020/03/12/event%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9A%E4%BD%8D/"/>
      <url>/2020/03/12/event%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>系列均有x,y等两个方向的值</p></blockquote><h2 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h2><p>距离其父元素的左侧内部边框的距离,<em>如果边框较宽，点在边框上为负值，因为是到边框内侧距离</em></p><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><p>其距离浏览器左侧的距离</p><h2 id="page"><a href="#page" class="headerlink" title="page"></a>page</h2><p>其距离当前页面的边框距离（client+页面滚动的距离）</p><h2 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h2><p>其距离当前显示器的边框距离</p><p><img src="/img/2020/03/12/event.jpg" alt="event的各距离图示"><br><em>图片来源,<a href="https://www.cnblogs.com/jiangxiaobo/p/6593584.html" target="_blank" rel="noopener">博客园</a></em></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DOM对象各定位值</title>
      <link href="/2020/03/12/DOM%E5%AF%B9%E8%B1%A1%E5%90%84%E5%AE%9A%E4%BD%8D%E5%80%BC/"/>
      <url>/2020/03/12/DOM%E5%AF%B9%E8%B1%A1%E5%90%84%E5%AE%9A%E4%BD%8D%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在使用盒模型的时候，这里默认使用的是<code>box-sizing: content-box;</code>也是经典的盒模型，如果采用的为<code>box-sizing: border-box;</code>会略有不同</p></blockquote><h2 id="offset系列"><a href="#offset系列" class="headerlink" title="offset系列"></a>offset系列</h2><p>offset表示的为距离父<strong>定位</strong>元素的偏移值，如果其父元素没有定位元素，则会较与文档最外层比较</p><ul><li>offsetTop 其boder的上部外侧与父元素border下部内侧之间的距离,有点像margin-top</li><li>offsetLeft 其border的左侧外部与父元素border右侧之间的距离,有点像margin-left</li><li>offsetWidth 其元素的宽度，包括左右两侧的border宽度</li><li>offsetHeight 其元素的高度，包括上下两侧的border宽度</li></ul><h2 id="scroll系列"><a href="#scroll系列" class="headerlink" title="scroll系列"></a>scroll系列</h2><p>scroll表示卷曲相关,一般是用其父元素的位置,一般在内容超出父元素的位置时，才会予以显示，一父元素为基准，要设置父元素<code>overflow: auto;</code></p><ul><li>scrollTop  其内部元素卷曲向上出去的距离（看不见的距离）,其border上边距外侧开始，计算到父元素内容区</li><li>scrollLeft 其内部元素卷曲左上出去的距离（看不见的距离）,其border左边距外侧开始，计算到父元素内容区</li><li>scrollWidth 表示总共可以卷曲的宽度，（其子元素左右外侧边框开始计算）</li><li>scrollHeight 表示总共可以卷曲的高度，（其子元素上下外侧边距开始计算）</li></ul><h2 id="client系列"><a href="#client系列" class="headerlink" title="client系列"></a>client系列</h2><p>client表示该元素自身，就是内容区域</p><ul><li>clientTop 其内部距离顶部border顶部外测的距离，相当于border的宽度</li><li>clientLeft 其内部距离border左侧外侧的距离，相当于border的宽度</li><li>clientWidth 其内部左右两侧border内侧的距离，相当于不带border的宽度</li><li>clientHeight 其内部上下两侧border内侧的距离，相当于不带border的宽度</li></ul><h2 id="currentStyle和getComputedStyle"><a href="#currentStyle和getComputedStyle" class="headerlink" title="currentStyle和getComputedStyle"></a>currentStyle和getComputedStyle</h2><p>由于<code>element.style</code>的方式仅能获取行间样式，所以要获取更多的样式，可以通过以下的方式</p><blockquote><p>只能进行获取，不可进行修改</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="built_in">document</span>.getElementById(<span class="string">'#xx'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// IE中</span></span><br><span class="line">element.currentStyle[<span class="string">'color'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非IE中(高级IE也支持)</span></span><br><span class="line"><span class="built_in">window</span>.getComputedStyle(element, <span class="literal">null</span>)[<span class="string">'color'</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>创建ssh连接</title>
      <link href="/2020/03/11/%E4%BD%BF%E7%94%A8ssh%E8%BF%9B%E8%A1%8C%E6%8E%A8%E9%80%81/"/>
      <url>/2020/03/11/%E4%BD%BF%E7%94%A8ssh%E8%BF%9B%E8%A1%8C%E6%8E%A8%E9%80%81/</url>
      
        <content type="html"><![CDATA[<p>使用hexo等进行git推送的时候，推送时都需要我们输入账户密码，较为繁琐，这里使用ssh的方式可以较好的解决</p><h2 id="生成ssh"><a href="#生成ssh" class="headerlink" title="生成ssh"></a>生成ssh</h2><h3 id="设置git的user与email"><a href="#设置git的user与email" class="headerlink" title="设置git的user与email"></a>设置git的user与email</h3><p>如果第一次使用，需要设置git的账户和邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"xxx"</span></span><br><span class="line">git config --global user.email <span class="string">"xxxx@xx.com"</span></span><br></pre></td></tr></table></figure><h3 id="检测是否存在ssh"><a href="#检测是否存在ssh" class="headerlink" title="检测是否存在ssh"></a>检测是否存在ssh</h3><blockquote><p>一般都会安装到用户根目录下 <code>~</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line"></span><br><span class="line">ls</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">ll</span><br><span class="line"><span class="comment"># 看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key</span></span><br></pre></td></tr></table></figure><h3 id="生成本地ssh"><a href="#生成本地ssh" class="headerlink" title="生成本地ssh"></a>生成本地ssh</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"xxxxx@xxx.com"</span></span><br></pre></td></tr></table></figure><p>之后可进行检测是否生成了ssh</p><ul><li>id_rsa.pub 是公钥</li><li>id_rsa 是私钥</li></ul><h2 id="进行ssh连接"><a href="#进行ssh连接" class="headerlink" title="进行ssh连接"></a>进行ssh连接</h2><p>进入到代码托管平台，如github,再其设置中，security找到ssh选项，将id_rsa.pub的内容进行提交即可</p><p>拉取代码时，换为<code>git@xxx</code>,即在以后的提交中都可使用ssh的方式,进行链接</p>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>美化盒子</title>
      <link href="/2020/03/11/%E7%BE%8E%E5%8C%96%E7%9B%92%E5%AD%90/"/>
      <url>/2020/03/11/%E7%BE%8E%E5%8C%96%E7%9B%92%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>列举几种美化css盒子的方式</p></blockquote><h2 id="使用渐变背景"><a href="#使用渐变背景" class="headerlink" title="使用渐变背景"></a>使用渐变背景</h2><p>渐变背景实际上使用的是背景图进行渐变绘制的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线性渐变-linear-gradient"><a href="#线性渐变-linear-gradient" class="headerlink" title="线性渐变 linear-gradient()"></a>线性渐变 <code>linear-gradient()</code></h3><p>第一个参数表示方向，与y轴的夹角,支持关键字<code>to right</code>,<code>to bottom</code></p><p>之后的参数类似颜色标点的位置，如果不加位置，会自动平分位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(45deg, #d0418e 0%, #9a08e3 100%)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="径向渐变-radial-gradient"><a href="#径向渐变-radial-gradient" class="headerlink" title="径向渐变 radial-gradient()"></a>径向渐变 <code>radial-gradient()</code></h3><p>第一个参数是径向渐变的形状，默认是椭圆形的渐变方式，可以更改为圆形的渐变方式，<code>circle closest-side(最近的边), circle closest-corner as 10% 20%(最近的角)</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(#d0418e, #9a08e3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bg</span> &#123;</span><br><span class="line">  <span class="attribute">background-iamge</span>: <span class="built_in">radial-gradient</span>(</span><br><span class="line">    circle closest-side,</span><br><span class="line">    #d0418e 0%,</span><br><span class="line">    #9a08e3 100%</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环渐变-repeating-liner-gradient-repeating-radial-gradient-线性渐变和径向渐变的叠加"><a href="#循环渐变-repeating-liner-gradient-repeating-radial-gradient-线性渐变和径向渐变的叠加" class="headerlink" title="循环渐变 repeating-liner-gradient, repeating-radial-gradient,线性渐变和径向渐变的叠加"></a>循环渐变 <code>repeating-liner-gradient</code>, <code>repeating-radial-gradient</code>,线性渐变和径向渐变的叠加</h3><p>其中会按照其定义的方式进行重复,可叠加多个值，使用<code>,</code>隔开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">repeating-liner-gradient</span>(</span><br><span class="line">    to right,</span><br><span class="line">    transparent 0, // 0px开始 透明</span><br><span class="line">    transparent 10px, // 10结束 透明</span><br><span class="line">    rgba(208, 65, 232, 0.3) <span class="number">10px</span>, // <span class="number">10px</span>开始 rgba</span><br><span class="line">    <span class="built_in">rgba</span>(208, 65, 232, 0.3) <span class="number">20px</span>, // <span class="number">20px</span>结束 rgba</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tablecloth &#123; // 紫色的桌布效果</span><br><span class="line">  <span class="selector-tag">background-image</span>: <span class="selector-tag">repeating-linear-gradient</span>(</span><br><span class="line">    <span class="selector-tag">to</span> <span class="selector-tag">bottom</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span> 0,</span><br><span class="line">    <span class="selector-tag">transparent</span> 10<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(208, 65, 232, 0<span class="selector-class">.3</span>) 10<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(208, 65, 232, 0<span class="selector-class">.3</span>) 20<span class="selector-tag">px</span></span><br><span class="line">  ), <span class="selector-tag">repeating-linear-gradient</span>(</span><br><span class="line">    <span class="selector-tag">to</span> <span class="selector-tag">right</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span> 0,</span><br><span class="line">    <span class="selector-tag">transparent</span> 10<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(208, 65, 232, 0<span class="selector-class">.3</span>) 10<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(208, 65, 232, 0<span class="selector-class">.3</span>) 20<span class="selector-tag">px</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用背景图"><a href="#使用背景图" class="headerlink" title="使用背景图"></a>使用背景图</h2><p>使用图片不仅可以使用<code>img</code>标签,如果该图片去掉不会影响页面的功能，那么该图片应该就以背景图的形式呈现出来</p><p><code>background</code>可以为一系列组合值</p><ul><li><code>background-repeat</code> 图片重复<ul><li>repeat-x</li><li>repeat-y</li><li>no-repeat</li></ul></li><li><code>background-size</code> 背景图的尺寸<ul><li>x的值，y的值, 一般设置一个为固定值，另一个为auto，防止图片变形，<code>80px auto</code></li><li>contain 自动适应，放到最大的比例，不会裁剪，但是会产生空袭 </li><li>cover 覆盖，也放到最大的比例，会对图片进行裁剪，直到完全填满背景图</li></ul></li><li><p><code>background-position</code> 背景图的位置</p><ul><li>x:left,center,right.y:top, center,bottom.虽然未指明x,y但建议先声明x,在声明y <code>left 10px top 10px</code></li><li>可以先声明关键字，再次确定具体的数值<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">background: url(https://...) left center;</span><br><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">left</span> 10<span class="selector-tag">px</span> <span class="selector-tag">top</span> 50%;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>background-clip, background-origin</code>背景图填充位置</p><ul><li>其可选值都有<code>border-box(default), padding-box, content-box</code></li><li>background-clip，如果背景图被裁剪时，从哪里开始进行裁剪</li><li>background-origin, 指明背景图从哪里进行填充</li></ul></li></ul><p><strong>使用背景图的background的组合属性的写法</strong></p><blockquote><p>组合写法较为理解较为复杂，但是性能较好</p></blockquote><p>组合写法时，不用考虑属性的顺序浏览器会自动识别</p><ul><li>background-position, background-size都时具体的数值，所以shiyong<code>/</code>隔开,<code>background-position/background-size</code></li><li>background-origin,background-clip都是相同的值，写一个认定为相同，两个认定为origin clip</li></ul><p>也可以使用多重背景，使用<code>,</code>隔开即可</p><h2 id="设置边框"><a href="#设置边框" class="headerlink" title="设置边框"></a>设置边框</h2><p>其中边框border是三个复合值，不分先后顺序</p><ul><li>border-width 边框的宽度</li><li>border-color 边框的颜色</li><li>border-style 边框的样式<ul><li>solid实线</li><li>dashed虚线</li><li>dotted点虚线</li><li>double双平行线</li></ul></li></ul><p>其中border属性也可以分别设置 <code>border-left-width</code>,<code>border-bottom-style</code></p><h3 id="设置图片边框"><a href="#设置图片边框" class="headerlink" title="设置图片边框"></a>设置图片边框</h3><p>使用<code>border-image: url(./...) 10 repeat</code></p><ul><li>边框图片的资源</li><li>裁剪九宫格的单位，默认是100%</li><li>中间重复的效果</li></ul><p>九宫格，是指将图片，用四条线拆分，分别是上右下左的方向，分成9块区域，4个角为边框角，中间的区域去除，上下左右中间的部分进行重复/拉伸等操作</p><p><img src="/img/2020/03/11/grid.gif" alt="9宫格裁剪四条线"></p><h3 id="使用border-radius"><a href="#使用border-radius" class="headerlink" title="使用border-radius"></a>使用<code>border-radius</code></h3><blockquote><p>50%，即设置该角为的半圆，其实是x/y = 50%/50%</p></blockquote><p>按照上右下左的顺序<code>border-radius: 10px 20px 30px 40px</code></p><p>也可以用<code>/</code>区分左，右，其实是以画椭圆的方式进行绘制的<code>0 50% 0 50%/0 100% 0 100%</code></p><p>其中也可以分别设置四个角的位置<code>border-top-right-radius</code></p><h3 id="50-和-100"><a href="#50-和-100" class="headerlink" title="50% 和 100%"></a>50% 和 100%</h3><p>如果设置的值超出自然值，浏览器会做响应的优化</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">border-top-left-raduis: 100%; // 此时是1/4的圆</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">border-top-left-raduis</span>: 100%;</span><br><span class="line"><span class="selector-tag">border-top-right-raduis</span>: 100%;</span><br><span class="line">// 此时会显示成50%的效果</span><br></pre></td></tr></table></figure><h2 id="使用shadow"><a href="#使用shadow" class="headerlink" title="使用shadow"></a>使用shadow</h2><p>使用模糊背景，可以有一种立体的感觉，其使用多个值</p><p><code>box-shadow: x偏移 y偏移 模糊半径 拓展半径 颜色</code></p><ul><li>x偏移 向x轴正方向偏移的位置</li><li>y偏移 向y轴正方向偏移的位置</li><li>模糊半径 模糊半径的大小</li><li>拓展半径 在此基础上拓展出去的半径</li><li>颜色 模糊颜色</li></ul><p>可以使用<code>,</code>分隔多个值出去</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.shadow</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">100px</span> yellowgreen, <span class="number">0</span> <span class="number">20px</span> <span class="number">10px</span> hotpink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浏览器缓存策略</title>
      <link href="/2020/03/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/"/>
      <url>/2020/03/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>浏览时，会通过一下几种方式访问资源</p><ol><li>(新标签)地址栏回车</li><li>链接跳转</li><li>前进、后退</li><li>从收藏栏打开链接</li><li>(window.open)新开窗口</li><li>刷新（Command + R / F5）</li><li>强制刷新（Command + Shift + R / Ctrl + F5）</li></ol><p>其中1-5会通过访问一系列的缓存策略</p><p>是否有缓存-&lt;过期策略&gt;-&lt;协商策略&gt;-&gt; 的方式进行缓存</p><p>当拿到资源时又会通过&lt;存储策略&gt;响应内容存入缓存当中</p><p>如果刷新的方式，则会直接进行&lt;协商策略&gt;，如果是强制刷新，则会全部拿资源</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><ul><li>过期策略，通过本地缓存的文件，验证是否过去，是否应用缓存，又<code>Expires</code>,<code>Cache-control</code></li><li>协商策略，通过询问远端的服务器，是否需要抓取新的资源，是否需要重新获取，有<code>ETag</code>,<code>Last-Modified</code></li><li>存储策略，响应内容存入缓存中</li></ul><h2 id="Expires-Cache-Control"><a href="#Expires-Cache-Control" class="headerlink" title="Expires,Cache-Control"></a><code>Expires</code>,<code>Cache-Control</code></h2><p>其中都属于&lt;过期策略&gt;的内容</p><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>存储的时过期的时间，如果本地时间后于某一时刻，那么就称之为过期了</p><p><code>Expires: Sat Oct 20 2018 00:00:00 GMT+0800 (CST)</code></p><h3 id="Cache-control"><a href="#Cache-control" class="headerlink" title="Cache-control"></a>Cache-control</h3><p>是一系列<code>cache-directive（缓存指令）</code>值，中间使用<code>,</code>隔开</p><ul><li>可缓存性相关<ul><li><code>public</code> 在客户端和代理服务器缓存（公共资源适用）</li><li><code>private</code> 在客户端缓存，代理服务器不缓存（用户个人资源）</li><li><code>no-cache</code> 不进行过期策略，直接走协商策略（no-cache走协商策略，no-store是完全不缓存）</li></ul></li><li>过期相关<ul><li><code>max-age=&lt;seconds&gt;</code> 多少秒后过期，如果和Expires同时设置，则Expires失效</li></ul></li><li>其他<ul><li><code>no-store</code> 完全不缓存</li></ul></li></ul><p>仅列举了部分资源</p><h2 id="ETag-Last-Modified"><a href="#ETag-Last-Modified" class="headerlink" title="ETag,Last-Modified"></a><code>ETag</code>,<code>Last-Modified</code></h2><h3 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a><code>Last-Modified</code></h3><p>存储的格式为，<code>Last-Modified: &lt;day-name&gt;，&lt;day&gt; &lt;month&gt; &lt;year&gt; &lt;hour&gt;:&lt;minute&gt;:&lt;second&gt; GMT</code>,表示上一次修改的时间，该修改只会精确到秒，会向服务端询问是否发生了更改。</p><p>下次一次刷新的时候，会带有<code>If-Modifued-Sience: xxx</code> 就是上一次获取的last-modified,去和服务器做对比，如果请求过去，发现是上一次为修改过，则会返回304</p><h3 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a><code>ETag</code></h3><p>文件修改，则会改变该值，如果文件未发生改变，则返回304，<code>ETag: &quot;e6sda124q84ds4&quot;</code></p><h2 id="四种方式优缺点"><a href="#四种方式优缺点" class="headerlink" title="四种方式优缺点"></a>四种方式优缺点</h2><ul><li>Expires<ul><li>优点：http1.0, 简单易用，通过绝对时间标识</li><li>缺点：服务器时间和本地时间不一致的问题，如果资源过期前对其进行了修改，客户端是无法知道的</li></ul></li><li>Cache-Control<ul><li>优点：http1.1内容，相对时间标识，较安全，可配置的指令也很多</li><li>缺点：http1.1才适用，不适用之前1.0版本，如果资源过期前进行了修改，客户端也是无法更改的</li></ul></li><li>Last-Modified<ul><li>优点：不存在版本问题，没过期直接返回304</li><li>缺点：精确到秒，不适用多次重复修改，如果资源并未发生实质性的修改，则也会重新返回</li></ul></li><li>ETag<ul><li>优点：不存在版本问题，没过期直接返回304，可以识别一秒内多次修改，如果资源修改，并未发生实质内容，则ETag值可以不做改变</li><li>缺点：计算ETag会有一定的性能开销，如果分布式服务器计算ETag不同,验证不会通过</li></ul></li></ul><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ul><li>适用很大的Cache-Control:max-age, 和Expires，适用ETag进行校验</li><li>适用业务逻辑，比如<code>xxx/js/index.js?s84vcxzc</code>添加hash或者，timestamp</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浏览器工作原理</title>
      <link href="/2020/03/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2020/03/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="宏观"><a href="#宏观" class="headerlink" title="宏观"></a>宏观</h2><ol><li>将网址转换为IP地址，通过浏览器缓存-系统缓存-路由器缓存-ISP供应商缓存 去DNS服务器查询网址所对应的ip地址</li><li>向ip地址服务器发出请求</li><li>目标服务器解析请求，返回内容</li><li>浏览器相应内容，并呈现给用户</li></ol><h2 id="主要分析浏览器拿到文档时，他是如何进行渲染的"><a href="#主要分析浏览器拿到文档时，他是如何进行渲染的" class="headerlink" title="主要分析浏览器拿到文档时，他是如何进行渲染的"></a>主要分析浏览器拿到文档时，他是如何进行渲染的</h2><blockquote><p>浏览器主要内核为webkit版和Gecko</p></blockquote><h3 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h3><p>浏览器首次绘制</p><p>1.渲染引擎从网络层获取文档内容</p><p>2.DOM部分有DOM解析器生成DOM树（DOM tree），样式部分由样式解析器生成样式规则（style rules）</p><p>2.两者通过附加（attachment）生成渲染树（render tree）</p><p>3.该渲染树进行布局(layout),添加坐标位置信息</p><p>4.最后经过绘制（painting）经由渲染引擎经行绘制</p><p>浏览器进行二次绘制</p><p>发生重绘（repaint）回流/重排（reflow）</p><p>重绘对应的是painting阶段，也就是改变了元素的样式，并未改变元素的位置，如background,color,visible等，对其他元素没有什么影响</p><p>回流对应的是layout阶段，也就是元素的位置发生了改变，需要浏览器根据当前窗口的大小重新计算各个元素的位置，进行定位后，在绘制，如果浏览器自身窗口大小也发生了改变，那么也就会应用于reflow,元素的位置是根据当前的窗口大小进行改变的</p><blockquote><p>按照流程来讲，reflow -&gt; repaint，所以发生reflow时，一定会经历repaint, 发生repaint时，不会触发reflow</p></blockquote><h3 id="如何避免DOM回流"><a href="#如何避免DOM回流" class="headerlink" title="如何避免DOM回流"></a>如何避免DOM回流</h3><blockquote><p>避免操作DOM，就是最好的避免DOM回流的方式，使用现代框架，基于virtualDOM以及DOMDiff能很好的解决问题，所以使用第三方框架是较好的一种选择，这里展示的是手动操作DOM时的一些优化建议</p></blockquote><ul><li>分离读写操作</li></ul><p>读操作，放在一起，写操作放在一起，现代浏览器会做部分优化，会对连续的写操作进行缓存，一次处理</p><ul><li>缓存布局信息</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 看似一次回流，其实中间穿插了读写，较影响性能</span></span><br><span class="line">element.style.width = element.clientWidth + <span class="number">10</span> + <span class="string">'px'</span></span><br><span class="line">element.style.height = element.clientHeight + <span class="number">10</span> + <span class="string">'px'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存布局信息</span></span><br><span class="line"><span class="keyword">const</span> widht = element.clientWidth</span><br><span class="line"><span class="keyword">const</span> height = element.clientHeight</span><br><span class="line"></span><br><span class="line">element.style.width = width + <span class="number">10</span> + <span class="string">'px'</span></span><br><span class="line">element.style.height = height + <span class="number">10</span> + <span class="string">'px'</span></span><br></pre></td></tr></table></figure><ul><li>批量文档修改</li></ul><p>使用<code>fragment</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fragment = <span class="built_in">document</span>.createDocumentFragment()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> newLi = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">  newLi.innerText = i</span><br><span class="line">  fragment.appendChild(newLi)</span><br><span class="line">&#125;</span><br><span class="line">element.appendChild(fragment)</span><br><span class="line">fragment = <span class="literal">null</span> <span class="comment">// 手动释放</span></span><br></pre></td></tr></table></figure><ul><li>使用字符串拼接</li></ul><p>基于模板字符串的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> liContent = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  liContent += <span class="string">`&lt;li&gt;<span class="subst">$&#123;i&#125;</span>&lt;/li&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line">element.innerHtml = liContent</span><br></pre></td></tr></table></figure><ul><li><p>动画效果应该尽可能的脱离文档流，避免影响其他元素</p></li><li><p>CSS使用有硬件加速的效果，底层做了避免回流操作</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.style.transform = <span class="string">'translateX(200px)'</span></span><br></pre></td></tr></table></figure><ul><li>尽可能避免使用table布局</li></ul><p>文档的特性是流式布局，所以使用table布局，会进行多次回流操作</p><h2 id="渲染关键路劲"><a href="#渲染关键路劲" class="headerlink" title="渲染关键路劲"></a>渲染关键路劲</h2><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>由于样式有层叠的属性，所以必须要等样式全部加载完后再进行,否则会进行多次重建CSSOM,一般建议将style放在head部分，建立在下文中的style标签容易会被阻塞，从而重建CSSOM</p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p>由于文档是从上到下构建的，从而可以一边接受一边展示，所谓的流式。</p><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><p>js代码在执行时，也是从上到下执行的，但是由于其又可以改变css，也可以改变DOM结构，所以js执行的时候，CSSOM,DOM构建需暂停</p><h3 id="一般情况构建"><a href="#一般情况构建" class="headerlink" title="一般情况构建"></a>一般情况构建</h3><p>如果只有html与css,即没有script代码嵌入到html中，那么会一边构建CSSOM，一边构建DOM，待两者最长的一个完成时（两者可以同时构建）,组成render-tree，经过定位，绘制呈现到浏览器上</p><p>如果有html,css,js,那么在执行到js的时候，必须要停止css,和html的解析，又因为样式必须一次性加载完毕（否则可能获取的错误的CSS），所以最终的加载顺序<code>CSSOM -&gt; JS -&gt; HTML</code>,所以如果js代码写在html之前，就无法获取之后的内容，因为之后的html还未执行到。</p><h2 id="优化渲染关键路径"><a href="#优化渲染关键路径" class="headerlink" title="优化渲染关键路径"></a>优化渲染关键路径</h2><p>三种因素会互相制约</p><ul><li>关键资源的数量</li><li>关键路径的长度</li><li>关键字节的数量</li></ul><p>关键资源指的是那些阻塞页面首次渲染的资源，如js,css,阻塞关键渲染，浏览器处理渲染的工作量越少，CPU占用的其他资源也越少</p><p>关键路径的长度是指关键路径的总耗时，每一步耗时越长其总体被阻塞的时间就会越长，其受到网络情况，关键资源数量，以及关键字节大小有关。</p><p>关键字节数量是指资源的字节大小，浏览器下载字节越少，其处理速度就会越快。</p><h3 id="缩小DOM"><a href="#缩小DOM" class="headerlink" title="缩小DOM"></a>缩小DOM</h3><ul><li>缩减文件的尺寸，去除注释，去除无用的代码</li><li>使用gzip压缩</li><li>使用缓存</li></ul><h3 id="优化CSSOM"><a href="#优化CSSOM" class="headerlink" title="优化CSSOM"></a>优化CSSOM</h3><ul><li>只将首屏资源放入，由于css会阻塞页面，在暂时用不到的地方可以设置为预加载，或者使用hack的方式加载</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"print"</span> <span class="attr">onload</span>=<span class="string">"this.media='all'"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>将主要的首屏渲染放入head中，减缓下载的时间，可参考<a href="https://github.com/addyosmani/critical" target="_blank" rel="noopener">critical css</a></p></li><li><p>少使用<code>@import</code>他会使文件串行加载</p></li></ul><h3 id="优化js"><a href="#优化js" class="headerlink" title="优化js"></a>优化js</h3><ul><li>js文件也要压缩，使用tree-shaking功能进行优化</li><li>使用异步加载js,<code>&lt;script async src=&quot;...&quot;&gt;&lt;/script&gt;</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-基础-选择器</title>
      <link href="/2020/03/07/css-%E5%9F%BA%E7%A1%80-%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2020/03/07/css-%E5%9F%BA%E7%A1%80-%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="html-css历史"><a href="#html-css历史" class="headerlink" title="html,css历史"></a>html,css历史</h2><p>在 1990 年，Tim Berners-Lee 发明 HTML 时，主要是为了规范科研文档的格式。这时 HTML 是一个简单的标记语言，为文档赋予了基本的结构和意义，包括如标题、列表、定义等标签。后来为了展示更多的效果，以及对部分标签的滥用，比如table标签被用来布局等，样式和结构逐经行了抽离。</p><h2 id="css历史"><a href="#css历史" class="headerlink" title="css历史"></a>css历史</h2><ul><li>css1在1996年成为标准</li><li>css2在1998年成为标准</li><li>css3在2002就被提上议案，并不同的模块被提上不同的提案，不同模块单独控制，从level1开始，如果是之前已经有的内容，则题为level3并继续发展</li></ul><h2 id="html历史"><a href="#html历史" class="headerlink" title="html历史"></a>html历史</h2><p>html经过4.01版本后，衍生出了xhtml1.0,由于其过于严格,最终无法落地，最终诞生出了html5.</p><h2 id="css的渐进增强与向后兼容"><a href="#css的渐进增强与向后兼容" class="headerlink" title="css的渐进增强与向后兼容"></a>css的渐进增强与向后兼容</h2><h3 id="渐进增强"><a href="#渐进增强" class="headerlink" title="渐进增强"></a>渐进增强</h3><p>首先为最小的，公共部分的浏览器准备能用的内容，其次在为支持新特性的浏览器增加内容</p><h3 id="向后兼容"><a href="#向后兼容" class="headerlink" title="向后兼容"></a>向后兼容</h3><p>在使用新特性时，新属性在前，后属性在后，即使新特性用不了，也可以使用旧的兼容的特性。</p><h3 id="厂商前缀"><a href="#厂商前缀" class="headerlink" title="厂商前缀"></a>厂商前缀</h3><ul><li><code>-webkit-</code>适用于webkit内核浏览器 safari/chrome/opera</li><li><code>-moz-</code>适用于Mozilla内核 Firefox</li><li><code>-ms-</code>适用于微软的IE</li></ul><p>其中可使用autofix，或者webpack中的postcss/postcss-preset-env来自动增加前缀信息。</p><h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><p>多使用语义化标签，能够便于浏览器识别，或是屏幕阅读器，或是单纯的处理文本的浏览器，或者盲文点触设备，更利于搜索引擎进行搜索</p><h2 id="css选择器种类"><a href="#css选择器种类" class="headerlink" title="css选择器种类"></a>css选择器种类</h2><h3 id="独立选择器"><a href="#独立选择器" class="headerlink" title="独立选择器"></a>独立选择器</h3><p>自己单独就可使用</p><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><p>匹配给定元素名称的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>选中class属性中包含指定的属性值，必须是完整的属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.intro</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="id选择器，"><a href="#id选择器，" class="headerlink" title="id选择器，"></a>id选择器，</h4><p>与之唯一的一个id,页面中唯一出现的属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#idname</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h4><p>选择器选择所有的节点，也用<code>.intro &gt; *</code>表示<code>.intro的所有子元素</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><p>根据属性来匹配，</p><ul><li>属性值开头<code>img[src^=&quot;http://&quot;]</code></li><li>属性值包含<code>img[src*=&quot;http://&quot;]</code></li><li>属性值结束<code>img[src$=&quot;http://&quot;]</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[type]</span> &#123;&#125;</span><br><span class="line"><span class="selector-attr">[class='intro']</span></span><br></pre></td></tr></table></figure><h4 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h4><p>选择页面的特殊区域，不是通过元素来表示的</p><ul><li>排版类，暂时应用于inline中<ul><li>首行<code>::first-line</code>,</li><li>首字母<code>::first-letter</code>,</li></ul></li><li>存在于页面DOM中,<code>content不为none时会显示</code><ul><li>之前<code>::before</code></li><li>之后<code>::after</code></li></ul></li><li>其他<ul><li>输入框占位元素<code>::placeholder</code></li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">::after</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h4><p>选择页面中元素的特殊状态</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:hover</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>由于在移动设备中，不一定有真的悬浮状态，所以要慎重使用<code>hover</code></p><h5 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h5><ul><li>普通链接（未点击过）<code>a:link</code></li><li>访问过的链接 <code>a:visited</code></li><li>悬停/键盘tab预选时 <code>a:hover</code></li><li>活动状态，鼠标点击时 <code>a:active</code></li></ul><h5 id="目标与反选"><a href="#目标与反选" class="headerlink" title="目标与反选"></a>目标与反选</h5><h6 id="浏览器的目标匹配id-该元素被匹配-target"><a href="#浏览器的目标匹配id-该元素被匹配-target" class="headerlink" title="浏览器的目标匹配id, 该元素被匹配 :target"></a>浏览器的目标匹配id, 该元素被匹配 <code>:target</code></h6><p>浏览器地址为: <code>http://example.com/blog/1/#comment-3</code></p><p>元素id为hash值 <code>&lt;article class=&quot;comment&quot; id=&quot;comment-3&quot;&gt;&lt;/article&gt;</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.comment</span><span class="selector-pseudo">:target</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h6 id="反选-not"><a href="#反选-not" class="headerlink" title="反选 :not()"></a>反选 <code>:not()</code></h6><p>选中comment,但是不能是违法评论(.illegal)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.comment</span><span class="selector-pseudo">:not(.illegal)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="结构化伪类"><a href="#结构化伪类" class="headerlink" title="结构化伪类"></a>结构化伪类</h5><p>其中默认从1开始，如果设置了n，则n的取值从0开始递增</p><ul><li>只选择元素<ul><li><code>:nth-child()</code> 正向选择</li><li><code>:nth-last-child()</code> 从后开始计数选择</li><li><code>:first-child()</code></li><li><code>:last-child()</code></li></ul></li><li>选择同等类型的,过滤掉不符合类型的<ul><li><code>:nth-of-type()</code> 正向选择</li><li><code>:nth-last-of-type()</code> 从后开始计数选择</li></ul></li></ul><h5 id="表单伪类"><a href="#表单伪类" class="headerlink" title="表单伪类"></a>表单伪类</h5><ul><li><code>:required</code>,<code>:optional</code> 必填和选填项</li><li><code>:disabled</code>,<code>:read-only</code>, <code>:read-write</code> 禁用，只读，读写</li><li><code>:vaild</code>,<code>:invaild</code>, 有效，无效</li></ul><h3 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h3><p>通过单独选择器的组合，其中s1,s2,s3表示独立选择器</p><blockquote><p>由于浏览器渲染顺序，都是往后进行选择，如存在向前的选择器，那么浏览器会对一个文档进行多轮渲染</p></blockquote><h4 id="分组选择器"><a href="#分组选择器" class="headerlink" title="分组选择器"></a>分组选择器</h4><p>用逗号最为分隔，多个选择器同时应用一种样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">s1</span>, <span class="selector-tag">s2</span>, <span class="selector-tag">s3</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>用空格作为分割，选择其后代</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">s1</span> <span class="selector-tag">s2</span> <span class="selector-tag">s3</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4><p>使用大于号作为分隔，只会选择器子元素，不会跨越元素去选</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">s1</span> &gt; <span class="selector-tag">s2</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="相邻元素选择器"><a href="#相邻元素选择器" class="headerlink" title="相邻元素选择器"></a>相邻元素选择器</h4><p>选择其后的相邻的元素，如果符合则选定，不符合则不选定，不会跳跃查于其所有的兄弟元素，也不会查其子元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 查找s1紧跟的兄弟元素s2, 如果s1后的紧邻兄弟元素不是s2，则不予以选定</span><br><span class="line"><span class="selector-tag">s1</span> + <span class="selector-tag">s2</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="一般同类选择器"><a href="#一般同类选择器" class="headerlink" title="一般同类选择器"></a>一般同类选择器</h4><p>选择其后的相邻的元素，会跳跃查其所有的兄弟元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 查找s1以后的所有兄弟元素s2, 紧跟元素有多少选择多少</span><br><span class="line"><span class="selector-tag">s1</span> ~ <span class="selector-tag">s2</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="css选择器的特殊性"><a href="#css选择器的特殊性" class="headerlink" title="css选择器的特殊性"></a>css选择器的特殊性</h2><p><code>a, b, c, d</code></p><p>css是采用4个级别判定该样式的优先级（从左往右比较顺序），<strong>每个级别只会在其位置上增减，并不会进位</strong>，<strong>相同优先级，从上到下的顺序排列</strong></p><ul><li>a=1,a是行内样式，</li><li>b=ID选择器的个数</li><li>c=类选择器的个数和伪类选择器的个数</li><li>d=类型选择器和伪元素选择器的个数</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="dv-1" class="box target current"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">div &#123;&#125; // 0.0.0.1</span><br><span class="line">div .box &#123;&#125; // 0.0.1.1</span><br><span class="line">.box.target.current // 0.0.3.0</span><br><span class="line">#dv-1 &#123;&#125; // 0.1.0.0</span><br></pre></td></tr></table></figure><h2 id="css的继承"><a href="#css的继承" class="headerlink" title="css的继承"></a>css的继承</h2><p>所有父元素的属性均会继承给其子元素，<strong>该元素有自己的样式，则会覆盖继承样式</strong>（针对同样式而言）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">  &lt;h1&gt;css&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br><span class="line"></span><br><span class="line">最终内容为<span class="selector-tag">blue</span></span><br></pre></td></tr></table></figure><p>h1收到body的样式继承为red, 又因为h1设置了自己的颜色，所以会覆盖继承的red,为blue</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">  &lt;h1&gt;css&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-size</span>: <span class="number">50px</span>; &#125;</span><br><span class="line"></span><br><span class="line">最终<span class="selector-tag">h1</span>的字号为浏览器自带（并非<span class="selector-tag">body</span>继承的50）</span><br></pre></td></tr></table></figure><p>h1收到body的样式继承为50px,因为浏览器默认对标题有字号设置，所以覆盖继承的50px,为之前字号大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 特列</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">h1</span>&gt;</span><br><span class="line">    hello&lt;em&gt;css&lt;/em&gt;</span><br><span class="line">  &lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">* &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br><span class="line"></span><br><span class="line">最终<span class="selector-tag">hello</span>呈现<span class="selector-tag">blue</span>，<span class="selector-tag">css</span>呈现<span class="selector-tag">red</span></span><br></pre></td></tr></table></figure><p><code>*</code>等于为每个元素都设定了样式，虽然h1的blue继承给了内部的em，但是之前的<code>*</code>为其设置的样式进行了覆盖，所以呈现red</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>送你个月亮，让你安然入睡</title>
      <link href="/2020/02/27/%E9%80%81%E4%BD%A0%E4%B8%AA%E6%9C%88%E4%BA%AE%EF%BC%8C%E8%AE%A9%E4%BD%A0%E5%AE%89%E7%84%B6%E5%85%A5%E7%9D%A1/"/>
      <url>/2020/02/27/%E9%80%81%E4%BD%A0%E4%B8%AA%E6%9C%88%E4%BA%AE%EF%BC%8C%E8%AE%A9%E4%BD%A0%E5%AE%89%E7%84%B6%E5%85%A5%E7%9D%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/2020/02/27/moon.jpg" alt="moon"></p><p>天上最亮的星，是启明星，原来他那么亮。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用yum安装nginx并配置https服务</title>
      <link href="/2020/02/14/%E4%BD%BF%E7%94%A8yum%E5%AE%89%E8%A3%85nginx%E5%B9%B6%E9%85%8D%E7%BD%AEhttps%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/02/14/%E4%BD%BF%E7%94%A8yum%E5%AE%89%E8%A3%85nginx%E5%B9%B6%E9%85%8D%E7%BD%AEhttps%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>centos7 运行环境为腾讯云</p></blockquote><h1 id="使用yum安装nginx"><a href="#使用yum安装nginx" class="headerlink" title="使用yum安装nginx"></a>使用yum安装nginx</h1><h2 id="添加nginx到yum源"><a href="#添加nginx到yum源" class="headerlink" title="添加nginx到yum源"></a>添加nginx到yum源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><h2 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><h1 id="安装certbot"><a href="#安装certbot" class="headerlink" title="安装certbot"></a>安装certbot</h1><h2 id="安装epel-增强源"><a href="#安装epel-增强源" class="headerlink" title="安装epel 增强源"></a>安装epel 增强源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">wget -O /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line"><span class="comment"># 刷新yum源</span></span><br><span class="line">yum clean all &amp;&amp; yum makecache &amp;&amp; yum update</span><br></pre></td></tr></table></figure><h2 id="安装yum-utils"><a href="#安装yum-utils" class="headerlink" title="安装yum-utils"></a>安装yum-utils</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install yum-utils</span><br><span class="line"></span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br></pre></td></tr></table></figure><h2 id="安装python2-certbot-nginx"><a href="#安装python2-certbot-nginx" class="headerlink" title="安装python2-certbot-nginx"></a>安装python2-certbot-nginx</h2><blockquote><p>使用python2开发，再<code>nginx.conf</code>文件中，去掉中文字符</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install python2-certbot-nginx</span><br></pre></td></tr></table></figure><h1 id="使用certbot开启https"><a href="#使用certbot开启https" class="headerlink" title="使用certbot开启https"></a>使用certbot开启https</h1><blockquote><p>如果自定义make编译安装nginx，要更改相关路径，添加软连接</p></blockquote><h2 id="将certbot配置到nginx"><a href="#将certbot配置到nginx" class="headerlink" title="将certbot配置到nginx"></a>将certbot配置到nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certbot --nginx</span><br></pre></td></tr></table></figure><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><ol><li>输入你的邮箱名: <a href="mailto:xxx@xxx.com" target="_blank" rel="noopener">xxx@xxx.com</a></li><li>同一协议: A</li><li>允许邮件推送: Y</li><li>选择添加https配置域名: <code>1 2</code> <em>输入相关数字使用空格隔开</em></li><li>同时保留http,https: 1</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用now-cli部署前端项目到zeit上</title>
      <link href="/2020/02/08/%E4%BD%BF%E7%94%A8now-cli%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0zeit%E4%B8%8A/"/>
      <url>/2020/02/08/%E4%BD%BF%E7%94%A8now-cli%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%B0zeit%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<p>用zeit( <a href="https://zeit.co/" target="_blank" rel="noopener">https://zeit.co/</a> )部署项目，用来做演示，做demo都是一个不错的选择。</p><h2 id="安装now-cli"><a href="#安装now-cli" class="headerlink" title="安装now-cli"></a>安装now-cli</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用npm</span></span><br><span class="line">npm i now -g </span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用yarn</span></span><br><span class="line">yarn global add now</span><br></pre></td></tr></table></figure><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now login</span><br></pre></td></tr></table></figure><h2 id="部署静态网站"><a href="#部署静态网站" class="headerlink" title="部署静态网站"></a>部署静态网站</h2><p>标准网站的结构，如果是单页应用，用此方式路由之后，手动刷新会出现404的问题，可以使用hashRouter解决</p><p>目录结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├─css</span><br><span class="line">├─img</span><br><span class="line">└─js</span><br><span class="line">│</span><br><span class="line">│  index.html</span><br></pre></td></tr></table></figure><p>使用now进行部署,处于当前目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一键部署</span></span><br><span class="line">now</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新命名项目</span></span><br><span class="line">now --name foo</span><br></pre></td></tr></table></figure><h2 id="部署前端项目"><a href="#部署前端项目" class="headerlink" title="部署前端项目"></a>部署前端项目</h2><p>直接在项目更目录中进行部署即可，自动build,这种部署方式有不存在路由刷新问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一键部署</span></span><br><span class="line">now</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署生产环境</span></span><br><span class="line">now --prod</span><br></pre></td></tr></table></figure><blockquote><p>官方文档<a href="https://zeit.co/docs/now-cli#commands/now" target="_blank" rel="noopener">https://zeit.co/docs/now-cli#commands/now</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>正则加强</title>
      <link href="/2020/01/12/%E6%AD%A3%E5%88%99%E5%8A%A0%E5%BC%BA/"/>
      <url>/2020/01/12/%E6%AD%A3%E5%88%99%E5%8A%A0%E5%BC%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.match <span class="comment">// 匹配</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">RegExp</span>.prototype.test <span class="comment">// 是否符合</span></span><br><span class="line"><span class="built_in">RegExp</span>.prototype.exec <span class="comment">// 执行，进行捕获</span></span><br></pre></td></tr></table></figure><h2 id="字面量，构造函数创建的区别"><a href="#字面量，构造函数创建的区别" class="headerlink" title="字面量，构造函数创建的区别"></a>字面量，构造函数创建的区别</h2><h3 id="字面量创建，元字符使用比较简单，构造函数需要特殊转义，转义符才能使用"><a href="#字面量创建，元字符使用比较简单，构造函数需要特殊转义，转义符才能使用" class="headerlink" title="字面量创建，元字符使用比较简单，构造函数需要特殊转义，转义符才能使用"></a>字面量创建，元字符使用比较简单，构造函数需要特殊转义，转义符才能使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量方式创建</span></span><br><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/\d+/</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由构造函数创建,注意由于使用字符串的方式，要注意转义的问题，一般将\变为\\即可</span></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\d+'</span>);</span><br></pre></td></tr></table></figure><h3 id="如果要拼接正则，只能使用构造函数的方式"><a href="#如果要拼接正则，只能使用构造函数的方式" class="headerlink" title="如果要拼接正则，只能使用构造函数的方式"></a>如果要拼接正则，只能使用构造函数的方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'zhn'</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^@'+type+'@$/</span></span><br><span class="line">reg.test(<span class="string">'@zhn@'</span>) <span class="comment">// false</span></span><br><span class="line">reg.test(<span class="string">"@'''''''typeeeee'@"</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'zhn'</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^@'</span> + name +<span class="string">'@$'</span>)</span><br><span class="line">reg.test(<span class="string">'@zhn@'</span>) <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">"@'''''''typeeeee'@"</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="正则匹配修饰符"><a href="#正则匹配修饰符" class="headerlink" title="正则匹配修饰符"></a>正则匹配修饰符</h2><p>i =&gt; ignoreCase 忽略大小写<br>m =&gt; multiline  多次匹配<br>g =&gt; global     全局匹配</p><h2 id="常用元字符"><a href="#常用元字符" class="headerlink" title="常用元字符"></a>常用元字符</h2><h3 id="量词元字符"><a href="#量词元字符" class="headerlink" title="量词元字符"></a>量词元字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* + ? &#123;m&#125; &#123;m,&#125; &#123;m,n&#125;</span><br></pre></td></tr></table></figure><h3 id="特殊元字符"><a href="#特殊元字符" class="headerlink" title="特殊元字符"></a>特殊元字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\ . ^ $ \n \w \s \b \t a|b|c [abc] [a-z] [^n34]</span><br><span class="line">()  (?:) (?=) (?!)</span><br></pre></td></tr></table></figure><h3 id="普通元字符"><a href="#普通元字符" class="headerlink" title="普通元字符"></a>普通元字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/RegExp/ -&gt; 匹配 &apos;RegExp&apos;</span><br></pre></td></tr></table></figure><h2 id="括号相关"><a href="#括号相关" class="headerlink" title="括号相关"></a>括号相关</h2><h3 id="表示分组"><a href="#表示分组" class="headerlink" title="() 表示分组"></a><code>()</code> 表示分组</h3><p>改变优先级，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示18|29,会出现较为混乱的结果</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^18|29$/</span></span><br><span class="line">reg.test(<span class="string">'18'</span>) <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'29'</span>) <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'189'</span>) <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'129'</span>) <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'1829'</span>) <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'829'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结合小括号完成需求</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/^(18|29)$/</span></span><br><span class="line">reg.test(<span class="string">'18'</span>) <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'29'</span>) <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'189'</span>) <span class="comment">// false</span></span><br><span class="line">reg.test(<span class="string">'129'</span>) <span class="comment">// false</span></span><br><span class="line">reg.test(<span class="string">'1829'</span>) <span class="comment">// false</span></span><br><span class="line">reg.test(<span class="string">'829'</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="表示本身含义"><a href="#表示本身含义" class="headerlink" title="[] 表示本身含义"></a><code>[]</code> 表示本身含义</h3><h3 id="仅表示一个字母"><a href="#仅表示一个字母" class="headerlink" title="仅表示一个字母"></a>仅表示一个字母</h3><p>中括号内仅表示一位字母（所有出现的可能性，也只能代表出现的一次）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">reg = <span class="regexp">/^[@+]$/</span> <span class="comment">// 包含在内</span></span><br><span class="line">reg.test(<span class="string">'+'</span>)  <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'@@'</span>) <span class="comment">// false // 2个字母</span></span><br><span class="line">reg.test(<span class="string">'@+'</span>) <span class="comment">// false</span></span><br><span class="line">reg.test(<span class="string">'ab'</span>) <span class="comment">// false // 2个字母</span></span><br><span class="line"></span><br><span class="line">reg = <span class="regexp">/^[^@+]$/</span> <span class="comment">// 不能出现在内</span></span><br><span class="line">reg.test(<span class="string">'+'</span>)  <span class="comment">// false</span></span><br><span class="line">reg.test(<span class="string">'@@'</span>) <span class="comment">// false // 2个字母</span></span><br><span class="line">reg.test(<span class="string">'@+'</span>) <span class="comment">// false</span></span><br><span class="line">reg.test(<span class="string">'a'</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="特殊元字符（及元字符在中括号内）"><a href="#特殊元字符（及元字符在中括号内）" class="headerlink" title="特殊元字符（及元字符在中括号内）"></a>特殊元字符（及元字符在中括号内）</h3><blockquote><p>注意，<code>\</code>是表示转义,<code>[\d]</code> 表示的为<code>\d</code>, 如果是<code>[\\d]</code>,则表示<code>\</code>或者<code>d</code><br>所以在字符串中，也不要忘记转义的存在</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">reg = <span class="regexp">/^[\d]$/</span></span><br><span class="line">reg.test(<span class="string">'\\'</span>) <span class="comment">// false</span></span><br><span class="line">reg.test(<span class="string">'d'</span>) <span class="comment">// false</span></span><br><span class="line">reg.test(<span class="string">'6'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">reg = <span class="regexp">/^[\\d]$/</span></span><br><span class="line">reg.test(<span class="string">'\\'</span>) <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'d'</span>) <span class="comment">// true</span></span><br><span class="line">reg.test(<span class="string">'6'</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">reg = <span class="regexp">/^[\w]$/</span> <span class="comment">// \w 即数字字母下划线</span></span><br><span class="line">reg = <span class="regexp">/^[\\w]$/</span> <span class="comment">// 只表示 \ 和 w, (如果要用字符串做检测，同样需要对字符串\转义 '\\')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reg = <span class="regexp">/^[10-29]$/</span> <span class="comment">// 表示1 | 0-2 | 9</span></span><br></pre></td></tr></table></figure><h2 id="正则的懒惰性"><a href="#正则的懒惰性" class="headerlink" title="正则的懒惰性"></a>正则的懒惰性</h2><p>在正则匹配中，会在其实例对象上的lastIndex记录上一次匹配的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/g</span></span><br><span class="line">reg.exec(<span class="string">'2020-01-08'</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex)  <span class="comment">// 4</span></span><br><span class="line">reg.exec(<span class="string">'2020-01-08'</span>) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex)  <span class="comment">// 7</span></span><br><span class="line">reg.exec(<span class="string">'2020-01-08'</span>) <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex)  <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>正则方法exec中，会展现出其懒惰性，主要取决于是否加<code>g</code>,也即<code>regExp.global</code>是否为true,在为true的情况下，才会继续匹配</p><blockquote><p>这里的懒惰是指正则是否会继续在记录匹配，<code>/\d+/</code>与<code>/\d+/g</code>在reg.exec中都会只匹配一次，只是<code>g</code>模式可以继续执行reg.exec。而str.match中，<code>g</code>可以一次性全匹配出来，即匹配成也给数组<code>[&#39;2020&#39;,&#39;01&#39;,&#39;06&#39;]</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/g</span></span><br><span class="line">reg.exec(<span class="string">'2020-01-08'</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex)  <span class="comment">// 4</span></span><br><span class="line">reg.exec(<span class="string">'2020-01-08'</span>) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex)  <span class="comment">// 7</span></span><br><span class="line">reg.exec(<span class="string">'2020-01-08'</span>) <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex)  <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/</span></span><br><span class="line">reg.exec(<span class="string">'2020-01-08'</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex)  <span class="comment">// 0</span></span><br><span class="line">reg.exec(<span class="string">'2020-01-08'</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex)  <span class="comment">// 0</span></span><br><span class="line">reg.exec(<span class="string">'2020-01-08'</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex)  <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="利用惰性求值，处理execall-核心"><a href="#利用惰性求值，处理execall-核心" class="headerlink" title="利用惰性求值，处理execall,核心"></a>利用惰性求值，处理execall,核心</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/g</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'2019-01-08'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = reg.exec(str)</span><br><span class="line"><span class="keyword">while</span>(res) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res) <span class="comment">// 依此输出2019，01，08</span></span><br><span class="line">  res = reg.exec(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了惰性求值后，regExp均会记录lastIndex</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = reg.exec(str)</span><br><span class="line"><span class="keyword">while</span>(reg.test(str) === <span class="literal">true</span>) &#123; <span class="comment">// 此时会做一次匹配 移动一次lastIndex</span></span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">  res = reg.exec(str) <span class="comment">// 此时会做一次匹配 移动一次lastIndex</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="正则贪婪性"><a href="#正则贪婪性" class="headerlink" title="正则贪婪性"></a>正则贪婪性</h2><p>懒惰性： 每次捕获时仅捕获第一个符合的匹配串</p><p>贪婪性： 满足条件就会一直匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/g</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'2020-01-10'</span></span><br><span class="line">str.match(reg) <span class="comment">// ["2020", "01", "10"]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+?/g</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'2020-01-10'</span></span><br><span class="line">str.match(reg) <span class="comment">// ["2", "0", "2", "0", "0", "1", "1", "0"]</span></span><br></pre></td></tr></table></figure><h3 id="的五大作用"><a href="#的五大作用" class="headerlink" title="?的五大作用"></a><code>?</code>的五大作用</h3><ul><li><code>/\d?/</code> 表示0次或1次</li><li><code>/\d+?/</code> 表示最终捕获一个</li><li><code>/(?:)/</code> 只分组不捕获</li><li><code>/(?=)/</code> 正向匹配预查</li><li><code>/(?!)/</code> 正向不匹配预查</li><li><code>/(?&lt;=)/</code> 负向匹配预查</li><li><code>/(?&lt;!)/</code> 负向不匹配预查</li></ul><h2 id="正则替换，replace"><a href="#正则替换，replace" class="headerlink" title="正则替换，replace"></a>正则替换，replace</h2><h3 id="匹配字符串替换的问题"><a href="#匹配字符串替换的问题" class="headerlink" title="匹配字符串替换的问题"></a>匹配字符串替换的问题</h3><p>每次匹配一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'zhn and zhn'</span></span><br><span class="line">str = str.replace(<span class="string">'zhn'</span>, <span class="string">'me'</span>) <span class="comment">// 'me an zhn'</span></span><br><span class="line">str = str.replace(<span class="string">'zhn'</span>, <span class="string">'me'</span>) <span class="comment">// 'me an zhn'</span></span><br></pre></td></tr></table></figure><p>可能造成重复匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'zhn and zhn'</span></span><br><span class="line">str = str.replace(<span class="string">'zhn'</span>, <span class="string">'goodzhn'</span>) <span class="comment">// 'goodzhn and zhn'</span></span><br><span class="line">str = str.replace(<span class="string">'zhn'</span>, <span class="string">'goodzhn'</span>) <span class="comment">// 'goodgoodzhn and zhn'</span></span><br></pre></td></tr></table></figure><p>使用正则匹配较优，<code>String.prototype.replace(reg, [String] | [Fn])</code>,与正则搭配是比较好的</p><blockquote><p>记得全局匹配 <code>g</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'zhn and zhn'</span></span><br><span class="line">str = str.replace(<span class="regexp">/zhn/g</span>, <span class="string">'me'</span>) <span class="comment">// 'me an me'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'zhn and zhn'</span></span><br><span class="line">str = str.replace(<span class="regexp">/zhn/g</span>, <span class="string">'goodzhn'</span>) <span class="comment">// 'goodzhn and goodzhn'</span></span><br></pre></td></tr></table></figure><p>单词首字母大写转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'good good study, become a good man.'</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\b([a-zA-Z])[a-zA-Z]+\b/g</span></span><br><span class="line">str = str.replace(reg, (...args) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> [content, $<span class="number">1</span>] = args</span><br><span class="line">    <span class="comment">// 首字母大写，并且除去首字母的内容</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;$<span class="number">1.</span>toUpperCase()&#125;</span><span class="subst">$&#123;content.substr(<span class="number">1</span>)&#125;</span>`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str) <span class="comment">// Good Good Study, Become a Good Man.</span></span><br></pre></td></tr></table></figure><h2 id="正向负向预查"><a href="#正向负向预查" class="headerlink" title="正向负向预查"></a>正向负向预查</h2><p>正则表达式中匹配出：形参，函数体</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyReg = <span class="regexp">/(?&gt;=\&#123;)(.|\n)+(?=\&#125;)/m</span></span><br><span class="line"><span class="keyword">const</span> paramsReg = <span class="regexp">/(?&gt;=\().+(?=\)\s+\&#123;)/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>End.2019</title>
      <link href="/2019/12/31/End-2019/"/>
      <url>/2019/12/31/End-2019/</url>
      
        <content type="html"><![CDATA[<p>在2019年的尾巴，给自己总结一下，人嘛，毕竟还是要多反思自己才对。</p><p>2019年，不大不小的年纪了，现在还是21岁，马上就22岁了，再接再厉，想要的，靠自己的双手都能得到。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>大学的课程也都上完了，时间真快，今年一下子全上完了，不出意外，下学期就实习，毕业设计，自己就大学毕业了，曾经想努力修完课程，然而现在，突然一下，就都没了，大学生活还算是充实吧，自己也学习了前端，还蛮不错，继续努力吧。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>去公交云实习了，也算是人生第一家公司吧，就叫他老东家把，也很感谢Marco带我上道。其实还蛮快的，觉得自己还像个孩子，突然就要开始工作了，冲吧，加油。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>生活上，算是不幸，也算是万幸，怎么说呢，有好有坏，坏的呢，就不说了，人们总是会对有些事情耿耿于怀，努力就好，好事呢，感觉自己在慢慢的成长，唉，感觉自己要长大了，爸爸妈妈老了，现在这个样子，肯定不行，所以呢，这就是我的动力，好好的，不管发生了什么，都过去好了，人生这本书总是要翻页的。就这样吧，毕竟抱怨也什么都不会得到，袖子一撸，就是干。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其他吗，也没什么了，希望她过得好好的，哈哈哈哈，那就这样吧，浩南哥，要努力呀。毕竟现在凭实力单身，或许真正自己还没那个能力，<em>拿起刀我就无法拥抱你 放下刀我就无法保护你</em>,先让自己强大起来吧，嗯加油。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>时间蛮快的，要多花时间给身边的人，其实呢，还是要先努力强大自己，对于这一年被我有意无意伤害的人，说一声抱歉，对那些在意我，爱护我的人，说一声谢谢，其实在这里还是最感谢我的爸爸妈妈，你们是我最强大的动力，谢谢。</p><p>最后，新年愿望，2020年，保持一颗好学的心，静下心来去学习前端，本身就是我的爱好，有什么理由被别人拉下呢，还有就是希望我爸爸妈妈身体健康。Over!仅此而已，新年快乐，2020。</p><blockquote><p>我曾难自拔于世界之大<br>也沉溺于其中梦话<br>不得真假 不做挣扎 不惧笑话</p><p>–《起风了》·吴青峰</p></blockquote><p><img src="/img/2019/12/31/gold.jpg" alt="gold"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>总结题4</title>
      <link href="/2019/12/27/%E6%80%BB%E7%BB%93%E9%A2%984/"/>
      <url>/2019/12/27/%E6%80%BB%E7%BB%93%E9%A2%984/</url>
      
        <content type="html"><![CDATA[<h1 id="填充数据处理"><a href="#填充数据处理" class="headerlink" title="填充数据处理"></a>填充数据处理</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="number">111</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="number">222</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="number">555</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="literal">null</span>, <span class="literal">null</span>, <span class="number">111</span>, <span class="number">222</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">555</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>]</span><br></pre></td></tr></table></figure><h2 id="创建数组，按照index依次放入"><a href="#创建数组，按照index依次放入" class="headerlink" title="创建数组，按照index依次放入"></a>创建数组，按照index依次放入</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">12</span>)</span><br><span class="line">  .fill(<span class="literal">null</span>)</span><br><span class="line">  .map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> obj[index<span class="number">-1</span>] || item)</span><br></pre></td></tr></table></figure><h2 id="利用keys的特性"><a href="#利用keys的特性" class="headerlink" title="利用keys的特性"></a>利用keys的特性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">12</span>).fill(<span class="literal">null</span>)</span><br><span class="line"><span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">item</span> =&gt;</span> arr[item<span class="number">-1</span>] = obj[item])</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 转换数组后检查</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">加入length属性，模拟成一个类数组，转换过来，不过要对照次序关系</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">obj.length = <span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(obj)</span><br><span class="line">  .slice(<span class="number">1</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">typeof</span> item === <span class="string">'undefined'</span> ? <span class="literal">null</span> : item)</span><br></pre></td></tr></table></figure><h1 id="三种排序方式"><a href="#三种排序方式" class="headerlink" title="三种排序方式"></a>三种排序方式</h1><h2 id="冒泡排序-改变该数组"><a href="#冒泡排序-改变该数组" class="headerlink" title="冒泡排序(改变该数组)"></a>冒泡排序(改变该数组)</h2><p>依次比较前后的元素，是否需要交换位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="comment">// 小于则交换</span></span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = arr[j]</span><br><span class="line">        arr[j] = arr[j+<span class="number">1</span>]</span><br><span class="line">        arr[j+<span class="number">1</span>] = temp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序-返回一个新数组"><a href="#插入排序-返回一个新数组" class="headerlink" title="插入排序(返回一个新数组)"></a>插入排序(返回一个新数组)</h2><p>直接重新生成一个数组，插入每一项的时候按照顺序插入即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 默认放入第0个元素</span></span><br><span class="line">  result.push(arr[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> nextValue = arr[i]</span><br><span class="line">    <span class="comment">// 查找需要插入的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = result.length - <span class="number">1</span>; j &gt;= <span class="number">0</span> ; j--) &#123;</span><br><span class="line">      <span class="comment">// 从后往前，找到了比它刚好小的，则放入这个后面即可</span></span><br><span class="line">      <span class="keyword">if</span> (result[j] &lt; nextValue) &#123;</span><br><span class="line">        <span class="comment">// 插入到之后，应该是index+1</span></span><br><span class="line">        result.splice(j+<span class="number">1</span>, <span class="number">0</span>, nextValue)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 比较之后，到了最后的元素,是当前最小的元素</span></span><br><span class="line">      <span class="keyword">if</span> (j === <span class="number">0</span>) &#123;</span><br><span class="line">        result.unshift(nextValue)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>类似一种分治的策略，左边比较一下，右边比较一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">10,3,6,7,5,8,1</span><br><span class="line"></span><br><span class="line">1. 找到7</span><br><span class="line">左侧（小）：3,5,6,1</span><br><span class="line">  2.找到5，</span><br><span class="line">    左侧(小)：3,1</span><br><span class="line">      1,3</span><br><span class="line">    右侧(大): 6</span><br><span class="line">右侧（大）：10,8</span><br><span class="line">  ....</span><br><span class="line"></span><br><span class="line">类似二叉树的中序遍历</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果数组只有一项不必要继续下去,有可能一部分是空的，为0</span></span><br><span class="line">  <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>)  &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 寻找中间项</span></span><br><span class="line">  <span class="keyword">const</span> middleIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>)</span><br><span class="line">  <span class="comment">// 取出中间项(并从原数组剔除)</span></span><br><span class="line">  <span class="comment">// arr = [...arr.slice(0, middleIndex), ...arr.slice(middleIndex+1)]</span></span><br><span class="line">  <span class="keyword">const</span> middleValue = arr.splice(middleIndex, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 准备左右数组递归下去</span></span><br><span class="line">  <span class="keyword">const</span> leftArr = []</span><br><span class="line">  <span class="keyword">const</span> rightArr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] &lt; middleValue ? leftArr.push(arr[i]) : rightArr.push(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 左右数组分别进行,并返回</span></span><br><span class="line">  <span class="comment">// return [</span></span><br><span class="line">  <span class="comment">//   ...quick(leftArr),</span></span><br><span class="line">  <span class="comment">//   middleValue,</span></span><br><span class="line">  <span class="comment">//   ...quick(rightArr),</span></span><br><span class="line">  <span class="comment">// ]</span></span><br><span class="line">  <span class="keyword">return</span> quick(leftArr).concat(middleValue, quick(rightArr))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组交集，并集，补集"><a href="#数组交集，并集，补集" class="headerlink" title="数组交集，并集，补集"></a>数组交集，并集，补集</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">intersect</span> (<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// arr1中存在arr2</span></span><br><span class="line">  <span class="keyword">return</span> arr1.filter(<span class="function"><span class="params">v</span> =&gt;</span> arr2.includes(v) === <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">union</span> (<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// arr1全部铺入，arr2铺入不在arr1存在的元素</span></span><br><span class="line">  <span class="keyword">return</span> [...arr1, ...arr2.filter(<span class="function"><span class="params">v</span> =&gt;</span> arr1.includes(v) === <span class="literal">false</span> )]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组旋转"><a href="#数组旋转" class="headerlink" title="数组旋转"></a>数组旋转</h1><p>移动数组，[1,2,3,4] -&gt; 2 [3,4,1,2]</p><h2 id="真实移动"><a href="#真实移动" class="headerlink" title="真实移动"></a>真实移动</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">roate</span> (<span class="params">arr, offset</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 偏移中间的位置</span></span><br><span class="line">  <span class="keyword">const</span> middle = arr.length - offset</span><br><span class="line">  <span class="keyword">return</span> [...arr.slice(middle), ...arr.slice(<span class="number">0</span>, middle)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟队列操作"><a href="#模拟队列操作" class="headerlink" title="模拟队列操作"></a>模拟队列操作</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">roate</span> (<span class="params">arr, offset</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [...arr]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; offset; i++) &#123;</span><br><span class="line">    result.unshift(result.pop())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数柯里化，实现累加"><a href="#函数柯里化，实现累加" class="headerlink" title="函数柯里化，实现累加"></a>函数柯里化，实现累加</h1><h2 id="指定累加次数，使用递归"><a href="#指定累加次数，使用递归" class="headerlink" title="指定累加次数，使用递归"></a>指定累加次数，使用递归</h2><p>其实是使用递归等待函数，直到凑齐了所有的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currying</span> (<span class="params">fn, argsLength</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 参数数量达到即可执行</span></span><br><span class="line">    <span class="keyword">if</span> (args.length &gt;= argsLength) &#123;</span><br><span class="line">      <span class="keyword">return</span> fn.call(<span class="literal">null</span>, ...args)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为达到参数，继续柯里化</span></span><br><span class="line">    <span class="keyword">return</span> currying(fn.bind(<span class="literal">null</span>, ...args), argsLength - args.length)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">sum, current</span>) =&gt;</span> sum + current, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> curryAdd = currying(add, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(curryAdd(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(curryAdd(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(curryAdd(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>)(<span class="number">4</span>)) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h2 id="使用特殊方法触发累加"><a href="#使用特殊方法触发累加" class="headerlink" title="使用特殊方法触发累加"></a>使用特殊方法触发累加</h2><p><code>toString</code>,在某些特定的状态下时，会自动触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">...initArgs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = initArgs</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后续函数作用仅仅是增加args</span></span><br><span class="line">  <span class="keyword">const</span> adder = <span class="function">(<span class="params">...currentArgs</span>) =&gt;</span> &#123;</span><br><span class="line">    args.push(...currentArgs)</span><br><span class="line">    <span class="keyword">return</span> adder</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 手动覆盖toString</span></span><br><span class="line">  adder.toString = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> args.reduce(<span class="function">(<span class="params">sum, current</span>) =&gt;</span> sum + current, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> adder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).toString()) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).toString()) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>)(<span class="number">4</span>).toString()) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 恰饭 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>总结题3</title>
      <link href="/2019/12/26/%E6%80%BB%E7%BB%93%E9%A2%983/"/>
      <url>/2019/12/26/%E6%80%BB%E7%BB%93%E9%A2%983/</url>
      
        <content type="html"><![CDATA[<h1 id="排序问题，自己添加排序项，后续再删除"><a href="#排序问题，自己添加排序项，后续再删除" class="headerlink" title="排序问题，自己添加排序项，后续再删除"></a>排序问题，自己添加排序项，后续再删除</h1><p><code>String.prototype.localeCompare()</code>,类似于调用字母顺序比较</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [ <span class="string">'A1'</span>,<span class="string">'A2'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span> ]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]</span><br><span class="line"><span class="comment">// arr = [ 'A1','A2', 'A', 'B1', 'B2', 'B', 'C1', 'C2', 'C']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单调用sort方法，使用localeCompare,返回结果是字母顺寻 [A, A1, A2, ....]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先对arr2处理一下</span></span><br><span class="line">arr2 = arr2.map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="string">'啦啦'</span>)</span><br><span class="line"><span class="keyword">let</span> arr = arr1.concat(arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 汉字顺序要滞后与字母</span></span><br><span class="line">arr = arr</span><br><span class="line">  .sort(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> prev.localeCompare(next))</span><br><span class="line">  .map(<span class="function"><span class="params">item</span> =&gt;</span> item.replace(<span class="string">'啦啦'</span>, <span class="string">''</span>))</span><br></pre></td></tr></table></figure><h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整个方法闭包</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数闭包</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function">(<span class="params">i =&gt; (</span>) =&gt;</span> <span class="built_in">console</span>.log(i))(i), <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用let块级作用域"><a href="#使用let块级作用域" class="headerlink" title="使用let块级作用域"></a>使用let块级作用域</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用bind预处理"><a href="#使用bind预处理" class="headerlink" title="使用bind预处理"></a>使用bind预处理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">i</span> =&gt;</span> <span class="built_in">console</span>.log(i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(fn.bind(<span class="literal">null</span>, i), <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="匿名函数名称问题"><a href="#匿名函数名称问题" class="headerlink" title="匿名函数名称问题"></a>匿名函数名称问题</h1><p>匿名函数不能为其申明名称，但是如果申请后，是不许与在重新赋值</p><blockquote><p><code>&#39;use strict&#39;</code>模式下，会直接报错，非严格模式下，不会报错。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">b</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// b = 20;  无效</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>作为一个块级内部变量(参数)可以做修改所用</p><p>匿名函数的命名本来就是不被推荐的，如果有形参重名，那么以形参为准</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">b</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">  b = <span class="number">10</span></span><br><span class="line">  consoel.log(b) <span class="comment">// 10</span></span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title="==, ==="></a><code>==</code>, <code>===</code></h1><h2 id="值和类型完全一致，严格"><a href="#值和类型完全一致，严格" class="headerlink" title="=== 值和类型完全一致，严格"></a><code>===</code> 值和类型完全一致，严格</h2><h2 id="值相等即可，其判别的依据如下"><a href="#值相等即可，其判别的依据如下" class="headerlink" title="== 值相等即可，其判别的依据如下"></a><code>==</code> 值相等即可，其判别的依据如下</h2><p>类型相同的情况下，会直接比较</p><p>类型不相同,会转换类型进行比较</p><ol><li>{}=={}, 两个对象进行比较，是比较堆内存的地址</li><li>null==undefined 相等， / null !== undefined</li><li>NaN != NaN</li><li>[12] = ‘12’, 调用toString后，在进行字符串的比较</li><li>其余情况都是进行数字的比较<ul><li>boolean true=1, false=0</li><li>number = number</li><li>string = Number(‘str’), 如果有非数字则会变为NaN</li><li>undefined = NaN</li><li>Object(object - Number(obj.toString()), null - NaN)</li></ul></li></ol><h2 id="保证成立"><a href="#保证成立" class="headerlink" title="保证成立"></a>保证成立</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj == <span class="number">1</span> &amp;&amp; obj == <span class="number">2</span> &amp;&amp; obj == <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'OK'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="覆盖toString"><a href="#覆盖toString" class="headerlink" title="覆盖toString"></a>覆盖<code>toString</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  n: <span class="number">0</span>,</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> ++<span class="keyword">this</span>.n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.shift()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="覆盖defineProperty"><a href="#覆盖defineProperty" class="headerlink" title="覆盖defineProperty"></a>覆盖defineProperty</h2><p>将<code>a</code>,作为<code>window</code>的一个变量即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>, <span class="string">'obj'</span>, &#123;</span><br><span class="line">  get() &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.shift()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="模拟push"><a href="#模拟push" class="headerlink" title="模拟push,"></a>模拟push,</h1><h2 id="push的简易实现"><a href="#push的简易实现" class="headerlink" title="push的简易实现"></a>push的简易实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 默认插入，到尾部</span></span><br><span class="line">  <span class="keyword">this</span>[<span class="keyword">this</span>.length] = value</span><br><span class="line"></span><br><span class="line">  <span class="comment">// length长度严格意义是浏览器对其控制增减操作 </span></span><br><span class="line">  <span class="keyword">this</span>.length++</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="number">2</span>: <span class="number">3</span>, <span class="comment">// this[2] = 1 2: 1</span></span><br><span class="line">  <span class="number">3</span>: <span class="number">4</span>, <span class="comment">// this[3] = 2 3:2</span></span><br><span class="line">  length: <span class="number">2</span>, <span class="comment">// 2 -&gt; 3 -&gt; 4</span></span><br><span class="line">  push: <span class="built_in">Array</span>.prototype.push</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.push(<span class="number">1</span>)</span><br><span class="line">obj.push(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(obj) <span class="comment">// &#123; 2:1, 3:2, length: 4 ...&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 恰饭 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>总结题2</title>
      <link href="/2019/12/26/%E6%80%BB%E7%BB%93%E9%A2%982/"/>
      <url>/2019/12/26/%E6%80%BB%E7%BB%93%E9%A2%982/</url>
      
        <content type="html"><![CDATA[<h1 id="图片懒加载-delay-load"><a href="#图片懒加载-delay-load" class="headerlink" title="图片懒加载 delay load"></a>图片懒加载 <code>delay load</code></h1><p>主要核心</p><h2 id="懒加载，不要给他img的src赋值"><a href="#懒加载，不要给他img的src赋值" class="headerlink" title="懒加载，不要给他img的src赋值"></a>懒加载，不要给他img的src赋值</h2><p>适当的时候，再将img的地址赋值给src,这样可以做到按需加载，<code>&lt;img src=&quot;&quot; data-src=&quot;xxx&quot;/&gt;</code>,等到合适的时机进行替换即可</p><h2 id="懒加载处理时机"><a href="#懒加载处理时机" class="headerlink" title="懒加载处理时机"></a>懒加载处理时机</h2><p>懒加载的对象已经完全出现在了视口内，即当前视口的<strong>底端距离window（height + scrollTop）</strong>,必须要&gt;= 该<strong>对象距离顶部的距离img（height + offset.Top）</strong></p><h2 id="事件相关"><a href="#事件相关" class="headerlink" title="事件相关"></a>事件相关</h2><p>委托给window事件，图片加载完成的事件,<code>img.addEventListener(&#39;onLoad&#39;, handle)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="undefined">      width: 410px;</span></span><br><span class="line"><span class="undefined">      margin: 0 auto;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.imgBox</span> &#123;</span></span><br><span class="line"><span class="undefined">      height: 180px;</span></span><br><span class="line"><span class="undefined">      margin-bottom: 20px;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#BBB</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.imgBox</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="undefined">      display: none;</span></span><br><span class="line"><span class="undefined">      height: 100%;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/jquery/dist/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./delayLoad.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $container = $(<span class="string">'.container'</span>);</span><br><span class="line"><span class="keyword">const</span> $<span class="built_in">window</span> = $(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态创建图片</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>).fill(<span class="literal">null</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  str += <span class="string">`&lt;div class="imgBox"&gt;</span></span><br><span class="line"><span class="string">      &lt;img src="" data-img="https://i0.hdslb.com/bfs/archive/a84e5a2751c81ddf51ecb7267eb118284da6c4b7.jpg@1100w_484h_1c_100q.jpg"/&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line">$container.html(str)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取每一个imgBox</span></span><br><span class="line">$imgBoxs = $container.children(<span class="string">'.imgBox'</span>)</span><br><span class="line"><span class="built_in">console</span>.log($imgBoxs);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒加载</span></span><br><span class="line"><span class="comment"> * 计算视口（当前显示的位置）底部 &gt;= 该图片底部到顶部的距离</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> handleDeladyLoad = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取视口底部到顶部的距离</span></span><br><span class="line">  <span class="keyword">let</span> viewPortTop = $<span class="built_in">window</span>.outerHeight() + $<span class="built_in">window</span>.scrollTop()</span><br><span class="line"></span><br><span class="line">  $imgBoxs.each(<span class="function">(<span class="params">index, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> $item = $(item);</span><br><span class="line">    <span class="keyword">let</span> $img = $item.children(<span class="string">'img'</span>)</span><br><span class="line">    <span class="keyword">let</span> isLoad = $item.attr(<span class="string">'isLoad'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取图片到顶部的距离</span></span><br><span class="line">    <span class="keyword">let</span> imgTop = $item.outerHeight() + $item.offset().top</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否需要加载出图片</span></span><br><span class="line">    <span class="keyword">if</span> (imgTop &lt;= viewPortTop &amp;&amp; isLoad !== <span class="string">'true'</span>) &#123;</span><br><span class="line">      <span class="comment">// 标记加载完成</span></span><br><span class="line">      $item.attr(<span class="string">'isLoad'</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置图片src字段，并加载图片</span></span><br><span class="line">      $img.attr(<span class="string">'src'</span>, $img.attr(<span class="string">'data-img'</span>))</span><br><span class="line">      $img.on(<span class="string">'load'</span>, () =&gt; $img.fadeIn())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载加载完成，和滚动事件</span></span><br><span class="line">$<span class="built_in">window</span>.on(<span class="string">'load scroll'</span>, handleDeladyLoad)</span><br></pre></td></tr></table></figure><h1 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h1><h2 id="ES6方法flat"><a href="#ES6方法flat" class="headerlink" title="ES6方法flat"></a>ES6方法flat</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.flat(<span class="literal">Infinity</span>)</span><br></pre></td></tr></table></figure><h2 id="使用ES6的set进行存储"><a href="#使用ES6的set进行存储" class="headerlink" title="使用ES6的set进行存储"></a>使用ES6的set进行存储</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br></pre></td></tr></table></figure><h2 id="使用toString，再分割"><a href="#使用toString，再分割" class="headerlink" title="使用toString，再分割"></a>使用toString，再分割</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.toString().split(<span class="string">','</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Number</span>(item))</span><br></pre></td></tr></table></figure><h2 id="使用stringify去除"><a href="#使用stringify去除" class="headerlink" title="使用stringify去除[,]"></a>使用stringify去除<code>[</code>,<code>]</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(arr).replace(<span class="regexp">/(\[|\])/g</span>, <span class="string">''</span>).split(<span class="string">','</span>).map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Number</span>(item))</span><br></pre></td></tr></table></figure><h2 id="手动扁平化"><a href="#手动扁平化" class="headerlink" title="手动扁平化"></a>手动扁平化</h2><p>检测元素中是否含有数组，有则继续展下去</p><h3 id="concat是将传入的参数，合并到数组中去，"><a href="#concat是将传入的参数，合并到数组中去，" class="headerlink" title="concat是将传入的参数，合并到数组中去，"></a><code>concat</code>是将传入的参数，合并到数组中去，</h3><p>比如concat(1, [2, 3], [4, [5], 6])</p><ul><li><code>1</code>, 直接放入 [x, 1]</li><li><code>[2,3]</code>， 直接合并 [x, 2, 3]</li><li><code>[4, [5], 6]</code>, 合并每一项 [x, 4, [5], 6]</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(arr.some(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">Array</span>.isArray(item))) &#123;</span><br><span class="line">  <span class="comment">// 将该数组每一项拆开合并进去</span></span><br><span class="line">  arr = [].concat(...arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手动递归"><a href="#手动递归" class="headerlink" title="手动递归"></a>手动递归</h2><h3 id="实现方法一"><a href="#实现方法一" class="headerlink" title="实现方法一"></a>实现方法一</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFlat</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环每一项，不是数组的存储起来</span></span><br><span class="line">  <span class="keyword">const</span> put = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, item; item = arr[i++]; ) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">        put(item)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      result.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  put(arr)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现方法二"><a href="#实现方法二" class="headerlink" title="实现方法二"></a>实现方法二</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFlat</span> (<span class="params">arr</span>)  </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, item; item = arr[i++];) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">      <span class="comment">// 当前每一项是否是数组</span></span><br><span class="line">      <span class="comment">// result = [...result, ...myFlat(item)]</span></span><br><span class="line">      result = result.concat(myFlat(item))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果是数据，直接push</span></span><br><span class="line">      result.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="英文字母组成字符串前后添加空格"><a href="#英文字母组成字符串前后添加空格" class="headerlink" title="英文字母组成字符串前后添加空格"></a>英文字母组成字符串前后添加空格</h1><p>正则匹配，<code>\b</code>表示单词边界，不仅是一个空格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'这里是HDU，你好HDUer未来一起努力'</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\b[a-z]+\b/ig</span></span><br><span class="line">str = str.replace(reg, value =&gt; <span class="string">` <span class="subst">$&#123;value&#125;</span> `</span>).trim()</span><br></pre></td></tr></table></figure><h1 id="自定义的-attr-要求可以进行获取标签中的任何元素任意位置"><a href="#自定义的-attr-要求可以进行获取标签中的任何元素任意位置" class="headerlink" title="自定义的$attr,要求可以进行获取标签中的任何元素任意位置"></a>自定义的$attr,要求可以进行获取标签中的任何元素任意位置</h1><p>获取所有的标签，<code>document.getElementByTagName(&#39;*&#39;)</code></p><h1 id="正则中，无论是字符串还是模板字符串，-都要注意转义符的存在，比如-b-regExp正则中new-RegExp-b"><a href="#正则中，无论是字符串还是模板字符串，-都要注意转义符的存在，比如-b-regExp正则中new-RegExp-b" class="headerlink" title="正则中，无论是字符串还是模板字符串，\都要注意转义符的存在，比如/\b/, regExp正则中new RegExp(\b)"></a>正则中，无论是字符串还是模板字符串，<code>\</code>都要注意转义符的存在，比如<code>/\b/</code>, regExp正则中<code>new RegExp(</code>\b<code>)</code></h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'box aa'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-count</span>=<span class="string">'666'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'box clearfix'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-count</span>=<span class="string">'123'</span> <span class="attr">data-type</span>=<span class="string">'QQ'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-type</span>=<span class="string">'QQ'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'clearfix'</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">$attr('data-count', '123') -&gt; [<span class="tag">&lt;<span class="name">div</span> <span class="attr">data-count</span>=<span class="string">'123'</span> <span class="attr">data-type</span>=<span class="string">'QQ'</span> /&gt;</span>]</span><br><span class="line">$attr('class', 'box') -&gt; [<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'box aa'</span> /&gt;</span>, <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'box clearfix'</span> /&gt;</span>]</span><br></pre></td></tr></table></figure><h2 id="实现，主要是要注意其特殊性，class属性可多选"><a href="#实现，主要是要注意其特殊性，class属性可多选" class="headerlink" title="实现，主要是要注意其特殊性，class属性可多选"></a>实现，主要是要注意其特殊性，class属性可多选</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$attr</span> (<span class="params">property, value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取页面所有的元素</span></span><br><span class="line">  <span class="keyword">let</span> elements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>)</span><br><span class="line">  <span class="keyword">const</span> arr = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转换为数组形式</span></span><br><span class="line">  elements = <span class="built_in">Array</span>.from(elements)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 依此寻找</span></span><br><span class="line">  elements.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> itemPropertyValue = item.getAttribute(property)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 特殊处理class, 正则匹配内部元素</span></span><br><span class="line">    <span class="keyword">if</span> (property === <span class="string">'class'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`\\b<span class="subst">$&#123;value&#125;</span>\\b`</span>)</span><br><span class="line">      <span class="keyword">if</span> (reg.test(itemPropertyValue)) &#123; arr.push(item) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理其他值，直接判断是否相同</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (itemPropertyValue === value) &#123; arr.push(item) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现一个内置的new方法"><a href="#实现一个内置的new方法" class="headerlink" title="实现一个内置的new方法"></a>实现一个内置的new方法</h1><ol><li>创建原型对象</li><li>调用构造函数</li><li>返回构造函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span> (<span class="params">Fn, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 手动创建字面量对象， 并进行挂载</span></span><br><span class="line">  <span class="comment">// const obj = &#123;&#125;</span></span><br><span class="line">  <span class="comment">// Object.setPrototypeOf(Fn.prototype)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Object.create以某个原型挂载一个对象</span></span><br><span class="line">  <span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(Fn.prototype)</span><br><span class="line">  Fn.call(obj, ...args)</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 恰饭 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>总结题1</title>
      <link href="/2019/12/26/%E6%80%BB%E7%BB%93%E9%A2%981/"/>
      <url>/2019/12/26/%E6%80%BB%E7%BB%93%E9%A2%981/</url>
      
        <content type="html"><![CDATA[<h1 id="call-与-apply-的区别-性能相关"><a href="#call-与-apply-的区别-性能相关" class="headerlink" title="call 与 apply 的区别, 性能相关"></a>call 与 apply 的区别, 性能相关</h1><p>call, apply均为function原型上的方法，他们的作用都是改变this指向，唯一不同的就是传递参数的方式</p><p>fn.call(obj, 10, 20, 30)<br>fn.apply(obj, [10, 20, 30])</p><p>call的性能要比apply好一些(尤其是传递给函数的参数超过3个的时候)，推荐call</p><p>基于es6对象展开符，可以使用call代替apply</p><p>fn.apply(obj, arr)<br>fn.call(obj, …arr)</p><p>性能：测试网站，一定要注明环境，个人测试只能作为参考</p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>console.time(‘A’)<br>// …code<br>console.timeEnd(‘A’)</p><h1 id="实例调取方法，链式调用，-5-add-3-minus-2"><a href="#实例调取方法，链式调用，-5-add-3-minus-2" class="headerlink" title="实例调取方法，链式调用，(5).add(3).minus(2)"></a>实例调取方法，链式调用，(5).add(3).minus(2)</h1><p>原型上的写法，原型链拓展<br>数字要加括号才可以进行拓展</p><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><ol><li>箭头函数很简洁</li><li>箭头函数，没有this指向，使用call等也无法改变其this的指向</li><li>箭头函数没有<code>arguments</code>，可以使用申明式args <code>let fn = (...args) =&gt; {}</code></li></ol><h2 id="new的过程"><a href="#new的过程" class="headerlink" title="new的过程"></a>new的过程</h2><p>创建一个空对象，把原型挂上来，(构造器内)之后进行相关this赋值，返回该this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj1</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">123</span> &#125;</span><br><span class="line"><span class="comment">// new Obj1 =&gt; obj1实例</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj3</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"><span class="comment">// new Obj3 =&gt; obj3实例</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj2</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> &#123;<span class="attr">name</span>: <span class="string">'z'</span>&#125; &#125;</span><br><span class="line"><span class="comment">// new Obj2 =&gt;  &#123; name: 'z' &#125;</span></span><br></pre></td></tr></table></figure><h2 id="不适合箭头函数"><a href="#不适合箭头函数" class="headerlink" title="不适合箭头函数"></a>不适合箭头函数</h2><p>没有this指向,但是情境下又需要有this指向的功能,<strong>需要使用到this时才有问题</strong></p><ol><li>字面量对象内部</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  sum1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="comment">// OK</span></span><br><span class="line">  sum2 () &#123;&#125;, <span class="comment">// OK</span></span><br><span class="line">  sum3: <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;, <span class="comment">// ERROR</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>原型上的方法</p></li><li><p>回调函数，使用到this的</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">button.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.focus() &#125; )</span><br></pre></td></tr></table></figure><ol start="4"><li>构造函数</li></ol><h2 id="重新replace-REG-CALLBACK"><a href="#重新replace-REG-CALLBACK" class="headerlink" title="重新replace([REG], [CALLBACK])"></a>重新replace([REG], [CALLBACK])</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.myReplace = <span class="function"><span class="keyword">function</span> (<span class="params">reg, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> destStr = <span class="keyword">this</span></span><br><span class="line">  <span class="comment">// 首次检验是否匹配</span></span><br><span class="line">  <span class="keyword">let</span> regResult = reg.exec(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(regResult) &#123;</span><br><span class="line">    <span class="comment">// 得到匹配结果，并进行回调，并用返回值修改原str</span></span><br><span class="line">    <span class="keyword">let</span> replaceStr = callback.call(destStr, regResult)</span><br><span class="line">    destStr = destStr.replace(regResult[<span class="number">0</span>], replaceStr)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行下一次匹配</span></span><br><span class="line">    regResult = reg.exec(destStr)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> destStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部迭代"><a href="#内部迭代" class="headerlink" title="内部迭代"></a>内部迭代</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> each = <span class="function">(<span class="params">arr, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, item; item = arr[i++]; ) &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = callback.call(arr, item, i, arr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag === <span class="literal">false</span>) &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="indexOf-正则匹配去进行查找字符串"><a href="#indexOf-正则匹配去进行查找字符串" class="headerlink" title="indexOf,正则匹配去进行查找字符串"></a>indexOf,正则匹配去进行查找字符串</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.myIndexOf = <span class="function"><span class="keyword">function</span> (<span class="params">reg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(reg)</span><br><span class="line">  <span class="keyword">const</span> res = reg.exec(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果没有匹配到则返回-1 否则直接调用正则匹配结果的res.index,即首次出现的位置 </span></span><br><span class="line">  <span class="keyword">return</span> res === <span class="literal">null</span> ? <span class="number">-1</span> : res.index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="关于对象中key，键的相关"><a href="#关于对象中key，键的相关" class="headerlink" title="关于对象中key，键的相关"></a>关于对象中key，键的相关</h1><h2 id="对象的键默认都是一个字符串"><a href="#对象的键默认都是一个字符串" class="headerlink" title="对象的键默认都是一个字符串"></a>对象的键默认都是一个字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;, a = <span class="string">'123'</span>, b = <span class="number">123</span></span><br><span class="line"></span><br><span class="line">obj[a] = <span class="string">'a'</span>; obj[b] = <span class="string">'b'</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终obj[a] = 'b' 因为obj[123] = obj['123']</span></span><br></pre></td></tr></table></figure><h2 id="对象中key使用一个symbol来创建"><a href="#对象中key使用一个symbol来创建" class="headerlink" title="对象中key使用一个symbol来创建"></a>对象中key使用一个symbol来创建</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;, a = <span class="built_in">Symbol</span>(<span class="number">123</span>), b = <span class="built_in">Symbol</span>(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">obj[a] = <span class="string">'a'</span>; obj[b] = <span class="string">'b'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终obj[a] = 'a' 因为Smbol(123) !== Smbol(123)</span></span><br></pre></td></tr></table></figure><p><code>Symbol.for()</code> 会在Symbol池中寻找或创建放入symbol池</p><ul><li><code>Symbol(123) !== Symbol(123)</code></li><li><code>Symbol.for(123) === Symbol.for(123)</code></li></ul><h2 id="对象中key使用一个应用值来创建"><a href="#对象中key使用一个应用值来创建" class="headerlink" title="对象中key使用一个应用值来创建"></a>对象中key使用一个应用值来创建</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">arr = [<span class="number">12</span>,<span class="number">34</span>]; obj[arr] = <span class="string">'arr'</span>;</span><br><span class="line"><span class="comment">// &#123;12,34: 'arr' &#125;</span></span><br><span class="line"></span><br><span class="line">o1 = &#123; <span class="attr">name</span>: <span class="string">'z'</span> &#125;; obj[o1] = <span class="string">'o1'</span>;</span><br><span class="line"><span class="comment">// &#123;[object Object]: 'o1' &#125;</span></span><br></pre></td></tr></table></figure><p>会调用对象的<code>toString</code>方法来当成key值传递进去。</p><h2 id="判断对象构造器的方式"><a href="#判断对象构造器的方式" class="headerlink" title="判断对象构造器的方式"></a>判断对象构造器的方式</h2><ul><li>typeof， <code>typeof &#39;str&#39;</code></li></ul><p>只能判断，boolean, number, string, undefined, function, object(null + object + array)</p><ul><li><code>Object.prototype.toString.call(obj)</code></li></ul><p>能够针对与object对象进行更细致一层的判</p><ol><li>[object Undefined]</li><li>[object Number]</li><li>[object Date]</li><li>[object Array]</li><li>[object String]<br>… [object Xxx]</li></ol><ul><li>只能进行原型判断了， <code>Object.getPrototypeOf(obj) === Person.prototype</code></li></ul><p>直接比较是否时原型对象（注意<code>__proto__</code>非标准，es推荐使用<code>Object.getPrototypeOf(obj)</code>来获取）</p><h1 id="正则匹配网址"><a href="#正则匹配网址" class="headerlink" title="正则匹配网址"></a>正则匹配网址</h1><ul><li><code>?:</code> 不进行分组</li><li><code>?</code> 可有可无，所以内部需要的只需要+即可</li><li><code>\w</code> 数字，字母，下划线</li><li>开头结尾</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(?:(http|https|ftp):\/\/)?((?:[\w-]+\.)+[a-z0-9]+)((?:\/[^\/#?]*)+)?(\?[^#]+)?(#.+)?$/i</span><br></pre></td></tr></table></figure><h3 id="匹配协议"><a href="#匹配协议" class="headerlink" title="匹配协议"></a>匹配协议</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(?:(http|https|ftp):\/\/)?<span class="regexp">/i</span></span><br></pre></td></tr></table></figure><h3 id="匹配域名"><a href="#匹配域名" class="headerlink" title="匹配域名"></a>匹配域名</h3><p>匹配<code>www.</code> <code>baidu.</code> <code>12306.</code><br>后匹配 <code>xxx</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/((?:[\w-]+\.)+[a-z0<span class="number">-9</span>]+)/i</span><br></pre></td></tr></table></figure><h3 id="匹配地址"><a href="#匹配地址" class="headerlink" title="匹配地址"></a>匹配地址</h3><p><code>/xxx.html</code>  <code>/xxx</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/((?:\/[^\/#?]*)+)?/i</span><br></pre></td></tr></table></figure><h3 id="匹配查询参数"><a href="#匹配查询参数" class="headerlink" title="匹配查询参数"></a>匹配查询参数</h3><p><code>?a=b</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(\?[^#]+)?/i</span><br></pre></td></tr></table></figure><h3 id="匹配hash"><a href="#匹配hash" class="headerlink" title="匹配hash"></a>匹配hash</h3><p><code>#sda任意</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(#.+)?/i</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 恰饭 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在typescript中使用eslint</title>
      <link href="/2019/12/18/%E5%9C%A8typescript%E4%B8%AD%E4%BD%BF%E7%94%A8eslint/"/>
      <url>/2019/12/18/%E5%9C%A8typescript%E4%B8%AD%E4%BD%BF%E7%94%A8eslint/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于vscode进行配置开发</p></blockquote><h1 id="改变tslint"><a href="#改变tslint" class="headerlink" title="改变tslint"></a>改变tslint</h1><p>之前有使用tslint来对代码质量进行保障，由于tslint是eslint的一个子集,并且鉴于eslint的发达生态，所以使用eslint来代替tslint是比较好的一个选择，并且tslint团队也建议转移使用eslint。</p><h1 id="项目中使用eslint"><a href="#项目中使用eslint" class="headerlink" title="项目中使用eslint"></a>项目中使用eslint</h1><p>这里直接使用umi出品的fabric来进行校验即可，并且其中也包含了其他配置，可根据自己的需要来进行使用，主要就是一些规则的优化。</p><h2 id="删除项目中的eslint相关，与tslint相关"><a href="#删除项目中的eslint相关，与tslint相关" class="headerlink" title="删除项目中的eslint相关，与tslint相关"></a>删除项目中的eslint相关，与tslint相关</h2><h2 id="使用fabric中的eslint"><a href="#使用fabric中的eslint" class="headerlink" title="使用fabric中的eslint"></a>使用fabric中的eslint</h2><p>项目根目录中的<code>.eslintrc.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const fabric = require(&apos;@umijs/fabric&apos;);</span><br><span class="line">module.exports = fabric.eslint;</span><br></pre></td></tr></table></figure></p><h2 id="自己定义规则"><a href="#自己定义规则" class="headerlink" title="自己定义规则"></a>自己定义规则</h2><p>由于fabric中也是eslint配置的规则，则可以应用解构赋值的方式进行规则的拓展</p><p>项目根目录中的<code>.eslintrc.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  extends: [<span class="built_in">require</span>.resolve(<span class="string">'@umijs/fabric/dist/eslint'</span>)],</span><br><span class="line"></span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="comment">// your rules</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="在vscode中配置eslint环境"><a href="#在vscode中配置eslint环境" class="headerlink" title="在vscode中配置eslint环境"></a>在vscode中配置eslint环境</h1><ol><li><p>安装插件eslint</p></li><li><p>在配置文件中添加对ts的相关支持，使得可以自行进行依赖配置。</p></li></ol><p>vscode并不会自动lint ts的相关文件，在<code>settings.json</code>中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;eslint.validate&quot;: [</span><br><span class="line">    &quot;javascript&quot;,</span><br><span class="line">    &quot;javascriptreact&quot;,</span><br><span class="line">    &quot;typescript&quot;,</span><br><span class="line">    &quot;typescriptreact&quot;</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker构建gitlab</title>
      <link href="/2019/11/24/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2gitlab/"/>
      <url>/2019/11/24/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2gitlab/</url>
      
        <content type="html"><![CDATA[<blockquote><p>gitlab功能比较庞大，所占用资源也很多，建议放在资源好一点的服务器，虚拟机运行4GB+,遇到问题可直接看最后面，可能会有所帮助</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>使用docker-compose构建</li><li>使用docker的方式进行构建，基于gitlab-ce社区版搭建（可根据需要获取ee版）</li><li>使用nginx做一层反向代理，最终通过一个二级域名的方式可直达gitlab</li></ul><p>最终的目的是使用二级域名，直接映射过去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 本地资源</span><br><span class="line">192.168.204.138 -&gt; 服务器</span><br><span class="line">二级域名 gitlab.vm.com -&gt; 192.168.204.138 (此处是本机做了个hosts)</span><br><span class="line"></span><br><span class="line"># 映射关系</span><br><span class="line">服务器中:7080 -&gt; gitlab-docker:80</span><br><span class="line">服务器中:7443 -&gt; gitlab-docker:443 (后面没有使用)</span><br><span class="line">服务器中:7022 -&gt; gitlab-docker:22 (用于ssh连方式)</span><br><span class="line"></span><br><span class="line"># 访问关系</span><br><span class="line">192.168.204.138:7080 -&gt; gitlab-docker</span><br><span class="line">gitlab.vm.com:7080 -&gt; gitlab-docker</span><br><span class="line"></span><br><span class="line"># 最终使用nginx做一层反向代理</span><br><span class="line">gitlab.vm.com -&gt; gitlab-docker</span><br></pre></td></tr></table></figure><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl https://get.docker.com/ &gt; install-docker.sh <span class="comment"># 下载安装脚本</span></span><br><span class="line"></span><br><span class="line">sh install-docker.sh <span class="comment"># 执行安装脚本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改docker阿里yum源</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://brnzp166.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置开机自启动<code>systemctl enable docker</code></p><h2 id="安装docker-compose-基于国内镜像"><a href="#安装docker-compose-基于国内镜像" class="headerlink" title="安装docker-compose(基于国内镜像)"></a>安装docker-compose(基于国内镜像)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载docker-compose</span></span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋予权限</span></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="设置外部目录"><a href="#设置外部目录" class="headerlink" title="设置外部目录"></a>设置外部目录</h2><p>由于是docker镜像运行, 所以我们需要把gitlab的配置, 数据, 日志存到容器外面, 即将其挂载到宿主机。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/software/gitlab/etc</span><br><span class="line">mkdir -p /home/software/gitlab/logs</span><br><span class="line">mkdir -p /home/software/gitlab/data</span><br></pre></td></tr></table></figure><h2 id="制作docker-compose-yml文件"><a href="#制作docker-compose-yml文件" class="headerlink" title="制作docker-compose.yml文件"></a>制作docker-compose.yml文件</h2><p>由于使用了docker-compose帮助我们部署，所以不需要进行拉取镜像等，他会自动帮我们执行</p><p>找一个目录存放<code>docker-compose.yml</code>文件，这里使用<code>/home/software/gitlab</code>目录</p><ol><li>新建文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/software/gitlab</span><br><span class="line"></span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><ol start="2"><li>编辑docker-compose.yml文件内容,如有要求可自行修改对应目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"></span><br><span class="line">gitlab:</span><br><span class="line">  image: <span class="string">'gitlab/gitlab-ce:latest'</span></span><br><span class="line">  restart: unless-stopped</span><br><span class="line">  hostname: <span class="string">'gitlab.vm.com'</span> <span class="comment"># 最终暴露出去的host</span></span><br><span class="line">  environment:</span><br><span class="line">    GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 外部可以访问到gitlab的url</span></span><br><span class="line">      external_url <span class="string">'http://gitlab.vm.com'</span> </span><br><span class="line">      </span><br><span class="line">      <span class="comment"># ssh相关（注意可能会和ssh连接工具端口冲突）</span></span><br><span class="line">      gitlab_rails[<span class="string">'gitlab_ssh_host'</span>] = <span class="string">'gitlab.vm.com'</span></span><br><span class="line">      gitlab_rails[<span class="string">'gitlab_shell_ssh_port'</span>] = 7022</span><br><span class="line"></span><br><span class="line">      <span class="comment"># email相关</span></span><br><span class="line">      gitlab_rails[<span class="string">'smtp_enable'</span>] = <span class="literal">true</span></span><br><span class="line">      gitlab_rails[<span class="string">'smtp_address'</span>] = <span class="string">"smtp.163.com"</span> <span class="comment"># smtp服务器地址</span></span><br><span class="line">      gitlab_rails[<span class="string">'smtp_port'</span>] = 465</span><br><span class="line">      gitlab_rails[<span class="string">'smtp_user_name'</span>] = <span class="string">"123456@163.com"</span> <span class="comment"># 发送邮件的邮箱</span></span><br><span class="line">      gitlab_rails[<span class="string">'smtp_password'</span>] = <span class="string">"授权码"</span>     <span class="comment"># 邮箱的授权码</span></span><br><span class="line">      gitlab_rails[<span class="string">'smtp_domain'</span>] = <span class="string">"smtp.163.com"</span></span><br><span class="line">      gitlab_rails[<span class="string">'smtp_authentication'</span>] = <span class="string">"login"</span></span><br><span class="line">      gitlab_rails[<span class="string">'smtp_enable_starttls_auto'</span>] = <span class="literal">true</span></span><br><span class="line">      gitlab_rails[<span class="string">'smtp_tls'</span>] = <span class="literal">true</span> </span><br><span class="line">      gitlab_rails[<span class="string">'gitlab_email_from'</span>] = <span class="string">'123456@163.com'</span> <span class="comment"># 发送邮件的邮箱</span></span><br><span class="line">  ports:</span><br><span class="line">    - <span class="string">'7080:80'</span></span><br><span class="line">    - <span class="string">'7443:443'</span></span><br><span class="line">    - <span class="string">'7022:22'</span></span><br><span class="line">  volumes:</span><br><span class="line">    - <span class="string">'/home/software/gitlab/etc:/etc/gitlab'</span></span><br><span class="line">    - <span class="string">'/home/software/gitlab/logs:/var/log/gitlab'</span></span><br><span class="line">    - <span class="string">'/home/software/gitlab/data:/var/opt/gitlab'</span></span><br></pre></td></tr></table></figure><h2 id="检测配置成功"><a href="#检测配置成功" class="headerlink" title="检测配置成功"></a>检测配置成功</h2><h3 id="运行docekr"><a href="#运行docekr" class="headerlink" title="运行docekr"></a>运行docekr</h3><p>切换到刚刚的<code>docker-compose.yml</code>文件存在的地址（此时是在/home/software/gitlab）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/software/gitlab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后台运行docker</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>使用<code>docker ps</code>查看当前docker的运行状况，等待gitlab的状态为（healthy/unhealthy，约5分钟左右）,也即打包完毕后，访问<code>192.168.204.138:7080</code>，如果可以看到欢迎界面，恭喜你，搭建就成功了</p><p>以后直接切换去<code>docker-compose.yml</code>文件存在的地址,使用<code>docker-compose up -d</code>即可重启，并且上文设置了docker开机自启。</p><p>此时设置的密码为root账户，即以后用户名为<em>root</em>的账户，超级管理员</p><p><em>可点击头像框 <code>settings -&gt; preferences -&gt; language</code></em>  切换为中文</p><h3 id="测试邮箱服务"><a href="#测试邮箱服务" class="headerlink" title="测试邮箱服务"></a>测试邮箱服务</h3><p>修改完成后，进入到另一个终端中，进入gitlab-docker内</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到该container中，执行重新配置，等待完成</span></span><br><span class="line">gitlab-ctl reconfigure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试邮箱是否完成</span></span><br><span class="line">gitlab-rails console     <span class="comment"># 进入邮件控制台, 稍等一会才能进入</span></span><br><span class="line">Notify.test_email(<span class="string">'test_another@qq.com'</span>, <span class="string">'Message Subject'</span>, <span class="string">'Message Body'</span>).deliver_now</span><br></pre></td></tr></table></figure><h2 id="使用nginx反向代理"><a href="#使用nginx反向代理" class="headerlink" title="使用nginx反向代理"></a>使用nginx反向代理</h2><blockquote><p>反向代理说通俗就是，你去访问192.168.204.138的时候，服务器趁你不知道安排了192.168.204.138：7080给你服务，此时是后台服务器，通过一个中间商，给你服务。</p></blockquote><h3 id="使用yum安装nginx"><a href="#使用yum安装nginx" class="headerlink" title="使用yum安装nginx"></a>使用yum安装nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载对应当前系统版本的nginx包(package)</span></span><br><span class="line">wget  http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立nginx的yum仓库</span></span><br><span class="line">rpm -ivh nginx-release-centos-7-0.el7.ngx.noarch.rpm  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据/etc/yum.repos.d/nginx.repo中的信息下载安装nginx</span></span><br><span class="line">yum install nginx   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nginx服务</span></span><br><span class="line">systemctl start nginx </span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启nginx服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><h3 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h3><p>使用此种方式安装的nginx，配置文件是较为分散的，可以使用<code>whereis nginx</code>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到nginx配置目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc/nginx/conf.d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个针对gitlab的proxy, 一定要为*.conf， 查看 /etc/nginx/nginx.conf 就懂了</span></span><br><span class="line">vim proxy_gitlab.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的反向代理，gitlab.vm.com:80 -&gt; http:127.0.0.1:7080</span></span><br><span class="line"><span class="comment"># 即docker映射出的gitlab 目录</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name gitlab.vm.com;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:7080;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx服务<code>systemctl restart nginx</code></p><p>访问即可<a href="http://gitlab.vm.com" target="_blank" rel="noopener">http://gitlab.vm.com</a></p><h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><h3 id="SELINUX-针对反向代理"><a href="#SELINUX-针对反向代理" class="headerlink" title="SELINUX(针对反向代理)"></a>SELINUX(针对反向代理)</h3><p>linux安全模块，此处直接关闭（不推荐这种做法，可以去找selinux较好的解决方案）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/selinux</span><br><span class="line"></span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><h3 id="firewalld"><a href="#firewalld" class="headerlink" title="firewalld"></a>firewalld</h3><p>由于防火墙的存在，可能造成浏览器一直转圈的状况</p><p>本地虚拟机，直接关闭（不推荐，可以去找firewalld较好的解决方案）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld   <span class="comment"># 关闭防火墙</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld   <span class="comment"># 永久关闭（当然也不推荐啦）</span></span><br></pre></td></tr></table></figure><h3 id="gitlab-docker无限重启"><a href="#gitlab-docker无限重启" class="headerlink" title="gitlab-docker无限重启"></a>gitlab-docker无限重启</h3><p>可能是配置出了问题，之前配置extends_url出现这种状况，所以此时并未在进行过配置</p><p>可以切换进去(此处gitlab-docker的name就叫gitlab,也可以替换为<code>&lt;containerID&gt;</code>，<code>docker ps -a</code>即可查看)，查看哪里出了问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container logs gitlab</span><br></pre></td></tr></table></figure><h3 id="nginx服务器启动异常"><a href="#nginx服务器启动异常" class="headerlink" title="nginx服务器启动异常"></a>nginx服务器启动异常</h3><p>nginx服务启动说权限的问题，此处可能是修改了SELINUX导致的问题，可以先将selinux切换回之前的模式，重启后，待nginx可正常启动后，重启在修改SELINUX即可</p><h3 id="爆内存"><a href="#爆内存" class="headerlink" title="爆内存"></a>爆内存</h3><p>因为gitlab对设备的还是有一定要求的<a href="https://docs.gitlab.com/ee/install/requirements.html#hardware-requirements" target="_blank" rel="noopener">gitlab硬件要求</a></p><p>如果卡慢的话，可以试一试增加虚拟内存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4GB虚拟内存</span></span><br><span class="line">dd <span class="keyword">if</span>=/dev/zero of=/home/swap bs=1024 count=4194304</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化分区</span></span><br><span class="line">mkswap /home/swap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启swap分区(关闭swap分区 swapoff /home/swap)</span></span><br><span class="line">swapon /home/swap</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载分区</span></span><br><span class="line">vim /etc/fstab</span><br><span class="line"></span><br><span class="line">/home/swap swap swap default 0 0</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.gitlab.com/omnibus/docker/" target="_blank" rel="noopener">docker方式构建gitlab(官方文档)</a></p><p><a href="https://blog.csdn.net/weixin_42032542/article/details/80345691" target="_blank" rel="noopener">云服务器增加swap分区</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js简易实现Graph</title>
      <link href="/2019/11/12/js%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0Graph/"/>
      <url>/2019/11/12/js%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0Graph/</url>
      
        <content type="html"><![CDATA[<p>图结构更加贴近生活，能更多的模拟生活中的一些结构,表示一种网状，能更好的表示节点之间的联系与关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I - E -|   </span><br><span class="line">       B - A - C - | </span><br><span class="line">    F -|   |   |   |</span><br><span class="line">           | - D - G</span><br><span class="line">               | - - — H</span><br></pre></td></tr></table></figure><p><img src="/img/2019/11/12/graph.png" alt="graph"></p><h2 id="图的种类"><a href="#图的种类" class="headerlink" title="图的种类"></a>图的种类</h2><h3 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h3><p>有方向的图，B-&gt;A, A-&gt;B,可以使用邻接矩阵来表示，但是使用邻接表的时候，分为邻接表，逆邻接表（根据入度出度）。 </p><h3 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h3><p>没有方向的图，A-B，表示了A与B，和B与A的联系，可以使用邻接矩阵来表示，也可以使用邻接表来表示</p><h2 id="存储形式"><a href="#存储形式" class="headerlink" title="存储形式"></a>存储形式</h2><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><p>使用一个二维数组的形式来表示，很想坐标系，使用两个轴所对应的坐标寻找两个点之间的关系，当边不一样时，即存在了权时，采用邻接矩阵的方式也比较好表示，直接在相应的位置上即为他们的度即可。</p><p>当一个图较为稀疏时，可能会存在大量不必要存储的0，造成了空间的浪费</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如存在一个图</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  A - B - c</span></span><br><span class="line"><span class="comment"> *       \D/</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   A B C D</span></span><br><span class="line"><span class="comment"> * A 0 1 0 0</span></span><br><span class="line"><span class="comment"> * B 1 0 1 1</span></span><br><span class="line"><span class="comment"> * C 0 1 0 1</span></span><br><span class="line"><span class="comment"> * D 0 1 1 0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">[</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p>将顶点(vertex),与边(Edge)分别进行记录的一种方式，每个定点的<strong>入度</strong>，<strong>出度</strong>分别可以组成<strong>逆邻接表</strong>，<strong>邻接表</strong></p><p>在使用邻接表时，分别记录，可以使用<code>[&#39;A&#39;, &#39;B&#39;]</code>来记录定点信息，使用<code>{ vertex: [ vertex1, vertex2 ] }</code>来记录边的信息</p><h2 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h2><p>使用一种方式，将图内的所有节点都访问一遍的方式，注意以下两点</p><ol><li>遍历的时候，必须给图一个初始的顶点</li><li>每个顶点分为3种状态，<em>white(未访问)</em>,<em>gray(正在访问状态中)</em>,<em>black(访问结束)</em>,初始化时，所有的点都应该时white的,只将white放到即将要访问中，gray表示正在访问，会造成循环，black已经访问过了，会造成重复</li></ol><h3 id="bfs-breadth-first-search-广度优先"><a href="#bfs-breadth-first-search-广度优先" class="headerlink" title="bfs,breadth first search, 广度优先"></a>bfs,<em>breadth first search</em>, 广度优先</h3><p><img src="/img/2019/11/12/bfs.png" alt="bfs"></p><p>每一个元素所有的节点都要访问完再去他们的子元素这样访问，采用一层一层的方式，可以使用<strong>队列</strong>的方式实现，将一层塞入队列中，这一层的子元素，再次塞入队列，就保证了对头是同层的</p><h3 id="dfs-depth-first-search-深度优先"><a href="#dfs-depth-first-search-深度优先" class="headerlink" title="dfs,depth first search, 深度优先"></a>dfs,<em>depth first search</em>, 深度优先</h3><p><img src="/img/2019/11/12/dfs.png" alt="dfs"></p><p>每一个元素一旦访问后就要走到头，采用<strong>递归函数</strong>的方式实现，每一个点都是递归的访问，所以直到所有点都是访问过的，才会一层一层递归回来，也就是这一个点走完了</p><h3 id="两种方式注意事项"><a href="#两种方式注意事项" class="headerlink" title="两种方式注意事项"></a>两种方式注意事项</h3><ol><li>处理<strong>white型</strong>节点，保证不循环应用，不重复应用等</li><li>在改变为gray时就要handler掉他，等他的子节点也都遍历完了之后，就可以black掉了。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图结构</span></span><br><span class="line"><span class="comment"> * 采用邻接表的形式，无向图</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Graph</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 表示存储的点</span></span><br><span class="line">  <span class="keyword">this</span>.vertexes = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 表示存储的边</span></span><br><span class="line">  <span class="keyword">this</span>.edge = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加一个点,点存在就不再添加了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Graph.prototype.addVertex = <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.edge.hasOwnProperty(v) === <span class="literal">true</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加节点，初始化边</span></span><br><span class="line">  <span class="keyword">this</span>.vertexes.push(v)</span><br><span class="line">  <span class="keyword">this</span>.edge[v] = []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加一条边</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Graph.prototype.addEdge = <span class="function"><span class="keyword">function</span> (<span class="params">v1,  v2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前是否存在该点</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.edge.hasOwnProperty(v1) === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.addVertex(v1)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.edge.hasOwnProperty(v2) === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.addVertex(v2)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 增加两条边的关系</span></span><br><span class="line">  <span class="keyword">this</span>.edge[v1].push(v2)</span><br><span class="line">  <span class="keyword">this</span>.edge[v2].push(v1)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出邻接表的存在形式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Graph.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line">  <span class="keyword">this</span>.vertexes.forEach(<span class="function"><span class="params">vertex</span> =&gt;</span> &#123;</span><br><span class="line">    str += <span class="string">`<span class="subst">$&#123;vertex&#125;</span> -&gt;`</span></span><br><span class="line">    <span class="keyword">this</span>.edge[vertex].forEach(<span class="function"><span class="params">otherVertex</span> =&gt;</span> str += <span class="string">` <span class="subst">$&#123;otherVertex&#125;</span>`</span>)</span><br><span class="line">    str += <span class="string">'\n'</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化所有颜色的方法</span></span><br><span class="line"><span class="comment"> * W-white, G-gray, B-black </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Graph.prototype.initializeColor = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化所有点顺序的一个color</span></span><br><span class="line">  <span class="keyword">const</span> colors = &#123;&#125;</span><br><span class="line">  <span class="keyword">this</span>.vertexes.forEach(<span class="function">(<span class="params">v</span>) =&gt;</span> colors[v] = <span class="string">'W'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> colors</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DFS-&gt;广度优先</span></span><br><span class="line"><span class="comment"> * 使用队列入队，出队实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Graph.prototype.bfs = <span class="function"><span class="keyword">function</span> (<span class="params">initV, handler</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取所有点的颜色表</span></span><br><span class="line">  <span class="keyword">const</span> colors = <span class="keyword">this</span>.initializeColor()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 准备队列，并放入初始化点进行遍历</span></span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line">  queue.enqueue(initV)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (queue.isEmpty() === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// 取出要遍历的节点</span></span><br><span class="line">    <span class="keyword">const</span> currentVertex = queue.dequeue()</span><br><span class="line">    <span class="keyword">const</span> currentEdges = <span class="keyword">this</span>.edge[currentVertex]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处于遍历状态</span></span><br><span class="line">    colors[currentVertex] = <span class="string">'G'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次放入每一个邻接表中的点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, v; v = currentEdges[i++]; ) &#123;</span><br><span class="line">      <span class="comment">// 已经遍历或是访问了，就不在处理了</span></span><br><span class="line">      <span class="keyword">if</span> (colors[v] !== <span class="string">'W'</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 放入该点，并且改变该点的颜色</span></span><br><span class="line">      queue.enqueue(v)</span><br><span class="line">      colors[v] = <span class="string">'B'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理该点</span></span><br><span class="line">    handler(currentVertex)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dfs-&gt;深度优先</span></span><br><span class="line"><span class="comment"> * 采用递归的形式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Graph.prototype.dfs = <span class="function"><span class="keyword">function</span> (<span class="params">initV, handler</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 递归方法，置成灰色，然后遍历，处理，置成黑色</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> dfsVisit = <span class="function">(<span class="params">currentVertex, colors, handler</span>) =&gt;</span> &#123;</span><br><span class="line">    colors[currentVertex] = <span class="string">'G'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理该点</span></span><br><span class="line">    handler(currentVertex)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> currentEdges = <span class="keyword">this</span>.edge[currentVertex]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, v; v = currentEdges[i++]; ) &#123;</span><br><span class="line">      <span class="keyword">if</span> (colors[v] !== <span class="string">'W'</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      dfsVisit(v, colors, handler)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    colors[currentVertex] = <span class="string">'B'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取颜色</span></span><br><span class="line">  <span class="keyword">const</span> colors = <span class="keyword">this</span>.initializeColor()</span><br><span class="line">  <span class="comment">// 开启遍历</span></span><br><span class="line">  dfsVisit(initV, colors, handler)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> graph = <span class="keyword">new</span> Graph()</span><br><span class="line"></span><br><span class="line">graph.addVertex(<span class="string">'A'</span>)</span><br><span class="line">graph.addVertex(<span class="string">'B'</span>)</span><br><span class="line">graph.addVertex(<span class="string">'C'</span>)</span><br><span class="line">graph.addVertex(<span class="string">'D'</span>)</span><br><span class="line">graph.addVertex(<span class="string">'E'</span>)</span><br><span class="line">graph.addVertex(<span class="string">'F'</span>)</span><br><span class="line">graph.addVertex(<span class="string">'G'</span>)</span><br><span class="line">graph.addVertex(<span class="string">'H'</span>)</span><br><span class="line">graph.addVertex(<span class="string">'I'</span>)</span><br><span class="line"></span><br><span class="line">graph.addEdge(<span class="string">'A'</span>, <span class="string">'B'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'A'</span>, <span class="string">'C'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'A'</span>, <span class="string">'D'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'C'</span>, <span class="string">'D'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'C'</span>, <span class="string">'G'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'D'</span>, <span class="string">'G'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'D'</span>, <span class="string">'H'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'B'</span>, <span class="string">'E'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'B'</span>, <span class="string">'F'</span>)</span><br><span class="line">graph.addEdge(<span class="string">'E'</span>, <span class="string">'I'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(graph.toString())</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bfsList = []</span><br><span class="line">graph.bfs(<span class="string">'A'</span>, v =&gt; bfsList.push(v))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bfsList'</span>, bfsList)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dfsList = []</span><br><span class="line">graph.dfs(<span class="string">'A'</span>, v =&gt; dfsList.push(v))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'dfsList'</span>, dfsList)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js实现简易BinarySearchTree</title>
      <link href="/2019/11/11/js%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93BinarySearchTree/"/>
      <url>/2019/11/11/js%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93BinarySearchTree/</url>
      
        <content type="html"><![CDATA[<p>二叉搜索树,<em>二分查找法</em>，他将数组的这种特性，应用到了数组上，主要是数组在频繁增删元素时，尤其是对于有顺序的元素，他会移动大量的元素，从而造成性能的下降，由此就有了利用链表的想法，但是又为了能有二分搜索法的特性，所以就以二分搜索法类似的顺序排列下来</p><p>左侧是小于父节点的数据，右侧是大于父节点的数据，也即二分的特性</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>要按照特性查找到符合条件的位置，进行插入</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>涉及到替补的元素，可使用<strong>前驱</strong>，或者是<strong>后继</strong>来进行替换，但是这里要注意找到前驱/后继元素的时候，对其他的元素更改其挂载的父节点的位置，也就是自动变换位置。</p><h3 id="失衡"><a href="#失衡" class="headerlink" title="失衡"></a>失衡</h3><p>当插入数据时，会产生失衡现象，即一侧树特别长，另一侧很短，此时性能会急剧下降，BST也就变成了一个链表，解决方法有两种</p><ul><li>AVL树（用的不多）</li><li>红黑树（比较普遍）</li></ul><h3 id="红黑树（解决失衡的方式）"><a href="#红黑树（解决失衡的方式）" class="headerlink" title="红黑树（解决失衡的方式）"></a>红黑树（解决失衡的方式）</h3><p>红黑树的原理就是讲每一个节点分为红/黑这两种形态的节点，更具一定的规律下，就尽可能的保证了此树是一颗尽可能平衡的数（可能会有看起来有点失衡，但并不违背规则，当在插入某一种叶子时，立马回调整回来）</p><ul><li>左旋转</li><li>右旋转</li></ul><p>其中，红黑树保证以下这五条原则，即可最大限度保证平衡</p><ol><li>每个节点不是红色就是黑色</li><li>根节点总是黑色的</li><li>节点是红色的，那么他打的子节点一定是黑色的</li><li>每个叶子节点（NIL）必须是黑色（此处指null,‘不存在’的节点，只要有值，就不能算叶子节点），并且不能有两个连续的红色</li><li>从根节点到叶子节点或者空节点的距离，包含相同数目的黑色节点</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.key = key</span><br><span class="line">  <span class="keyword">this</span>.left = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.right = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BinarySearchTree</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.root = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BinarySearchTree.prototype.insert = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> newNode = <span class="keyword">new</span> Node(key)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果当前树空</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.root) &#123;</span><br><span class="line">    <span class="keyword">this</span>.root = newNode</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 寻找适合的位置插入</span></span><br><span class="line">  <span class="keyword">this</span>.insertNode(<span class="keyword">this</span>.root, newNode)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内部插入结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BinarySearchTree.prototype.insertNode = <span class="function"><span class="keyword">function</span> (<span class="params">root, newNode</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 判断当前的root所代表的值，和当前元素的key的情况</span></span><br><span class="line"><span class="comment">   * 小于key,插入左侧：1.无左结点，直接替换，否则继续递归插入</span></span><br><span class="line"><span class="comment">   * 大于key,插入右侧：1.无右结点，直接替换，否则继续递归插入</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (newNode.key &lt; root.key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root.left === <span class="literal">null</span>) &#123;</span><br><span class="line">      root.left = newNode</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.insertNode(root.left, newNode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (newNode.key &gt; root.key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (root.right === <span class="literal">null</span>) &#123;</span><br><span class="line">      root.right = newNode</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.insertNode(root.right, newNode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (newNode.key === root.key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 先序遍历</span></span><br><span class="line"><span class="comment"> * preOrderTraversal</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BinarySearchTree.prototype.preOrderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">handle</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 先序遍历节点</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> preOrderTraversalNode = <span class="function"><span class="keyword">function</span> (<span class="params">root, handle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 先序处理</span></span><br><span class="line">      handle(root.key)</span><br><span class="line"></span><br><span class="line">      preOrderTraversalNode(root.left, handle)</span><br><span class="line"></span><br><span class="line">      preOrderTraversalNode(root.right, handle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 从根节点开始遍历</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  preOrderTraversalNode(<span class="keyword">this</span>.root, handle)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中序遍历</span></span><br><span class="line"><span class="comment"> * midOrderTraversal</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BinarySearchTree.prototype.midOrderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">handle</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 中序遍历节点</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> midOrderTraversalNode = <span class="function"><span class="keyword">function</span> (<span class="params">root, handle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root !== <span class="literal">null</span>) &#123;</span><br><span class="line">      midOrderTraversalNode(root.left, handle)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 中序处理</span></span><br><span class="line">      handle(root.key)</span><br><span class="line"></span><br><span class="line">      midOrderTraversalNode(root.right, handle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  midOrderTraversalNode(<span class="keyword">this</span>.root, handle)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后序遍历</span></span><br><span class="line"><span class="comment"> * postOrderTraversal</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BinarySearchTree.prototype.postOrderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">handle</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 后序遍历节点</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> postOrderTraversalNode = <span class="function"><span class="keyword">function</span> (<span class="params">root, handle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root !== <span class="literal">null</span>) &#123;</span><br><span class="line">      postOrderTraversalNode(root.left, handle)</span><br><span class="line"></span><br><span class="line">      postOrderTraversalNode(root.right, handle)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 后序处理</span></span><br><span class="line">      handle(root.key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  postOrderTraversalNode(<span class="keyword">this</span>.root, handle)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 寻找最大值</span></span><br><span class="line"><span class="comment"> * 遍历到最右侧</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BinarySearchTree.prototype.max = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> node = <span class="keyword">this</span>.root</span><br><span class="line">  <span class="keyword">let</span> key = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    key = node.key</span><br><span class="line">    node = node.right</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> key</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 寻找最小值</span></span><br><span class="line"><span class="comment"> * 遍历到最左侧</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BinarySearchTree.prototype.min = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> node = <span class="keyword">this</span>.root</span><br><span class="line">  <span class="keyword">let</span> key = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    key = node.key</span><br><span class="line">    node = node.left</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> key</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 寻找到特定的值</span></span><br><span class="line"><span class="comment"> * 由于这里省略了data数据，真实情况返回需要数据即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">BinarySearchTree.prototype.search = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.root === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> node = <span class="keyword">this</span>.root</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key &lt; node.key) &#123; <span class="comment">// 小于根，在左侧树内</span></span><br><span class="line">      node = node.left</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123; <span class="comment">// 大于根，在右侧树内</span></span><br><span class="line">      node = node.right</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 等于根，寻找到该元素</span></span><br><span class="line">      <span class="keyword">return</span> node.key</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 找到叶子节点并未找到，说明不存在</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BinarySearchTree.prototype.delete = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 保存删除节点的条件</span></span><br><span class="line">  <span class="keyword">let</span> current = <span class="keyword">this</span>.root</span><br><span class="line">  <span class="keyword">let</span> parent = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> childrenDirection = <span class="string">'left'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 循环，找到要删除的元素</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">while</span> (current.key !== key) &#123;</span><br><span class="line">    parent = current</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (key &lt; current.key) &#123;</span><br><span class="line">      childrenDirection = <span class="string">'left'</span></span><br><span class="line">      current = current.left</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      childrenDirection = <span class="string">'right'</span></span><br><span class="line">      current = current.right</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果找到叶子节点还没有，则退出</span></span><br><span class="line">    <span class="keyword">if</span> (current === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 此时current为要删除的元素</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * current为一个叶子节点</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (current.left === <span class="literal">null</span> &amp;&amp; current.right === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 当前删除的是根节点</span></span><br><span class="line">    <span class="keyword">if</span> (current === <span class="keyword">this</span>.root) &#123;</span><br><span class="line">      <span class="keyword">this</span>.root = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除此叶子节点</span></span><br><span class="line">    parent[childrenDirection] = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * current为一个单孩子节点,只有一个节点存在</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">if</span> (current.left === <span class="literal">null</span> || current.right === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 当前删除的是根节点</span></span><br><span class="line">    <span class="keyword">if</span> (current === <span class="keyword">this</span>.root) &#123;</span><br><span class="line">      <span class="keyword">this</span>.root = current.left ? current.left : current.right</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除单孩子的父节点</span></span><br><span class="line">    parent[childrenDirection] = current.left ? current.left : current.right</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取一个节点的后继节点，并挂载相关节点</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> getSucceedNode = <span class="function"><span class="keyword">function</span> (<span class="params">deleteNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> parent = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> current = deleteNode.right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (current.left !== <span class="literal">null</span>) &#123;</span><br><span class="line">      parent = current</span><br><span class="line">      current = current.left</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此时current是要删除的后继</span></span><br><span class="line"><span class="comment">     * 1.没有parent,不需要处理其他节点，deleteNode.right</span></span><br><span class="line"><span class="comment">     * 2.有parent,需要处理其他节点，deleteNode.right.left.left.left</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (parent !== <span class="literal">null</span>) &#123;</span><br><span class="line">      parent.left = current.right</span><br><span class="line">      current.right = parent</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    current.left = deleteNode.left</span><br><span class="line">    <span class="keyword">return</span> current</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * current做一个双孩子节点，此处统一使用后继去代理</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">let</span> succeedNode = getSucceedNode(current)</span><br><span class="line">  <span class="keyword">if</span> (current === <span class="keyword">this</span>.root) &#123;</span><br><span class="line">    <span class="keyword">this</span>.root = succeedNode</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  parent[childrenDirection] = succeedNode</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bst = <span class="keyword">new</span> BinarySearchTree()</span><br><span class="line">bst.insert(<span class="number">10</span>)</span><br><span class="line">bst.insert(<span class="number">5</span>)</span><br><span class="line">bst.insert(<span class="number">15</span>)</span><br><span class="line">bst.insert(<span class="number">3</span>)</span><br><span class="line">bst.insert(<span class="number">7</span>)</span><br><span class="line">bst.insert(<span class="number">12</span>)</span><br><span class="line"><span class="built_in">console</span>.log(bst)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> preOrderTraversalList = []</span><br><span class="line">bst.preOrderTraversal(<span class="function"><span class="params">key</span> =&gt;</span> preOrderTraversalList.push(key))</span><br><span class="line"><span class="built_in">console</span>.log(preOrderTraversalList)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> midOrderTraversalList = []</span><br><span class="line">bst.midOrderTraversal(<span class="function"><span class="params">key</span> =&gt;</span> midOrderTraversalList.push(key))</span><br><span class="line"><span class="built_in">console</span>.log(midOrderTraversalList)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postOrderTraversalList = []</span><br><span class="line">bst.postOrderTraversal(<span class="function"><span class="params">key</span> =&gt;</span> postOrderTraversalList.push(key))</span><br><span class="line"><span class="built_in">console</span>.log(postOrderTraversalList)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'max'</span>, bst.max())</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'min'</span>, bst.min())</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bst.search(<span class="number">10</span>))</span><br><span class="line"><span class="built_in">console</span>.log(bst.search(<span class="number">12</span>))</span><br><span class="line"><span class="built_in">console</span>.log(bst.search(<span class="number">11</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bst.delete(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = []</span><br><span class="line">bst.preOrderTraversal(<span class="function"><span class="params">key</span> =&gt;</span> result.push(key))</span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js实现简易HashTable</title>
      <link href="/2019/11/07/js%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93HashTable/"/>
      <url>/2019/11/07/js%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93HashTable/</url>
      
        <content type="html"><![CDATA[<p>哈希表，既想应用数组取数据的方便，但是有想避免在操作数组的时候，由于按照顺序，所以导致数组内会频繁的增加，删除元素，所以数组内的数据会频繁的变换原有的位置，诸多的不同，所以诞生出了hashTable这种数据结构</p><p>其本身就是一个数组，只不过这个数组不在使用原有的下标值来标识元素，而是采用每一个数据的key,通过一个hash函数来转换为下标值，对外界来说，就是使用key来将数据存储在数组中</p><h2 id="Hash函数-生成编码-压缩-哈希化"><a href="#Hash函数-生成编码-压缩-哈希化" class="headerlink" title="Hash函数(生成编码 + 压缩,哈希化)"></a>Hash函数(生成编码 + 压缩,哈希化)</h2><p>hash函数就是将所对应的key,转换为所对应的相对唯一的一个函数值，其通常采用的是如下的方式进行转换</p><h3 id="采用质数"><a href="#采用质数" class="headerlink" title="采用质数"></a>采用质数</h3><p>在数论中的研究发现，使用质数会有很好的唯一性，等其他的特性</p><h3 id="霍纳法则（秦九韶算法）"><a href="#霍纳法则（秦九韶算法）" class="headerlink" title="霍纳法则（秦九韶算法）"></a>霍纳法则（秦九韶算法）</h3><blockquote><p>与我国古代，就有了秦九韶算法，基本思路与霍纳法则一致</p></blockquote><p>也就是多项式的分解。普通多项式，O(n^2)乘法，O(n)加法，改进后O(n)乘法，O(n)加法。</p><h3 id="使用同一编码格式"><a href="#使用同一编码格式" class="headerlink" title="使用同一编码格式"></a>使用同一编码格式</h3><p>在javascript中，使用unicode,即<code>charCodeAt()</code></p><h3 id="压缩，哈希化"><a href="#压缩，哈希化" class="headerlink" title="压缩，哈希化"></a>压缩，哈希化</h3><p>通常生成的数组下标，可能几十万，上百万，但是数组并未有那么多元素，所以适当压缩即可。（虽然还是有可能压缩，但是相同的概率大大变小）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大部分采用37这个质数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * str e.g</span></span><br><span class="line"><span class="comment"> * s -&gt; 115</span></span><br><span class="line"><span class="comment"> * t -&gt; 116</span></span><br><span class="line"><span class="comment"> * r -&gt; 114</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="number">114</span> * <span class="number">37</span>^<span class="number">2</span> + <span class="number">116</span> * <span class="number">37</span>^<span class="number">1</span> + <span class="number">114</span> * <span class="number">37</span>^<span class="number">0</span></span><br><span class="line">      code = ((<span class="number">114</span> * <span class="number">37</span>) + <span class="number">116</span>) * <span class="number">37</span> + <span class="number">114</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用压缩化</span></span><br><span class="line"><span class="comment">// 使用容量取模操作即可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hashIndex = code &amp; size</span><br></pre></td></tr></table></figure><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>在进行hash函数的时候，尽可能的保证每一个key所对应的hash值是唯一的，但是还是会有冲突的情况，这里主要有两种解决方式</p><h3 id="链地址法"><a href="#链地址法" class="headerlink" title="链地址法"></a>链地址法</h3><p>hashTable中每一个位置不存储具体的数值，而是采用一个数组/链表，依次放入数据，当有冲突发生时紧跟在后面即可，这样的方式对于解决冲突是比较简单的，对于发生冲突时，数据压入位置也是有讲究的</p><p>压入头部，建议采用链表，比如最新压入的数据是变化最频繁的，</p><p>压入尾部，建议采用数组/链表,比如微信新增的好友联系是比较少的，相对于老朋友。</p><h3 id="开放地址法"><a href="#开放地址法" class="headerlink" title="开放地址法"></a>开放地址法</h3><ul><li>线性探测</li><li>二次探测</li><li>再哈希法</li></ul><p>也即发生冲突的时候，采用适当的原则寻找下一个位置，但是这种方式可能会造成聚集的现象，比如线性探测法，对于一组连续的数据，冲突放下一位等，这样一来就可能会有一段空间是集中存在数据的，这对哈希表性能是会有一定程度的影响。</p><p>在查找数据的时候，要按照放数据的方式，再次查找直到找到null为止，并且当有数据删除的时候，不能置为null,这会对后面的数据产生影响，应该用其他标志来表示。</p><h3 id="承载因子（loaderFactor）"><a href="#承载因子（loaderFactor）" class="headerlink" title="承载因子（loaderFactor）"></a>承载因子（loaderFactor）</h3><p>表示当前的元素所占的位置，<code>count / limit</code>，链地址法可超过1，因为实际的限制并没有盛放元素。对于开放地址法，<code>0 &gt; loadeFactor &gt; 1</code>,因为他实际承载的元素都是放在容器中的</p><p><code>loaderFactory &lt; 0.25</code>，要进行<strong>缩容</strong>操作，此时元素过少，也会影响性能。</p><p><code>0.75 &lt; loaderFactory</code>，要进行<strong>扩容</strong>操作，此时元素过多，也会影响性能。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * hash表结构</span></span><br><span class="line"><span class="comment"> * 此处采用链地址法来进行查找</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HashTable</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.storage = []</span><br><span class="line">  <span class="keyword">this</span>.count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">this</span>.limit = <span class="number">7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取该key在hashTable中的数组下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">HashTable.prototype.hashIndex = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> hashCode = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; key.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">    hashCode += <span class="number">37</span> * hashCode + key.charCodeAt(i)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> hashIndex = hashCode % <span class="keyword">this</span>.limit</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> hashIndex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过key，将data数据放入hashTable中</span></span><br><span class="line"><span class="comment"> * 如果key相同，则会覆盖数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">HashTable.prototype.put = <span class="function"><span class="keyword">function</span> (<span class="params">key, data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1.获取在hashTable中的数组下标</span></span><br><span class="line">  <span class="keyword">const</span> hashIndex = <span class="keyword">this</span>.hashIndex(key)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.获取bucket，获取链</span></span><br><span class="line">  <span class="keyword">let</span> bucket = <span class="keyword">this</span>.storage[hashIndex]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.初始化操作</span></span><br><span class="line">  <span class="keyword">if</span> (!bucket) &#123;</span><br><span class="line">    bucket = []</span><br><span class="line">    <span class="keyword">this</span>.storage[hashIndex] = bucket</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> isUpdate = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4.判断是否是修改操作</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tuple = bucket[i]</span><br><span class="line">    <span class="keyword">if</span> (tuple[<span class="number">0</span>] === key) &#123;</span><br><span class="line">      tuple[<span class="number">1</span>] = data</span><br><span class="line">      isUpdate = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 此时是新增操作</span></span><br><span class="line">  <span class="keyword">if</span> (isUpdate === <span class="literal">false</span>) &#123;</span><br><span class="line">    bucket.push([key, data])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 扩容</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.count &gt; <span class="keyword">this</span>.limit * <span class="number">0.75</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到扩大2倍后，最近的一个质数</span></span><br><span class="line">    <span class="keyword">const</span> nextLimit = <span class="keyword">this</span>.nextPrime(<span class="keyword">this</span>.limit * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">this</span>.resize(nextLimit)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获得某个数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">HashTable.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1.获取在hashTable中的数组下标</span></span><br><span class="line">  <span class="keyword">const</span> hashIndex = <span class="keyword">this</span>.hashIndex(key)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.获取bucket，获取链</span></span><br><span class="line">  <span class="keyword">let</span> bucket = <span class="keyword">this</span>.storage[hashIndex]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!bucket) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回该数据</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tuple = bucket[i]</span><br><span class="line">    <span class="keyword">if</span> (tuple[<span class="number">0</span>] === key) &#123;</span><br><span class="line">      <span class="keyword">return</span> tuple[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 未找到数据</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除某个元素</span></span><br><span class="line"><span class="comment"> * 返回删除的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">HashTable.prototype.delete = <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1.获取在hashTable中的数组下标</span></span><br><span class="line">  <span class="keyword">const</span> hashIndex = <span class="keyword">this</span>.hashIndex(key)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.获取bucket，获取链</span></span><br><span class="line">  <span class="keyword">let</span> bucket = <span class="keyword">this</span>.storage[hashIndex]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!bucket) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> deleteElement = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bucket.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tuple = bucket[i]</span><br><span class="line">    <span class="keyword">if</span> (tuple[<span class="number">0</span>] === key) &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 删除元素</span></span><br><span class="line">      bucket.splice(i, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">      deleteElement = tuple[<span class="number">1</span>]</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!deleteElement) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.count -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缩容,最少容量为7</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.count &lt; <span class="keyword">this</span>.limit * <span class="number">0.25</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到缩小2倍后，最近的一个质数,并且不能小于7的容量</span></span><br><span class="line">    <span class="keyword">let</span> nextLimit = <span class="keyword">this</span>.nextPrime(<span class="built_in">Math</span>.floor( <span class="keyword">this</span>.limit / <span class="number">2</span>))</span><br><span class="line">    nextLimit = nextLimit &lt;= <span class="number">7</span> ? <span class="number">7</span> : nextLimit</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.resize(nextLimit)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> deleteElement</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 改变容量操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">HashTable.prototype.resize = <span class="function"><span class="keyword">function</span> (<span class="params">size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> oldStorage = <span class="keyword">this</span>.storage</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.storage = []</span><br><span class="line">  <span class="keyword">this</span>.count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">this</span>.limit = size</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历oldStorage中每一bucket,并依次添加过去</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oldStorage.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> bucket = oldStorage[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!bucket) &#123;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次存入</span></span><br><span class="line">    bucket.forEach(<span class="function">(<span class="params">[key, data]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.put(key, data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工具方法，判断是否为一个质数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">HashTable.prototype.isPrime = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> sqrtNum = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.sqrt(num))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= sqrtNum; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num % i === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获得最为相近的质数，为向后查找</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">HashTable.prototype.nextPrime = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (!<span class="keyword">this</span>.isPrime(num)) &#123;</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hashTable = <span class="keyword">new</span> HashTable()</span><br><span class="line"></span><br><span class="line">hashTable.put(<span class="string">'key1'</span>, <span class="string">'value1'</span>)</span><br><span class="line">hashTable.put(<span class="string">'key2'</span>, <span class="string">'value2'</span>)</span><br><span class="line">hashTable.put(<span class="string">'key1'</span>, <span class="string">'value11'</span>)</span><br><span class="line">hashTable.put(<span class="string">'key3'</span>, <span class="string">'value3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hashTable.get(<span class="string">'key1'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(hashTable.get(<span class="string">'key2'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hashTable.get(<span class="string">'key3'</span>))</span><br><span class="line">hashTable.delete(<span class="string">'key3'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(hashTable.get(<span class="string">'key3'</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Promise简单实现</title>
      <link href="/2019/11/04/Promise%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/11/04/Promise%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Promise/A+规范是Promise实现的准则，这里只是准备了最基本的相关功能</p></blockquote><h1 id="简易版异步实现"><a href="#简易版异步实现" class="headerlink" title="简易版异步实现"></a>简易版异步实现</h1><p>我们需要在Promise内部定义我们要操纵的异步方法，并且在then中给他注册回调，也就是当我们使用resolve的时候，他才会执行回调</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.error = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.onFulfilled = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.onRejected = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">    <span class="keyword">this</span>.onFulfilled(<span class="keyword">this</span>.value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.error = error</span><br><span class="line">    <span class="keyword">this</span>.onRejected(<span class="keyword">this</span>.error)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fn(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPromise.prototype.then = <span class="function">(<span class="params">onFulfilled, onRejected</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.onFulfilled = onFulfilled</span><br><span class="line">  <span class="keyword">this</span>.onRejected = onRejected</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// fetch</span></span><br><span class="line">  resolve(data)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当then注册完回调之后，等待resolve函数执行后，会自动触发回调</p><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><ol><li>当执行同步任务的时候，由于异步任务还没有被注册，从而导致了异步回调尚未注册，就执行了（面临报错等）</li><li>当多个Promise链式调用的时候,then里注册的都是第一个Promise,但是我们实际想要的做法却是，每一个Promise注册一个then<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p1      p2       p3       </span><br><span class="line">p1.then(f1).then(f2).then(f3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本意，f1做p1的回调注册，f2做p2的回调注册，f3做p3的回调注册</span></span><br><span class="line"><span class="comment">// 但是由于链式调用返回的是自身，所以无法进行链式调用</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>jQuery中，链式调用值得是返回他自身，因为jQuery作为一个工具，返回自身并没有问题，但是Promise对象，每一个状态都应该是一个独立的，所以链式调用时，不能返回自身，应该返回对应的产生新的Promise</p></blockquote><ol start="3"><li>固化实例，Promise的状态一旦改变，并不能再次发生改变<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// fetch</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 只有resolve会执行，因为状态被固化了</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  resolve()</span><br><span class="line">  reject()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="基本版的实现"><a href="#基本版的实现" class="headerlink" title="基本版的实现"></a>基本版的实现</h1><blockquote><p>这里将所有的代码写在此处,处于简洁的目的,并不是很健壮,只是将最基本的逻辑列了出来</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 固化状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span></span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">'fulfilled'</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用来传递解析Promise的方法</span></span><br><span class="line"><span class="comment"> * （此方法要最后再看）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> resolvePromise = <span class="function">(<span class="params">proxyPromise, x, resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果当前x是一个Promise对象，则直接绑定回调，待这个Promise执行完毕后，</span></span><br><span class="line"><span class="comment">     * 自己resole掉，这里的resolve,就是proxyPromise的resolve</span></span><br><span class="line"><span class="comment">     * 再调用proxyPromise，也就是让新生成的Promise继续走下去</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    x.then(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果当前x是一个普通的值，就说明上一个Promise只是返回一个同步结果</span></span><br><span class="line"><span class="comment">     * 那么我们刚刚包裹的那层Promise其实就是多余的（只是通用性，我们都包裹方便）</span></span><br><span class="line"><span class="comment">     * 立马放行即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    resovle(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">  self.value = <span class="literal">null</span></span><br><span class="line">  self.error = <span class="literal">null</span></span><br><span class="line">  self.status = PENDING</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 由于我们只会使用上一个的Promise的状态，但是其回调函数又是再then中创建的那个Promise调用的，</span></span><br><span class="line"><span class="comment">   * 所以此处仅仅什么也没有，后文使用之处也仅仅都是用到self.value, self.error而已，至于回调函数</span></span><br><span class="line"><span class="comment">   * 都会绑定到下一个Promise上</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  self.onFulfilled = <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">  self.onRejected = <span class="function"><span class="params">error</span> =&gt;</span> &#123; <span class="keyword">throw</span> error &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 固化性，只有PENDING状态才能执行</span></span><br><span class="line">    <span class="keyword">if</span> (self.status === PENDING) &#123;</span><br><span class="line">      self.value = value</span><br><span class="line">      self.status = FULFILLED</span><br><span class="line">      self.onFulfilled(self.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 固化性，只有PENDING状态才能执行</span></span><br><span class="line">    <span class="keyword">if</span> (self.status === PENDING) &#123;</span><br><span class="line">      self.error = error</span><br><span class="line">      self.status = REJECTED</span><br><span class="line">      self.onRejected(self.error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行Promise函数体</span></span><br><span class="line">  fn(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPromise.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">let</span> proxyPromise</span><br><span class="line"></span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="params">error</span> =&gt;</span> &#123; <span class="keyword">throw</span> error &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只有再PENDING状态下才能绑定回调</span></span><br><span class="line">  <span class="keyword">if</span> (self.status === PENDING) &#123;</span><br><span class="line">    proxyPromise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      self.onFulfilled = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 绑定上一个onFulfilled回调函数为then中传递的回调函数</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">          <span class="keyword">let</span> x = onFulfilled(value)</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 将当前的返回值和此处then中生成的proxyPromise做联系</span></span><br><span class="line"><span class="comment">           * 也即确定什么时候可以让这个proxyPromise继续下去</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">          resolvePromise(proxyPromise, x, resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          reject(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      self.onRejected = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = onRejected(error)</span><br><span class="line">          resolvePromise(proxyPromise, x, resovle, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          reject(error)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.status === FULFILLED) &#123;</span><br><span class="line">    <span class="comment">// 此时状态已经变为执行完毕了，直接执行这里的then，只不过需要使用原本存在的value值</span></span><br><span class="line">    proxyPromise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">        resolvePromise(proxyPromise, x, resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.status === REJECTED) &#123;</span><br><span class="line">    <span class="comment">// 此时状态已经变为被拒绝了，直接执行这里的then，只不过需要使用原本存在的error值</span></span><br><span class="line">    proxyPromise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onRejected(self.error)</span><br><span class="line">        resolvePromise(proxyPromise, x, resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        rejected(error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 每次then结束，都会返回也给全新的Promise,并且给下一个then做为回调函数注册的对象</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * p1           p2       p3</span></span><br><span class="line"><span class="comment">   * promise.then(f1).then(f2)</span></span><br><span class="line"><span class="comment">   * 这里生成的p2其实是自动为p3做服务，也就是达到了一种虚假的链式调用效果，我后面一个then调用前一个的结果</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">return</span> proxyPromise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * catch方法其实是一个语法糖，之前onRejected方法默认都写为了 error =&gt; &#123; throw error &#125;</span></span><br><span class="line"><span class="comment"> * 有因为then中生成的代理proxyPromise的reject方法都是再try-catch中执行的，生成的错会被层层抛出，</span></span><br><span class="line"><span class="comment"> * 直到最后一层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyPromise.prototype.catch = <span class="function"><span class="keyword">function</span> (<span class="params">onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.then(<span class="literal">null</span>, onRejected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// fetch </span></span><br><span class="line">  <span class="keyword">const</span> data1 = fetchData1()</span><br><span class="line"></span><br><span class="line">  resolve(data1)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f1 = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理data</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// fetch </span></span><br><span class="line">    <span class="keyword">const</span> data2 = fetchData2()</span><br><span class="line"></span><br><span class="line">    resolve(data2)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f3 = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理data</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// fetch </span></span><br><span class="line">    <span class="keyword">const</span> data3 = fetchData3()</span><br><span class="line"></span><br><span class="line">    resolve(data3)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 只要有一个错误就会被抛到最后</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> handleError = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p.then(f1).then(f2).then(f3).catch(handleError)</span><br></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol><li>要达到使用的链式调用效果，就要每一次then中都应该返回一个新的Promise.这样下一个then才会注册到他</li><li>为了保证所有异步，同步方法都能执行下去，统一进行处理，如果值为promise，则给他注册then,也就是等他这个返回的promise执行完毕后，能够自动触发此处的proxyPromise执行下去，如果发现是一个普通对象，直接resolve掉即可。</li></ol><h2 id="关于健壮性"><a href="#关于健壮性" class="headerlink" title="关于健壮性"></a>关于健壮性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个新的promise,数组遍历，记录执行完的数量，等到所有都执行完毕后，才能resolve大的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyPromise.prototype.all = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> result = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">      promises[i].then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        result[i] = data</span><br><span class="line">        <span class="keyword">if</span> (++count === promises.length) &#123;</span><br><span class="line">          resolve(result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, (error) =&gt; &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个新的promise,数组遍历，只有任意一个promise执行完毕就可以resovle</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyPromise.prototype.race = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">      promises[i].then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(data)</span><br><span class="line">      &#125;, (error) =&gt; &#123;</span><br><span class="line">        rejected(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个立即resovle</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyPromise.prototype.resolve = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resovle(value)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回一个立即reject</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MyPromise.prototype.reject = <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    reject(error)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React错误边界</title>
      <link href="/2019/11/01/React%E9%94%99%E8%AF%AF%E8%BE%B9%E7%95%8C/"/>
      <url>/2019/11/01/React%E9%94%99%E8%AF%AF%E8%BE%B9%E7%95%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在development环境下，会追踪上下文错误执行栈，也即在producetion中，可以看到效果</p></blockquote><h2 id="getDerivedStateFromError"><a href="#getDerivedStateFromError" class="headerlink" title="getDerivedStateFromError"></a>getDerivedStateFromError</h2><p>将当前渲染组件捕获error时，执行此方法，并且返回结果导入到state</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">state = &#123; <span class="attr">hasError</span>: <span class="literal">false</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> getDerivedStateFromError (error) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">hasError</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render () &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state.hasError) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Some Thing wrong<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.props.children</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是在render中使用了一个判断，而这个判断的改变是在获取到错误时触发</p><h2 id="componentDidCatch"><a href="#componentDidCatch" class="headerlink" title="componentDidCatch"></a>componentDidCatch</h2><p>当前的组件捕获到错误的时候，会执行此生命周期函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">componentDidCatch (error, info) &#123;</span><br><span class="line">  <span class="comment">// 上报错误信息</span></span><br><span class="line">  logErrorToService(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用try-catch"><a href="#使用try-catch" class="headerlink" title="使用try-catch"></a>使用<code>try-catch</code></h2><p>该错误边际仅仅处理由渲染引发的问题，也即被<code>ErrorBoundary</code>包裹的部分，事件处理器中还是要使用tryCatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这种情况发生的错误是无法被错误边际捕获的</span></span><br><span class="line">handleToggleError = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件处理中还是要使用try-catch自行处理</span></span><br><span class="line">handelToggleError = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123;handleToggleError&#125;&gt; toggle error &lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React的Render-Prop技术</title>
      <link href="/2019/11/01/React%E7%9A%84Render-Prop%E6%8A%80%E6%9C%AF/"/>
      <url>/2019/11/01/React%E7%9A%84Render-Prop%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p>Render Prop是一种组件使用porps提供的方法去渲染children,外部方便共享内部数据</p><h2 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单渲染子组件</span></span><br><span class="line"><span class="keyword">const</span> LinkerWrapper = <span class="function">(<span class="params">Component</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> currentLink = <span class="string">'www.fe.com'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">Proxy</span> = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Component link=&#123;currentLink&#125; &#123;...props&#125; /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Outer = LinkerWrapper(Nav)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时Outer中就是有link属性的了</span></span><br></pre></td></tr></table></figure><p>这种方法在声明的时候，就已经确定了高阶组件要拓展什么属性</p><h2 id="使用Render-Prop"><a href="#使用Render-Prop" class="headerlink" title="使用Render Prop"></a>使用Render Prop</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Linker = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> currentLink = <span class="string">'www.fe.com'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> props.render(currentLink)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为link属性增加值</span></span><br><span class="line"><span class="keyword">const</span> Outer = (</span><br><span class="line">  &lt;Linker</span><br><span class="line">    render=&#123;(link) =&gt; (<span class="xml"><span class="tag">&lt;<span class="name">Nav</span> <span class="attr">link</span>=<span class="string">&#123;link&#125;/</span>&gt;</span>) &#125;</span></span><br><span class="line"><span class="xml">  /&gt;</span></span><br><span class="line"><span class="xml">)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 为href属性增加值</span></span><br><span class="line"><span class="xml">const Outer = (</span></span><br><span class="line">  &lt;Linker</span><br><span class="line">    render=&#123;(link) =&gt; (&lt;Nav href=&#123;link&#125;/&gt;) &#125;</span><br><span class="line">  /&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这种方式的好处是比较简单，所有的组装都是用的时候才根据需要进行组装，并没有用到其他的特性，就是将一个porps的方法指定为他的子组件渲染的方法</p><h3 id="不一定是Render"><a href="#不一定是Render" class="headerlink" title="不一定是Render"></a>不一定是Render</h3><p>这里仅仅是直观，让人可以一次了解到，这个属性就是将来要渲染的时候，使用的porp方式，也可以使用其他的属性名,仅仅是传递一个方法做children的生成函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Linker = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> currentLink = <span class="string">'www.fe.com'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> props.componentRender(currentLink)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Outer = (</span><br><span class="line">  &lt;Linker</span><br><span class="line">    componentRender=&#123;(currentLink) =&gt; (<span class="xml"><span class="tag">&lt;<span class="name">Nav</span> <span class="attr">href</span>=<span class="string">&#123;link&#125;/</span>&gt;</span>) &#125;</span></span><br><span class="line"><span class="xml">  /&gt;</span></span><br><span class="line"><span class="xml">)</span></span><br></pre></td></tr></table></figure><h2 id="使用children属性"><a href="#使用children属性" class="headerlink" title="使用children属性"></a>使用children属性</h2><p>children属性比较特殊了，它既可以作为porps传递，也可以直接作子元素传递</p><ul><li>porps传递 <code>&lt;Button childre={&#39;click me&#39;} /&gt;</code></li><li>子元素传递 <code>&lt;Button&gt;click me&lt;/Button&gt;</code></li></ul><p>所以可以使用children作为Render Prop的一种形式，更加直观，<em>其实会自动将子元素最为children属性传递下去</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Linker = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> currentLink = <span class="string">'www.fe.com'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> props.children(currentLink)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常作为props属性</span></span><br><span class="line"><span class="keyword">const</span> Outer = (</span><br><span class="line">  &lt;Linker</span><br><span class="line">    children=&#123;(currentLink) =&gt; (<span class="xml"><span class="tag">&lt;<span class="name">Nav</span> <span class="attr">href</span>=<span class="string">&#123;link&#125;/</span>&gt;</span>) &#125;</span></span><br><span class="line"><span class="xml">  /&gt;</span></span><br><span class="line"><span class="xml">)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 作为特殊的props属性</span></span><br><span class="line"><span class="xml">const Outer = (</span></span><br><span class="line">  &lt;Linker&gt;</span><br><span class="line">    &#123;link =&gt; (&lt;Nav href=&#123;link&#125;/&gt;) &#125;</span><br><span class="line">  &lt;/Linker&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="最好使用PropTypes声明出来"><a href="#最好使用PropTypes声明出来" class="headerlink" title="最好使用PropTypes声明出来"></a>最好使用PropTypes声明出来</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Linker.propTypes = &#123;</span><br><span class="line">  childre: PropTypes.func.isRequire</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相同children的顺序问题"><a href="#相同children的顺序问题" class="headerlink" title="相同children的顺序问题"></a>相同children的顺序问题</h3><p>子元素会覆盖children属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;button children=&#123;<span class="string">'props'</span>&#125; /&gt; =&gt; <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>props<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;button&gt;children&lt;<span class="regexp">/button&gt; =&gt; &lt;button&gt;children&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两者都声明的情况下， 最终显示效果为</span></span><br><span class="line">&lt;button children=&#123;<span class="string">'props'</span>&#125;&gt;children&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button&gt;children&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mongoose常用crud</title>
      <link href="/2019/10/22/mongoose%E5%B8%B8%E7%94%A8crud/"/>
      <url>/2019/10/22/mongoose%E5%B8%B8%E7%94%A8crud/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此处均省略了回调函数，可以在末尾使用回调函数，也可以使用await, promise等</p></blockquote><h4 id="mongoose连接mongoDB"><a href="#mongoose连接mongoDB" class="headerlink" title="mongoose连接mongoDB"></a>mongoose连接mongoDB</h4><blockquote><p>node内部提供了一个mongoDB模块，封装效果不如mongoose</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> URL = <span class="string">'mongodb://&lt;username&gt;:&lt;password&gt;@&lt;ip&gt;:&lt;port:27017可省略&gt;/&lt;DBName&gt;'</span></span><br><span class="line">mongoose.connect(URL, &#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`connect mongo success`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'connect mongo failure'</span>, err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="理解mongoose的三个对象"><a href="#理解mongoose的三个对象" class="headerlink" title="理解mongoose的三个对象"></a>理解mongoose的三个对象</h4><blockquote><p>应该有一个Schema-&gt;Model-&gt;Document的过程</p></blockquote><h6 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h6><p>约束对象，用来规范文档的结构的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Schema &#125; = mongoose</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> Schema(&#123; ... &#125;)</span><br></pre></td></tr></table></figure><h6 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h6><p>对应到MongoDB中的集合，也就是之前定义过的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserModel = mongoose.model(<span class="string">'users'</span>, userSchema)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，定义model的名称的时候，mongoose会自动转换成复数</span></span><br><span class="line"><span class="comment">// 简单判断是否s结尾 children -&gt; childrens</span></span><br></pre></td></tr></table></figure><h6 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h6><p>每一个collection中的文档对象，也就是操作的每个存储文档,也就是mongoose取出来的样子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> UserModel(&#123; ... &#125;)</span><br></pre></td></tr></table></figure><h4 id="Model上的curd"><a href="#Model上的curd" class="headerlink" title="Model上的curd"></a>Model上的curd</h4><blockquote><p><code>const UserModel = mongoose.model(&#39;users&#39;, userSchema)</code></p></blockquote><h6 id="create"><a href="#create" class="headerlink" title="create"></a>create</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserModel.create(&#123; ... &#125;)</span><br></pre></td></tr></table></figure><h6 id="find"><a href="#find" class="headerlink" title="find"></a>find</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UserModel.find(conditions, [projection])</span><br><span class="line"><span class="comment">// 无论什么情况都会返回也给数组 []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能挑选显示，或过滤 &#123; email: 1, name: 0 &#125; 报错</span></span><br><span class="line">projection = &#123; <span class="attr">email</span>: <span class="number">1</span> &#125; <span class="comment">// 实际只有email, _id属性</span></span><br><span class="line">projection = &#123; <span class="attr">email</span>: <span class="number">0</span> &#125; <span class="comment">// 其他（除email）所有, _id属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串挑选，有则显示，-_id，可以过滤掉id</span></span><br><span class="line">projection = <span class="string">'email name'</span></span><br></pre></td></tr></table></figure><h6 id="findOne-findById"><a href="#findOne-findById" class="headerlink" title="findOne, findById"></a>findOne, findById</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserModel.findOne(conditions, [projection])</span><br><span class="line">UserModel.findById(id, [projection])</span><br><span class="line"><span class="comment">// 此时会返回 &#123;&#125;, 有多个条件满足，返回第一个对象，找不到为null</span></span><br></pre></td></tr></table></figure><h6 id="count-countDocuments"><a href="#count-countDocuments" class="headerlink" title="count, countDocuments"></a>count, countDocuments</h6><blockquote><p>提示count接口将被弃用，使用<code>Collection.countDocuments</code>替代</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserModel.countDocuments()</span><br><span class="line"><span class="comment">// 直接返回数量</span></span><br></pre></td></tr></table></figure><h6 id="updateMany"><a href="#updateMany" class="headerlink" title="updateMany"></a>updateMany</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UserModel.updateMany(conditions, doc, [projection])</span><br><span class="line"><span class="comment">// 修改多条数据</span></span><br><span class="line"><span class="comment">// 此时返回更新结果 &#123; n: 1, nModified: 1, ok: 1 &#125;， 此时仅仅为替换</span></span><br><span class="line"><span class="comment">// n -&gt; 匹陪 nModified -&gt; 修改的条数</span></span><br></pre></td></tr></table></figure><h6 id="updateOne-update"><a href="#updateOne-update" class="headerlink" title="updateOne, update"></a>updateOne, update</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UserModel.update(conditions, doc, [projection])</span><br><span class="line">UserModel.updateOne(conditions, doc, [projection])</span><br><span class="line"><span class="comment">// 修改一条数据，多条仅为第一个</span></span><br><span class="line"><span class="comment">// 此时返回更新结果 &#123; n: 1, nModified: 1, ok: 1 &#125;， 此时仅仅为替换doc指定</span></span><br><span class="line"><span class="comment">// n -&gt; 匹陪 nModified -&gt; 修改的条数</span></span><br></pre></td></tr></table></figure><h6 id="deleteMany"><a href="#deleteMany" class="headerlink" title="deleteMany"></a>deleteMany</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserModel.deleteMany(&#123;&#125;)</span><br><span class="line"><span class="comment">// 删除所有的数据</span></span><br><span class="line"><span class="comment">// 此时返回删除结果 &#123; n: 1, ok: 1, deletedCount: 1 &#125;</span></span><br></pre></td></tr></table></figure><h6 id="deleteOne"><a href="#deleteOne" class="headerlink" title="deleteOne"></a>deleteOne</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserModel.deleteOne(&#123;&#125;)</span><br><span class="line"><span class="comment">// 删除单个数据，多条仅为第一个</span></span><br><span class="line"><span class="comment">// 此时返回删除结果 &#123; n: 1, ok: 1, deletedCount: 1 &#125;</span></span><br></pre></td></tr></table></figure><h4 id="Document上的curd"><a href="#Document上的curd" class="headerlink" title="Document上的curd"></a>Document上的curd</h4><blockquote><p>这里模拟直接返回了文档对象，实际要据情况而定</p></blockquote><h6 id="set-get-save"><a href="#set-get-save" class="headerlink" title="set, get, save"></a>set, get, save</h6><p>只有保存了之后，才会同步到数据库中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> UserModel.findById(<span class="string">'xxx'</span>)</span><br><span class="line"></span><br><span class="line">user.get(<span class="string">'name'</span>)</span><br><span class="line">user.set(<span class="string">'name'</span>, <span class="string">'newNameValue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改也可以直接`.`操作最后，同步回去即可</span></span><br><span class="line">user.name</span><br><span class="line">user.name = <span class="string">'newNameValue'</span> </span><br><span class="line"></span><br><span class="line">user.save()</span><br><span class="line"><span class="comment">// 此时返回的是更新后的数据，即同步到数据库中</span></span><br></pre></td></tr></table></figure><h6 id="toObject"><a href="#toObject" class="headerlink" title="toObject"></a>toObject</h6><blockquote><p>Document对象可以直接访问<code>id</code>属性指向<code>_id</code>,当转换过后，只有<code>_id</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> UserModel.findById(<span class="string">'xxx'</span>)</span><br><span class="line">user.toObject()</span><br><span class="line"><span class="comment">// 此时返回的是普通js对象，不在具有document的相关方法</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于webpack中proxy跨域</title>
      <link href="/2019/10/20/%E5%85%B3%E4%BA%8Ewebpack%E4%B8%ADproxy%E8%B7%A8%E5%9F%9F/"/>
      <url>/2019/10/20/%E5%85%B3%E4%BA%8Ewebpack%E4%B8%ADproxy%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>主流跨域3中方式<br>1.jsonp<br>2.服务端配合cros<br>3.服务器反向代理<br>主要讨论第三种，反向代理的方式</p></blockquote><h4 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h4><ul><li>API-cgi <code>www.api.com</code></li><li>后端服务器 <code>www.rd.com</code></li><li>前端服务器 <code>www.fe.com</code></li></ul><p>我们的目的是通过，<code>www.fe.com</code>去拿取<code>www.api.com</code>上的资源，但由于跨域，我们需要后端服务器帮我们抓取一下，做一次转发（同源策略只是浏览器制定的）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">发请求： www.fe.com -&gt; www.rd.com -&gt; www.api.com</span><br><span class="line">得响应： www.api.com -&gt; www.rd.com -&gt; www.fe.com</span><br></pre></td></tr></table></figure><h4 id="在devServer中配置代理"><a href="#在devServer中配置代理" class="headerlink" title="在devServer中配置代理"></a>在devServer中配置代理</h4><ul><li>API-cgi <code>www.api.com</code></li><li>前端服务器 <code>www.fe.com</code></li></ul><p>我们使用devServer来搭建一个代理服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config  devServer</span></span><br><span class="line"></span><br><span class="line">devServer: &#123;</span><br><span class="line">  proxy: &#123;</span><br><span class="line">    <span class="string">'/api'</span>: &#123;</span><br><span class="line">      target: <span class="string">'http://www.api.com'</span>,</span><br><span class="line">      <span class="comment">/* 表示重发的请求去除api,此字段是我们加的 */</span></span><br><span class="line">      pathRewrite: &#123;<span class="string">'^/api'</span> : <span class="string">''</span>&#125;,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">/* 如果有https, 可配置此项 */</span></span><br><span class="line">      secure: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="修改发送的请求"><a href="#修改发送的请求" class="headerlink" title="修改发送的请求"></a>修改发送的请求</h4><p>由于我们在开发的时候devServer，所以前端服务器也是假设在devServer，而我们的proxy也是假设在devServer上的，所以我们需要去请求我们的proxy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 本意</span><br><span class="line">发请求： www.fe.com -&gt; www.api.com</span><br><span class="line">得响应： www.api.com -&gt; www.fe.com</span><br><span class="line"></span><br><span class="line"># 修改后</span><br><span class="line">发请求： www.fe.com -&gt; www.fe.com/api</span><br><span class="line">得响应： www.fe.com/api -&gt; www.fe.com</span><br></pre></td></tr></table></figure><p>其实我们请求了fe上的proxy，他会去真正请求<code>www.api.com</code>,之后拿到数据在返还给我们，而我们是不知道的，由于<code>前后都是www.fe.com</code>所以是属于同源的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>引入eslint</title>
      <link href="/2019/10/20/%E5%BC%95%E5%85%A5eslint/"/>
      <url>/2019/10/20/%E5%BC%95%E5%85%A5eslint/</url>
      
        <content type="html"><![CDATA[<blockquote><p>node 8+, npm 3+, 使用其官方的eslint脚手架工具</p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>推荐安装到devDependencies</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add eslint -D</span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局</span></span><br><span class="line">eslint --init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地env</span></span><br><span class="line">./node_modules/.bin/eslint --init</span><br></pre></td></tr></table></figure><h4 id="根据相关的提示安装即可，过程中可能还需要在安装一些其他的包"><a href="#根据相关的提示安装即可，过程中可能还需要在安装一些其他的包" class="headerlink" title="根据相关的提示安装即可，过程中可能还需要在安装一些其他的包"></a>根据相关的提示安装即可，过程中可能还需要在安装一些其他的包</h4><h4 id="eslint插件"><a href="#eslint插件" class="headerlink" title="eslint插件"></a>eslint插件</h4><p>在npm上搜索<code>eslintplugin</code>即可看到相关的eslint插件，选择下载即可,并参照其相关说明，在<code>.eslintrc.json</code>中添加规则即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react中ref相关</title>
      <link href="/2019/10/17/react%E4%B8%ADref%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/10/17/react%E4%B8%ADref%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于React 16.8</p></blockquote><ul><li><p>在挂载ref的时候，如果这个ref是直接挂载到dom上的，那么当组件挂载完成的时候，ref指向的就是DOM示例</p></li><li><p>在挂载ref的时候，如果这个ref是直接挂载到component上的，那么当组件挂载完成的时候，ref指向的就是组件实例</p><ul><li>由于在函数式组件当中，是没有实例的，所以都是通过ref转发直接挂载到具体的dom上</li></ul></li></ul><h2 id="在组件中使用ref"><a href="#在组件中使用ref" class="headerlink" title="在组件中使用ref"></a>在组件中使用ref</h2><p><code>React.createRef()</code>来创建一个ref,然后进行挂载</p><h4 id="类式组件"><a href="#类式组件" class="headerlink" title="类式组件"></a>类式组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component4</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.ref = React.createRef()</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      children,</span><br><span class="line">    &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button</span><br><span class="line">        ref=&#123;node =&gt; <span class="keyword">this</span>.ref = node&#125;</span><br><span class="line">        onClick=&#123;() =&gt; &#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.ref)&#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;children&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Component3 = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    children</span><br><span class="line">  &#125; = props</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ref = React.createRef()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button</span><br><span class="line">      ref=&#123;ref&#125;</span><br><span class="line">      onClick=&#123;() =&gt; &#123;<span class="built_in">console</span>.log(ref)&#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;children&#125;</span><br><span class="line">    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="在父组件使用子组件的ref-传递ref"><a href="#在父组件使用子组件的ref-传递ref" class="headerlink" title="在父组件使用子组件的ref,传递ref"></a>在父组件使用子组件的ref,传递ref</h2><h4 id="在类式组件"><a href="#在类式组件" class="headerlink" title="在类式组件"></a>在类式组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Component1.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component1</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.buttonRef = React.createRef()</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      children,</span><br><span class="line">    &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button</span><br><span class="line">        ref=&#123;node =&gt; <span class="keyword">this</span>.buttonRef = node&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;children&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ App.js</span></span><br><span class="line"><span class="regexp">const App = (props) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  const ref2 = React.createRef()</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 当挂在完成的时候 ref2的指向就是button组件</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;Component2 ref=&#123;ref2&#125;&gt;Component2&lt;/</span>Component2&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时如果要在类式组件中获取到DOM的ref的话，可以通过一种曲线救国的方式，就是组件内部自行挂载一个ref到this实例的对象上，父组件通过访问子组件的Component的Ref对象，找到他相应内部挂载的DOM的ref即可</p><p>比如在上个例子中，我们可以通过<code>ref1.buttonRef</code>拿到button的DOM对象</p><h4 id="在函数式组件"><a href="#在函数式组件" class="headerlink" title="在函数式组件"></a>在函数式组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Component2.js</span></span><br><span class="line"><span class="keyword">const</span> Component2 = React.forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    children</span><br><span class="line">  &#125; = props</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button ref=&#123;ref&#125;&gt;&#123;children&#125;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ App.js</span></span><br><span class="line"><span class="regexp">const App = (props) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  const ref1 = React.createRef()</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 当挂在完成的时候 ref1的指向就是子组件Component1实例</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;Component1 ref=&#123;ref1&#125;&gt;Component1&lt;/</span>Component1&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js原型链相关</title>
      <link href="/2019/10/15/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/10/15/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>首先是<code>__proto__</code>是不推荐使用的，这是大部分浏览器内部使用的一个对象，但是由于大部分浏览器都支持他了，所以ES’被迫’将这个属性写到了附录里面，但是也只是在浏览器环境中支持，其他环境不推荐支持该属性，应该使用<code>Object.getPrototypeOf()</code>来获取对象上的原型</p></blockquote><h2 id="prototype属性"><a href="#prototype属性" class="headerlink" title="prototype属性"></a>prototype属性</h2><blockquote><p>当一个函数被创建的时候，他的原型对象就诞生了</p></blockquote><p>该属性是函数上用来使用的，为什么只有函数才有该属性了，应为js使用对象来new对象的时候，prototype就是指向的他的构造器，所以每一个函数其实都有可能成为一个构造器，可以用来new的，自然他们就需要挂载一个公共的指向对象，用来保存一些公共的方法，用来节省空间。也就有了prototype执行构造器。</p><p>所以<code>__proto__ === prototype === Object.getPrototypeOf()</code></p><blockquote><p><code>new</code>的时候其实就是从Object继承个对象，挂载原型，然后把它绑定构造器执行</p></blockquote><h2 id="什么是原型链"><a href="#什么是原型链" class="headerlink" title="什么是原型链"></a>什么是原型链</h2><p><img src="/img/2019/10/15/1.png" alt="原型链上的关系"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">① foo的构造器<span class="function"><span class="keyword">function</span> <span class="title">Foo</span> (<span class="params"></span>) </span>&#123;&#125; 的原型, Foo.prototype</span><br><span class="line"></span><br><span class="line">② 函数的构造器<span class="function"><span class="keyword">function</span> <span class="title">Function</span> (<span class="params"></span>) </span>&#123;&#125; 的原型,  <span class="built_in">Function</span>.prototype</span><br><span class="line"></span><br><span class="line">③ 对象的构造器<span class="function"><span class="keyword">function</span> <span class="title">Object</span> (<span class="params"></span>) </span>&#123;&#125; 的原型,  <span class="built_in">Object</span>.prototype</span><br><span class="line"></span><br><span class="line">④ 函数的构造器<span class="function"><span class="keyword">function</span> <span class="title">Function</span> (<span class="params"></span>) </span>&#123;&#125; 的原型, <span class="built_in">Function</span>.prototype</span><br><span class="line"></span><br><span class="line">⑤ <span class="function"><span class="keyword">function</span>，由<span class="title">new</span> <span class="title">Function</span>(<span class="params"></span>)创造出来的的构造器<span class="title">function</span> <span class="title">Function</span> (<span class="params"></span>) </span>&#123;&#125; 的原型, <span class="built_in">Function</span>.prototype</span><br><span class="line"></span><br><span class="line">⑥ <span class="function"><span class="keyword">function</span> <span class="title">Function</span> 是最特殊的, 他的原型对象<span class="title">__prop__</span>就是他的<span class="title">proptype</span>对象，也就是 <span class="title">Function</span>.<span class="title">prototype</span></span></span><br></pre></td></tr></table></figure><h4 id="Object-prototype-proto"><a href="#Object-prototype-proto" class="headerlink" title="Object.prototype.__proto__"></a><code>Object.prototype.__proto__</code></h4><p>按道理<code>Object.prototype.__proto__</code>也是一个对象，应该指向Object的构造器的原型即，Object.prototype,但是这样就造成了循环的重复引用，导致寻找一个对象的原型链上的属性方法时，永远找不到尽头,所以为<code>null</code></p><h4 id="prototype与constructor"><a href="#prototype与constructor" class="headerlink" title="prototype与constructor"></a>prototype与constructor</h4><p>构造函数拥有一个prototype属性，指向的是原型对象，然而原型对象上，有一个属性指向的constructor属性指向的是构造器的那个函数</p><h2 id="如何判断一个对象是否在另一个对象的原型链上"><a href="#如何判断一个对象是否在另一个对象的原型链上" class="headerlink" title="如何判断一个对象是否在另一个对象的原型链上"></a>如何判断一个对象是否在另一个对象的原型链上</h2><h4 id="判断是否在我自己的原型链上object-instanceof-constructor"><a href="#判断是否在我自己的原型链上object-instanceof-constructor" class="headerlink" title="判断是否在我自己的原型链上object instanceof constructor"></a>判断是否在<strong>我自己</strong>的原型链上<code>object instanceof constructor</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> fooObject = <span class="keyword">new</span> Foo()</span><br><span class="line"></span><br><span class="line">fooObject <span class="keyword">instanceof</span> Foo <span class="comment">// true</span></span><br><span class="line">fooObject <span class="keyword">instanceof</span> Functino <span class="comment">// false</span></span><br><span class="line">fooObject <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="判断是否在别人的原型链上prototypeObj-isProptotypeOf-object"><a href="#判断是否在别人的原型链上prototypeObj-isProptotypeOf-object" class="headerlink" title="判断是否在别人的原型链上prototypeObj.isProptotypeOf(object)"></a>判断是否在<strong>别人</strong>的原型链上<code>prototypeObj.isProptotypeOf(object)</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> fooObject = <span class="keyword">new</span> Foo()</span><br><span class="line"></span><br><span class="line">Foo.isProptotypeOf(fooObject) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Function</span>.isProptotypeOf(fooObject) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Object</span>.isProptotypeOf(fooObject) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="如何拒绝原型链，只看自己身上的属性hasOwnProperty"><a href="#如何拒绝原型链，只看自己身上的属性hasOwnProperty" class="headerlink" title="如何拒绝原型链，只看自己身上的属性hasOwnProperty"></a>如何拒绝原型链，只看自己身上的属性<code>hasOwnProperty</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"></span><br><span class="line">obj.hasOwnProperty(<span class="string">'age'</span>) <span class="comment">// true</span></span><br><span class="line">obj.hasOwnProperty(<span class="string">'toString'</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="实战（判断对象上的属性）"><a href="#实战（判断对象上的属性）" class="headerlink" title="实战（判断对象上的属性）"></a>实战（判断对象上的属性）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.some = <span class="string">'222'</span></span><br><span class="line">  <span class="keyword">let</span> ccc = <span class="string">'ccc'</span></span><br><span class="line">  foo.okkoro = <span class="string">'okkoro'</span></span><br><span class="line">  foo.prototpye.a = <span class="string">'aaa'</span></span><br><span class="line">&#125;</span><br><span class="line">foo.koro = <span class="string">'koro'</span></span><br><span class="line">foo.prototpye.test = <span class="string">'test1'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo1 = <span class="keyword">new</span> foo ()</span><br><span class="line">foo1.prototpye.test = <span class="string">'test2'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终foo1上的属性（仅说明与此题相关的）</span></span><br><span class="line">foo: &#123;</span><br><span class="line">  some: <span class="string">'222'</span></span><br><span class="line">  __proto__: &#123;</span><br><span class="line">    a: <span class="string">'aaa'</span>,</span><br><span class="line">    test: <span class="string">'test2'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先要明白new的时候，首先从object继承了一个对象过来，然后把当前构造器的原型给他了他，他的原型上就有了a,之后又手动挂载了一个test,(后面被修改掉了，因为总是指向的关系)</p><p>在实际的属性上，foo1仅有some一个属性，也就是构造函数中this的效果</p><p>至于okkoro,koro这两个属性仅仅是foo的静态属性，通过foo1是无法访问到的，因为foo1和foo的关系仅仅是原型对象上的关系，实际挂载的属性是不相联系的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx配置spa前端工程</title>
      <link href="/2019/10/13/nginx%E9%85%8D%E7%BD%AEspa%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B/"/>
      <url>/2019/10/13/nginx%E9%85%8D%E7%BD%AEspa%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>spa应用最终打包的dist中，是会以index.html作为入口文件，如果一旦使用browserURL的这种方式来做路由的跳转，那么在部署的时候，可能会出现以下问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">www.blog.com</span><br><span class="line"></span><br><span class="line">在正常情况下,在应用内，跳转式没问题的</span><br><span class="line">www.blog.com/profie</span><br><span class="line">www.blog.com/artcile</span><br><span class="line"></span><br><span class="line">如果是刷新网页，服务器就会提示。profile资源不存在，这是由于路由导致的，我们在spa内解析的路由没有正确的被识别，反而当成了一种资源</span><br></pre></td></tr></table></figure><p>在nginx的配置文件中，要使用如下的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen       8080;</span><br><span class="line">      server_name  localhost;</span><br><span class="line">      root /usr/project/dist;</span><br><span class="line">      index index.html;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">          try_files $uri $uri/ @router;</span><br><span class="line">          index index.html;</span><br><span class="line">          proxy_set_header   Host             $host;</span><br><span class="line">          proxy_set_header   X-Real-IP        $remote_addr;</span><br><span class="line">          proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">          proxy_set_header   X-Forwarded-Proto  $scheme;</span><br><span class="line">      &#125;</span><br><span class="line">      location @router &#123;</span><br><span class="line">          rewrite ^.*$ /index.html break;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js中EventLoop相关</title>
      <link href="/2019/10/13/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3EventLoop/"/>
      <url>/2019/10/13/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3EventLoop/</url>
      
        <content type="html"><![CDATA[<p><strong>浏览器中的EventLoop与node中的EventLoop是不同的</strong></p><p>在js中，是单线程的，所以只能把任务放进一个任务队列中，依次调用这个队列来完成所有事情</p><blockquote><p>可以想象成js就是一个公交车，所有的任务过来先排队，等到了时间公交车会过来一趟拉走，此时不管现在是什么情况，他只会将当前的人拉走，至于还没有到的人就只能等下一趟公交车。</p></blockquote><h4 id="如何执行异步操作的"><a href="#如何执行异步操作的" class="headerlink" title="如何执行异步操作的"></a>如何执行异步操作的</h4><p>当执行到异步任务的时候，首先他会将此任务交给 <code>Event table</code>去处理，等到异步操作结束的时候，再压入任务队列<code>task queen</code>,所以在事件循环的时候，他并不会去了解这个任务是否经完成（公交司机，见有人他就拉走，如果那个人有事暂时还来不了，那就等下一班车，以此类推），所以一旦任务完成，就将注册的回调任务压入任务队列，EventLoop做完当前任务队列的事情时候，再来执行他</p><h6 id="setTimeout的问题"><a href="#setTimeout的问题" class="headerlink" title="setTimeout的问题"></a>setTimeout的问题</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此时执行下来总耗时4731</span></span><br><span class="line"><span class="keyword">let</span> startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`开始执行回调的相隔时差：<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()-startTime&#125;</span>`</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="number">40000</span>;i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果将setTimeout的延时去除 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时执行下来总耗时4698</span></span><br><span class="line"><span class="keyword">let</span> startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`开始执行回调的相隔时差：<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()-startTime&#125;</span>`</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="number">40000</span>;i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到运行的时间并没有由于运行结果而改变，是因为此时的timeout在压入<code>task queen</code>的时候，主线程还有任务没有执行完，所以也就造成了当前已经有新任务压入了，但是没有来得及运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">任务比较空的时候，会得到及时的相应</span><br><span class="line"></span><br><span class="line">主线程  任务队列</span><br><span class="line"> 1   |</span><br><span class="line"> 2   |</span><br><span class="line">     |  </span><br><span class="line">     |  3</span><br><span class="line"> 3   | </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">任务比较满的时候，造成了延迟，定时器不准</span><br><span class="line"></span><br><span class="line">主线程  任务队列</span><br><span class="line"> 1   |</span><br><span class="line"> 1   |</span><br><span class="line"> 1   |  </span><br><span class="line"> 1   |  2</span><br><span class="line"> 1   | </span><br><span class="line"> 1   |</span><br><span class="line"> 1   |</span><br><span class="line"> 2   |</span><br></pre></td></tr></table></figure><h4 id="micro-task-amp-macro-task"><a href="#micro-task-amp-macro-task" class="headerlink" title="micro-task &amp; macro-task"></a>micro-task &amp; macro-task</h4><p>除去同步，异步的角度来看，还可以分为微任务（除去Process.nextTick、Promise.then catch finally(注意我不是说 Promise)、MutationObserver），其他都可以当做宏任务。<br><strong>mirco-task的好处就是，他可以插队，如果有个setTimeout，已经执行完了，在quenTask中等待了，promise.then可以先与他执行</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// script start</span></span><br><span class="line"><span class="comment">// promise1</span></span><br><span class="line"><span class="comment">// promise2</span></span><br><span class="line"><span class="comment">// setTimeout</span></span><br></pre></td></tr></table></figure><h4 id="node则将EventLoop分为6个阶段（依次循环），其中每一个阶段都是一类的marco-task的task-queue"><a href="#node则将EventLoop分为6个阶段（依次循环），其中每一个阶段都是一类的marco-task的task-queue" class="headerlink" title="node则将EventLoop分为6个阶段（依次循环），其中每一个阶段都是一类的marco-task的task queue"></a>node则将EventLoop分为6个阶段（依次循环），其中每一个阶段都是一类的marco-task的task queue</h4><ul><li>timers： 执行setTimeout, setInterval中的到期的callback</li><li>pending callback: 上一轮循环中少数的I/O,callbcak会延迟到这里执行</li><li>idle,prepare: 仅在内部使用</li><li>poll 最为重要的阶段，执行I/O等，callback</li><li>check 执行setImmediate的callback</li><li>close 执行close的callback事件</li></ul><h6 id="timers"><a href="#timers" class="headerlink" title="timers"></a>timers</h6><p>虽然定时器任然是不准确的，但是将timers放到了EventLoop的最前面，也是为了保证，尽量准时执行定时器任务</p><h6 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h6><ul><li><p>执行I/O,callback</p></li><li><p>处理<code>poll queue</code>中的task任务</p><ul><li>task有任务，执行他，一直到队列为空或者系统相关限制</li><li>task为空，会去看是否有setImmediate,有则直接跳到check，否则在这里阻塞等待</li></ul></li><li><p>其他的一些阶段会有特殊执行，比如socket,close的时候，就会到close去执行</p></li></ul><h4 id="process-nextTick"><a href="#process-nextTick" class="headerlink" title="process.nextTick"></a>process.nextTick</h4><p>他是一个终极插队王，比micro-task还厉害</p><h5 id="关于micro-task与macro-task"><a href="#关于micro-task与macro-task" class="headerlink" title="关于micro-task与macro-task"></a>关于micro-task与macro-task</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//node</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'3'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'4'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'5'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'6'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'7'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'8'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'9'</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'10'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'11'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'12'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1  </span></span><br><span class="line"><span class="comment">// 7  </span></span><br><span class="line"><span class="comment">// 6  </span></span><br><span class="line"><span class="comment">// 8  </span></span><br><span class="line"><span class="comment">// 2  </span></span><br><span class="line"><span class="comment">// 4  </span></span><br><span class="line"><span class="comment">// 9  </span></span><br><span class="line"><span class="comment">// 11 </span></span><br><span class="line"><span class="comment">// 3  </span></span><br><span class="line"><span class="comment">// 10 </span></span><br><span class="line"><span class="comment">// 5  </span></span><br><span class="line"><span class="comment">// 12 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// chrome </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'4'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'5'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'7'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'8'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'9'</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'11'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'12'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 11</span></span><br><span class="line"><span class="comment">// 12</span></span><br></pre></td></tr></table></figure><p>至于node中，setTimeout中是同一类的macro-task，所以他们会全部执行完，等待切换的时候，在执行micro-task,然而在chrome中，每一个macro-task是单独执行的，所以每一个任务执行完的时候，都有机会去做macro-task</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>部署yapi与使用守护进程supervisor</title>
      <link href="/2019/10/10/%E9%83%A8%E7%BD%B2yapi/"/>
      <url>/2019/10/10/%E9%83%A8%E7%BD%B2yapi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>多款API文档管理工具都体验了一下，从开源以及后期维护来说，yapi确实是不错的选择，由去哪前端团队出品，并且一直在维护，虽然相比同行业eolinker来说，还是有一定距离，但是对于内网部署，使用来说，yapi确实是不错的选择了。</p></blockquote><h2 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h2><ol><li><p>配置阿里yum源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加源</span></span><br><span class="line">vim mongodb-org.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># mongodb-org.repo</span></span><br><span class="line">[mongodb-org]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=http://mirrors.aliyun.com/mongodb/yum/redhat/7Server/mongodb-org/3.2/x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></li><li><p>更新yum源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure></li></ol><p>3.安装MongoDB<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mongodb-org</span><br><span class="line">service mongod start</span><br></pre></td></tr></table></figure></p><h2 id="安装YApi部署cli"><a href="#安装YApi部署cli" class="headerlink" title="安装YApi部署cli"></a>安装YApi部署cli</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yapi-cli --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="使用页面配置（打开9090端口）"><a href="#使用页面配置（打开9090端口）" class="headerlink" title="使用页面配置（打开9090端口）"></a>使用页面配置（打开9090端口）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yapi server</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim config.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建议使用163邮箱，效果比较好</span></span><br><span class="line"> <span class="string">"mail"</span>: &#123;</span><br><span class="line">     <span class="string">"enable"</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="string">"host"</span>: <span class="string">"smtp.163.com"</span>,</span><br><span class="line">     <span class="string">"port"</span>: 465,</span><br><span class="line">     <span class="string">"from"</span>: <span class="string">"可用于发送邮件的163邮箱"</span>,</span><br><span class="line">     <span class="string">"auth"</span>: &#123;</span><br><span class="line">         <span class="string">"user"</span>: <span class="string">"163邮箱"</span>,</span><br><span class="line">         <span class="string">"pass"</span>: <span class="string">"163邮箱对应的密码或授权码"</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>切换到安装目录下，使用node启动服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node vendors/server/app.js</span><br></pre></td></tr></table></figure></p><p>总的来说安装还是很简单的，是一款非常不错的工具，并且安装也很容易</p><h2 id="使用Supervisor守护"><a href="#使用Supervisor守护" class="headerlink" title="使用Supervisor守护"></a>使用Supervisor守护</h2><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install python-setuptools -y</span><br><span class="line">easy_install supervisor</span><br></pre></td></tr></table></figure><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">mkdir /etc/supervisor</span><br><span class="line"><span class="comment"># 创建模板文件</span></span><br><span class="line">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</span><br><span class="line"><span class="comment"># 添加自定义配置</span></span><br><span class="line">vim /etc/supervisor/supervisord.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># supervisord.conf 追加，加载目录下的文件</span></span><br><span class="line">[include]</span><br><span class="line">files = conf.d/*.conf</span><br></pre></td></tr></table></figure><h4 id="增加YApi-conf"><a href="#增加YApi-conf" class="headerlink" title="增加YApi.conf"></a>增加YApi.conf</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/supervisor/conf.d/YApiGhost.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># YApiGhost.conf</span></span><br><span class="line">[program: YApiGhost]</span><br><span class="line"><span class="built_in">command</span>=node vendors/server/app.js</span><br><span class="line">directory=/usr/yapi/yapi</span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">stderr_logfile=/var/<span class="built_in">log</span>/YApiGhost.err.log</span><br><span class="line">stdout_logfile=/var/<span class="built_in">log</span>/YApiGhost.out.log</span><br><span class="line">user=root</span><br><span class="line">stopsignal=INT</span><br></pre></td></tr></table></figure><h4 id="启动守护进程"><a href="#启动守护进程" class="headerlink" title="启动守护进程"></a>启动守护进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord -c /etc/supervisor/supervisord.conf</span><br></pre></td></tr></table></figure><h4 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/supervisord.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># supervisord.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Supervisor daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/bin/supervisord -c /etc/supervisor/supervisord.conf</span><br><span class="line">ExecStop=/usr/bin/supervisorctl shutdown</span><br><span class="line">ExecReload=/usr/bin/supervisorctl reload</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=42s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="设置开机启动-1"><a href="#设置开机启动-1" class="headerlink" title="设置开机启动"></a>设置开机启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> supervisord</span><br></pre></td></tr></table></figure><h4 id="使用supervisorctl管理"><a href="#使用supervisorctl管理" class="headerlink" title="使用supervisorctl管理"></a>使用supervisorctl管理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启</span></span><br><span class="line">supervisord -c /etc/supervisor/supervisord.conf</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">supervisorctl shutdown</span><br><span class="line"></span><br><span class="line">supervisorctl</span><br><span class="line"></span><br><span class="line">stop    &lt;Service name&gt;</span><br><span class="line">start   &lt;Service name&gt;</span><br><span class="line">restart &lt;Service name&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>不适合使用箭头函数的场景</title>
      <link href="/2019/10/10/%E4%B8%8D%E9%80%82%E5%90%88%E4%BD%BF%E7%94%A8%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E5%9C%BA%E6%99%AF/"/>
      <url>/2019/10/10/%E4%B8%8D%E9%80%82%E5%90%88%E4%BD%BF%E7%94%A8%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>箭头函数无法绑定this<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn1 = <span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(p)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params">p</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(p)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn1.apply(&#123;<span class="attr">name</span>: <span class="string">'zzz'</span>&#125;, [<span class="string">'fn1'</span>])  <span class="comment">// fn1 undefined</span></span><br><span class="line">fn2.apply(&#123;<span class="attr">name</span>: <span class="string">'zzz'</span>&#125;, [<span class="string">'fn2'</span>]) <span class="comment">// fn2 &#123; name: 'zzz' &#125;</span></span><br><span class="line"></span><br><span class="line">fn1.call(&#123;<span class="attr">name</span>: <span class="string">'zzz'</span>&#125;, <span class="string">'fn1'</span>)  <span class="comment">// fn1 undefined</span></span><br><span class="line">fn2.call(&#123;<span class="attr">name</span>: <span class="string">'zzz'</span>&#125;, <span class="string">'fn2'</span>) <span class="comment">// fn2 &#123; name: 'zzz' &#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="在对象内使用需要注意的"><a href="#在对象内使用需要注意的" class="headerlink" title="在对象内使用需要注意的"></a>在对象内使用需要注意的</h4><h6 id="定义字面量的方法"><a href="#定义字面量的方法" class="headerlink" title="定义字面量的方法"></a>定义字面量的方法</h6><p>在对象内定义方法的时候，如果该方案使用到了this，那么则需为传统函数的形式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误的使用</span></span><br><span class="line"><span class="keyword">const</span> calculator = &#123;</span><br><span class="line">  array: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  sum: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// this指向的是外部window对象 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.array.reduce(<span class="function">(<span class="params">result, item</span>) =&gt;</span> result + item, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的使用</span></span><br><span class="line"><span class="keyword">const</span> calculator = &#123;</span><br><span class="line">  array: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  sum1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// 指向对象本身</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.array.reduce(<span class="function">(<span class="params">result, item</span>) =&gt;</span> result + item, <span class="number">0</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  sum2 () &#123; <span class="comment">// 和上面是一样的</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// 指向对象本身</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.array.reduce(<span class="function">(<span class="params">result, item</span>) =&gt;</span> result + item, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="定义原型上的方法"><a href="#定义原型上的方法" class="headerlink" title="定义原型上的方法"></a>定义原型上的方法</h6><p>原型上定义的方法，有时目的就是取到对象this，进行操作，也不能使用箭头函数的形式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的使用方式</span></span><br><span class="line">Cat.prototype.sayCatName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// cat实例</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误的使用方式</span></span><br><span class="line">Cat.prototype.sayCatName = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// =&gt; window</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name; <span class="comment">// 外部取不到就会报错</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="定义事件的回调函数上"><a href="#定义事件的回调函数上" class="headerlink" title="定义事件的回调函数上"></a>定义事件的回调函数上</h4><p>因为回调函数目的是当前的对象，在之后还能调用它，也就是强烈需要this的信息<br>当时用了箭头函数的时候，会丢失this<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="built_in">document</span>.getElementById(<span class="string">'myButton'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误的使用</span></span><br><span class="line">button.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// =&gt; window</span></span><br><span class="line">  <span class="keyword">this</span>.innnerHTML = <span class="string">'new Button Text'</span> <span class="comment">// 报错，此时window无innerHTML属性</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的使用</span></span><br><span class="line">button.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// =&gt; button</span></span><br><span class="line">  <span class="keyword">this</span>.innnerHTML = <span class="string">'new Button Text'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="定义构造函数"><a href="#定义构造函数" class="headerlink" title="定义构造函数"></a>定义构造函数</h4><p>箭头函数定义在构造函数中是没有意义的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误使用</span></span><br><span class="line"><span class="keyword">const</span> Fish = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Fish(<span class="string">'feifei'</span>)) <span class="comment">// 报错，Fish不是构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确使用</span></span><br><span class="line"><span class="keyword">const</span> Dog = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Dog(<span class="string">'heihei'</span>))</span><br></pre></td></tr></table></figure></p><h4 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h4><p>虽然使用箭头函数可以少去花括号，少去return, 一行完成，但是一定要是在代码可读的情况下，<br>与代码可维护性相比较，过短的代码会影响对其的解读性</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于react中的context的理解</title>
      <link href="/2019/10/08/%E5%85%B3%E4%BA%8Ereact%E4%B8%AD%E7%9A%84context%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2019/10/08/%E5%85%B3%E4%BA%8Ereact%E4%B8%AD%E7%9A%84context%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本例只是做说明性，具体代码要运行起来，还需要加入些其他元素</p></blockquote><h4 id="主要解决的问题"><a href="#主要解决的问题" class="headerlink" title="主要解决的问题"></a>主要解决的问题</h4><p>在应用中可能会有很多组件会去使用到的组件，并且当使用父子传递这一机制的时候，会显得过于臃肿繁琐，所以要使用上下文的方式来进行传递。</p><h4 id="1-创建一个context"><a href="#1-创建一个context" class="headerlink" title="1.创建一个context"></a>1.创建一个context</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// theme-context.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ThemeContext = React.createContext(<span class="string">'dark'</span>) <span class="comment">// 默认为dark</span></span><br></pre></td></tr></table></figure><h4 id="2-使用context内容-class"><a href="#2-使用context内容-class" class="headerlink" title="2.使用context内容-class"></a>2.使用context内容-class</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Demo.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ThemeContext &#125; <span class="keyword">from</span> <span class="string">'./theme-context'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> theme = <span class="keyword">this</span>.context</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;theme&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Demo.contextType = ThemeContext</span><br></pre></td></tr></table></figure><h4 id="2-使用context内容-function"><a href="#2-使用context内容-function" class="headerlink" title="2.使用context内容-function"></a>2.使用context内容-function</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Demo.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ThemeContext &#125; <span class="keyword">from</span> <span class="string">'./theme-context'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Consumer</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ThemeContext.Consumer&gt;</span><br><span class="line">      &#123;theme =&gt; (</span><br><span class="line">        &lt;div&gt;&#123;theme&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      )&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>ThemeContext.Consumer&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-传递启用"><a href="#3-传递启用" class="headerlink" title="3.传递启用"></a>3.传递启用</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ThemeContext &#125; <span class="keyword">from</span> <span class="string">'./theme-context'</span></span><br><span class="line"><span class="keyword">import</span> Demo <span class="keyword">from</span> <span class="string">'demo'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Wrapper</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">Demo</span> /&gt;</span>)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">class App extends React.Component &#123;</span></span><br><span class="line"><span class="xml">  render (</span></span><br><span class="line"><span class="xml">    return (</span></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;ThemeContext.Provider value="light"&gt;</span><br><span class="line">          &lt;Wrapper /&gt;  // 此时 Wrapper 内的 Demo 使用的是就近的 light</span><br><span class="line">        &lt;/ThemeContext.Provider&gt;</span><br><span class="line">        &lt;Wrapper /&gt;  // 此时 Wrapper 内的 Demo 使用的是默认值 dark</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在hook中使用context"><a href="#在hook中使用context" class="headerlink" title="在hook中使用context"></a>在hook中使用context</h4><p>父组件还是要使用<code>&lt;MyContext.Provider value={} /&gt;</code>这种方式将上下文对象全局传递出去，不同的就是使用到context的组件，可以使用function组件，来方便的接收<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Demo.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ThemeContext &#125; <span class="keyword">from</span> <span class="string">'./theme-context'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> theme = React.useContext(ThemeContext)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ... context中变化时，该组件会同步刷新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h4><p>context会使用参考标识，也就是说，可能value不变的情况下，他会通知使用到context组件重新渲染<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;Provider value=&#123;&#123;<span class="attr">something</span>: <span class="string">'something'</span>&#125;&#125;&gt;</span><br><span class="line">  &lt;Toolbar /&gt;</span><br><span class="line">&lt;<span class="regexp">/Provider&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 此时此组件刷新的时候，他会通知组件 value发生了改变（尽管字面量并没有发生改变）</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 可以将value的值提到state中去存储</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">state = &#123;</span></span><br><span class="line"><span class="regexp">  value: &#123;something: 'something'&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;Provider value=&#123;this.state.value&#125;&gt;</span></span><br><span class="line"><span class="regexp">  &lt;Toolbar /</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/Provider&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>关于react中循环渲染数据时key的问题</title>
      <link href="/2019/10/05/%E5%85%B3%E4%BA%8Ereact%E4%B8%AD%E5%BE%AA%E7%8E%AF%E6%B8%B2%E6%9F%93%E6%95%B0%E6%8D%AE%E6%97%B6key%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/10/05/%E5%85%B3%E4%BA%8Ereact%E4%B8%AD%E5%BE%AA%E7%8E%AF%E6%B8%B2%E6%9F%93%E6%95%B0%E6%8D%AE%E6%97%B6key%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="key的影响"><a href="#key的影响" class="headerlink" title="key的影响"></a>key的影响</h2><p>循环元素之所以需要一个key，就是因为他无法确认这两个元素在前后是否还有关联，因为他们大都是类型相同的，会造成重新渲染或者是一些聚焦状态等丢失，所以要根据这个key来判断是否是当前元素<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> todos = [&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'eat'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'coding'</span> &#125;]</span><br><span class="line"></span><br><span class="line">todos.map(<span class="function">(<span class="params">todo, index</span>) =&gt;</span> (</span><br><span class="line">  &lt;p key=&#123;index&#125;&gt;</span><br><span class="line">    &lt;span&gt;&#123;todo.title&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    comment: &lt;input /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">))</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">todos.map((todo, index) =&gt; (</span></span><br><span class="line"><span class="regexp">  &lt;p key=&#123;todo.id&#125;&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&#123;todo.title&#125;&lt;/</span>span&gt;</span><br><span class="line">    comment: <span class="xml"><span class="tag">&lt;<span class="name">input</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">))</span><br></pre></td></tr></table></figure></p><p>当我们在输入框输入一定的内容的时候，我们切换一下数组的内容<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">todos = [ todos[<span class="number">1</span>], todos[<span class="number">0</span>] ]</span><br></pre></td></tr></table></figure></p><p>此时两种方式绑定的不同结果可能就会，造成元素改变了，上一次输入的内容与标签对应异常</p><p><img src="/img/2019/10/05/1.png" alt="初始化"></p><p>当我们点击切换元素内的顺序时</p><p><img src="/img/2019/10/05/2.png" alt="点击按钮后"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>devServer实现局域网内访问</title>
      <link href="/2019/10/04/devServer%E5%AE%9E%E7%8E%B0%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E8%AE%BF%E9%97%AE/"/>
      <url>/2019/10/04/devServer%E5%AE%9E%E7%8E%B0%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在react项目中，经常会使用到devServer, 此时如果设备在同一局域网下应该是可以胡同的（同一wifi环境）</p></blockquote><ol><li><p>检查本机防火墙设置</p></li><li><p>开启devServer相关配置（重点）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  port: <span class="number">8080</span>,</span><br><span class="line">  disableHostCheck: <span class="literal">true</span>,</span><br><span class="line">  host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>eolinkerAMS开源版架设</title>
      <link href="/2019/10/04/eolinkerAMS%E5%BC%80%E6%BA%90%E7%89%88%E6%9E%B6%E8%AE%BE/"/>
      <url>/2019/10/04/eolinkerAMS%E5%BC%80%E6%BA%90%E7%89%88%E6%9E%B6%E8%AE%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>java版地址 <a href="https://gitee.com/haonan98/eoLinker-AMS-Lite-For-Java" target="_blank" rel="noopener">https://gitee.com/haonan98/eoLinker-AMS-Lite-For-Java</a></p></blockquote><h2 id="所需环境"><a href="#所需环境" class="headerlink" title="所需环境"></a>所需环境</h2><ul><li>java8+ </li><li>mysql5.5+</li></ul><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>创建数据库eolinker_os，并执行eolinker_os.sql</p><h2 id="更改相关连接配置"><a href="#更改相关连接配置" class="headerlink" title="更改相关连接配置"></a>更改相关连接配置</h2><p>更改配置文件,setting.propperties</p><h2 id="运行jar包"><a href="#运行jar包" class="headerlink" title="运行jar包"></a>运行jar包</h2><p><code>java -jar xxx</code> 后续进入引导即可</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="http://ip:port/eolinker_os/index.html" target="_blank" rel="noopener">http://ip:port/eolinker_os/index.html</a></p><h2 id="开源感谢"><a href="#开源感谢" class="headerlink" title="开源感谢"></a>开源感谢</h2><p><a href="https://www.eolinker.com" target="_blank" rel="noopener">https://www.eolinker.com</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>814</title>
      <link href="/2019/08/14/814/"/>
      <url>/2019/08/14/814/</url>
      
        <content type="html"><![CDATA[<p>又是一个814，22岁了，长大了一岁，哈哈哈哈，以后每年就在这里记录一下吧，明天公交云就开工资了，算人生第一桶金吧，哈哈哈，加油</p><p>杭州·公交云 22 实习4k<br>next age =&gt; 6k</p><p>加油咯！</p><p><img src="/img/2019/08/14/4.png" alt="看到我啦⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序内，生成自定义二维码</title>
      <link href="/2019/08/14/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%86%85%EF%BC%8C%E7%94%9F%E6%88%90%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
      <url>/2019/08/14/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%86%85%EF%BC%8C%E7%94%9F%E6%88%90%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>最近在开发中，需要生成自定义的二维码，于是做了一个包出来，分享给大家一起使用。适用于微信小程序的二维码生成器，基于Canvas生成，支持中文的输入。可在原生小程序，mpvue，taro中使用。（文末有一个使用示例）<img src="/img/2019/08/14/1.png" alt="qrcode"></p><p>github地址 <a href="https://github.com/Z-HNAN/wxmp-qrcode" target="_blank" rel="noopener">wxmp-qrcode</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install wxmp-qrcode</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol><li><p>创建一个canvas,设置其<code>id</code>,与<code>canvas-id</code>， 并设置canvas的样式，二维码基于其大小生成并居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"cav-qrcode"</span> <span class="attr">canvas-id</span>=<span class="string">"cav-qrcode"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引入包并使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QR <span class="keyword">from</span> <span class="string">'wxmp-qrcode'</span></span><br><span class="line">QR.draw(str, canvasId)</span><br></pre></td></tr></table></figure></li></ol><h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 根据canvas尺寸，画出合适居中的qrcode</span><br><span class="line"> * @param &#123;Object&#125; str 二维码的内容 (必须)</span><br><span class="line"> * @param &#123;Object&#125; canvasId canvasId的值 (必须)</span><br><span class="line"> * @param &#123;Object&#125; $this 传入组件的this,兼容在组件中生成二维码 （可选，可省略该参数）</span><br><span class="line"> * @param &#123;Object&#125; callback 回调函数 (可选)</span><br><span class="line"> */</span><br><span class="line">draw: function (str, canvasId, $this, callback)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 清除canvas内容</span><br><span class="line">* @param &#123;Object&#125; canvasId canvasId (必须)</span><br><span class="line">* @param &#123;Object&#125; callback 回调函数 （可选）</span><br><span class="line">*/</span><br><span class="line">clear: function (canvasId, callback)</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>canvas中 id, canvas-id必须保持一致</p><ul><li>id 获取canvas节点，自动计算大小使用, <strong>二维码大小基于canvas自动生成</strong></li><li>canvas-id 绘制二维码使用</li></ul></li><li><p>如果在组件中使用，需要传入组件的this，<code>draw(str, canvasId, componentThis)</code></p><ul><li>具体参见 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.createCanvasContext.html" target="_blank" rel="noopener">wx.createCanvasContext</a></li></ul></li><li><p>可以保存二维码为临时图片地址</p><ul><li>具体可参见 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/canvas/wx.canvasToTempFilePath.html" target="_blank" rel="noopener">wx.canvasToTempFilePath</a></li><li>bug: 该方法有时保存的图片会有一个竖条。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">createQrCode: <span class="function"><span class="keyword">function</span> (<span class="params">content, canvasId</span>) </span>&#123;</span><br><span class="line">  QR.api.draw(content, canvasId)</span><br><span class="line">  <span class="keyword">this</span>.canvasToTempImage(canvasId)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取临时缓存图片路径</span></span><br><span class="line">canvasToTempImage: <span class="function"><span class="keyword">function</span> (<span class="params">canvasId</span>) </span>&#123;</span><br><span class="line">  wx.canvasToTempFilePath(&#123;</span><br><span class="line">    canvasId, </span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> tempFilePath = res.tempFilePath; <span class="comment">// 临时图片地址，可在放入图片src中使用</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="原生小程序wxmp中使用"><a href="#原生小程序wxmp中使用" class="headerlink" title="原生小程序wxmp中使用"></a>原生小程序wxmp中使用</h2><ol><li>在项目设置中选择 <code>使用npm模块</code><br><img src="/img/2019/08/14/2.png" alt="使用npm模块"></li><li>如果第一次使用npm模块，需要首先在根目录中<code>npm init</code>, 之后再安装模块 <code>npm i wxmp-qrcode</code> </li><li>在工具中选择 <code>构建npm</code><br><img src="/img/2019/08/14/3.png" alt="构建npm"></li><li><p>index.wxml</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"&#123;&#123;canvasId&#125;&#125;"</span> <span class="attr">canvas-id</span>=<span class="string">"&#123;&#123;canvasId&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"creatQRCode"</span>&gt;</span> 生成二维码 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>index.wxss</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">canvas</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1</span>rpx solid <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">100</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QR <span class="keyword">from</span> <span class="string">'./qrcode'</span></span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    canvasId: <span class="string">'canvasId'</span>,</span><br><span class="line">    QRdata: <span class="string">'你好 wxmp-qrcode'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  creatQRCode () &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="keyword">this</span>.data.QRdata</span><br><span class="line">    <span class="keyword">let</span> canvasId = <span class="keyword">this</span>.data.canvasId</span><br><span class="line">    QR.draw(str, canvasId)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>taro中集成redux-saga</title>
      <link href="/2019/08/14/taro%E4%B8%AD%E9%9B%86%E6%88%90redux-saga/"/>
      <url>/2019/08/14/taro%E4%B8%AD%E9%9B%86%E6%88%90redux-saga/</url>
      
        <content type="html"><![CDATA[<blockquote><p>taro中redux处理方案是采用redux-thunk,这里采用<a href="https://redux-saga.js.org/" target="_blank" rel="noopener">redux-saga</a>解决异步问题，<em>引入目前最新<a href="mailto:redux-saga@1.0.5" target="_blank" rel="noopener">redux-saga@1.0.5</a></em></p></blockquote><h4 id="引入方式一"><a href="#引入方式一" class="headerlink" title="引入方式一"></a>引入方式一</h4><p>可以直接下载种子项目，已经引入了saga，并做好了相关配置，可在此基础上再次开发<br><a href="https://github.com/Z-HNAN/taro-redux-saga-seed" target="_blank" rel="noopener">taro-redux-saga-seed</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 下载种子项目</span><br><span class="line">git clone https://github.com/Z-HNAN/taro-redux-saga-seed</span><br><span class="line"></span><br><span class="line">// 安装依赖</span><br><span class="line">cd taro-redux-saga-seed</span><br><span class="line">npm i </span><br><span class="line"></span><br><span class="line">// 启动项目-小程序(微信开发者工具查看效果，有一个3s延迟的add示例)</span><br><span class="line">npm run dev:weapp</span><br></pre></td></tr></table></figure></p><h4 id="引入方式二"><a href="#引入方式二" class="headerlink" title="引入方式二"></a>引入方式二</h4><p>在自己已经有的项目上引入，按照后续步骤自行引入即可</p><h4 id="安装redux-saga"><a href="#安装redux-saga" class="headerlink" title="安装redux-saga"></a>安装redux-saga</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i redux-saga</span><br></pre></td></tr></table></figure><h4 id="更改目录形式"><a href="#更改目录形式" class="headerlink" title="更改目录形式"></a>更改目录形式</h4><p>将每个文件放在模块中，利于查找，便于引入，后面引入saga文件也比较清晰，当然这里只是一个个人喜好，也可按照自己的目录形式来安排，这里只做一个参考,请多留意引入文件路径是否正确。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">└─src                     </span><br><span class="line">    │  app.jsx            </span><br><span class="line">    │  app.less           </span><br><span class="line">    │  index.html         </span><br><span class="line">    │                     </span><br><span class="line">    ├─pages               </span><br><span class="line">    │  └─index            </span><br><span class="line">    │          action.js  </span><br><span class="line">    │          index.jsx  </span><br><span class="line">    │          index.less </span><br><span class="line">    │          reducer.js </span><br><span class="line">    |          saga.js</span><br><span class="line">    │                     </span><br><span class="line">    └─store               </span><br><span class="line">            index.js      </span><br><span class="line">            reducer.js</span><br><span class="line">            saga.js</span><br></pre></td></tr></table></figure></p><h4 id="引入index模块的saga"><a href="#引入index模块的saga" class="headerlink" title="引入index模块的saga"></a>引入index模块的saga</h4><ul><li><code>pages/index/saga.js</code>捕获当前模块中的action</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; put, delay, takeEvery&#125; <span class="keyword">from</span> <span class="string">'redux-saga/effects'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">asyncAddRequest</span> (<span class="params">action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; timeout &#125; = action.payload</span><br><span class="line">  <span class="keyword">yield</span> delay(timeout)</span><br><span class="line">  <span class="keyword">yield</span> put(&#123; <span class="attr">type</span>: <span class="string">'ADD'</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> takeEvery(<span class="string">'ASYNC_ADD'</span>, asyncAddRequest)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置根saga文件"><a href="#配置根saga文件" class="headerlink" title="配置根saga文件"></a>配置根saga文件</h4><ul><li><code>store/saga.js</code>启动各个模块的saga</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; all &#125; <span class="keyword">from</span> <span class="string">'redux-saga/effects'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">'../pages/index/saga'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> all([</span><br><span class="line">    index()</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在store中引入sagaMiddleware"><a href="#在store中引入sagaMiddleware" class="headerlink" title="在store中引入sagaMiddleware"></a>在store中引入sagaMiddleware</h4><ul><li><code>store/index.js</code>saga连接到store<ul><li>引入saga</li><li>配置saga中间件到middlewares</li><li>启动saga</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="comment">/* 引入saga */</span></span><br><span class="line"><span class="keyword">import</span> createSagaMiddleware <span class="keyword">from</span> <span class="string">'redux-saga'</span></span><br><span class="line"><span class="keyword">import</span> rootSaga <span class="keyword">from</span> <span class="string">'./saga'</span></span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">'./reducer'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> composeEnhancers =</span><br><span class="line">  <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">'object'</span> &amp;&amp;</span><br><span class="line">  <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   </span><br><span class="line">    <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;</span><br><span class="line">      <span class="comment">// Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...</span></span><br><span class="line">    &#125;) : compose</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 生成sagaMiddleware */</span></span><br><span class="line"><span class="keyword">const</span> sagaMiddleware = createSagaMiddleware();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middlewares = [</span><br><span class="line">  <span class="comment">/* 应用saga */</span></span><br><span class="line">  sagaMiddleware</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 处理redux-logger */</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span> &amp;&amp; process.env.TARO_ENV !== <span class="string">'quickapp'</span>) &#123;</span><br><span class="line">  middlewares.push(<span class="built_in">require</span>(<span class="string">'redux-logger'</span>).createLogger())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> enhancer = composeEnhancers(</span><br><span class="line">  applyMiddleware(...middlewares),</span><br><span class="line">  <span class="comment">// other store enhancers if any</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">configStore</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> store = createStore(rootReducer, enhancer)</span><br><span class="line">  <span class="comment">/* 启动saga */</span></span><br><span class="line">  sagaMiddleware.run(rootSaga)</span><br><span class="line">  <span class="keyword">return</span> store</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h4><ul><li><code>pages/index/index.jsx</code> 本例以taro的redux为基础进行测试</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Taro, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@tarojs/taro'</span></span><br><span class="line"><span class="keyword">import</span> &#123; View, Button, Text &#125; <span class="keyword">from</span> <span class="string">'@tarojs/components'</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'@tarojs/redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; add, minus, asyncAdd &#125; <span class="keyword">from</span> <span class="string">'./action'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.less'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: state.index.num</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    add: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(add())</span><br><span class="line">    &#125;,</span><br><span class="line">    asyncAdd: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(asyncAdd(&#123; <span class="attr">timeout</span>: <span class="number">3000</span> &#125;))</span><br><span class="line">    &#125;,</span><br><span class="line">    minus: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(minus())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@connect(mapStateToProps, mapDispatchToProps)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    config = &#123;</span><br><span class="line">    navigationBarTitleText: <span class="string">'首页'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillReceiveProps (nextProps) &#123;</span><br><span class="line">    <span class="comment">// console.log(this.props, nextProps)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount () &#123; &#125;</span><br><span class="line"></span><br><span class="line">  componentDidShow () &#123; &#125;</span><br><span class="line"></span><br><span class="line">  componentDidHide () &#123; &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View className=<span class="string">'index'</span>&gt;</span><br><span class="line">        &lt;Button className=<span class="string">'add_btn'</span> onClick=&#123;<span class="keyword">this</span>.props.add&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line">        &lt;Button className=<span class="string">'dec_btn'</span> onClick=&#123;<span class="keyword">this</span>.props.minus&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line">        &lt;Button className=<span class="string">'dec_btn'</span> onClick=&#123;<span class="keyword">this</span>.props.asyncAdd&#125;&gt;<span class="keyword">async</span>&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;View&gt;&lt;Text&gt;&#123;this.props.counter&#125;&lt;/</span>Text&gt;<span class="xml"><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">        &lt;View&gt;<span class="xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hello, Redux-saga<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Index</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>reselect解读</title>
      <link href="/2019/08/14/reselect%E8%A7%A3%E8%AF%BB/"/>
      <url>/2019/08/14/reselect%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于1.0.0 进行解读</p></blockquote><h4 id="简单回顾一下高阶函数"><a href="#简单回顾一下高阶函数" class="headerlink" title="简单回顾一下高阶函数"></a>简单回顾一下高阶函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myMemorize</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> lastRet = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> lastParam = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> resultFuc = fn</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (lastRet &amp;&amp; args.every(<span class="function">(<span class="params">value, index</span>) =&gt;</span> value === lastParam[index])) &#123;</span><br><span class="line">      <span class="comment">// 有缓存结果，并且参数完全一致</span></span><br><span class="line">      <span class="keyword">return</span> lastRet</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 缓存结果不一致</span></span><br><span class="line">    lastParam = args</span><br><span class="line">    lastRet = resultFuc(...args)</span><br><span class="line">    <span class="keyword">return</span> lastRet</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b</span><br><span class="line"><span class="keyword">let</span> memAdd = myMemorize(add)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---------------------------'</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>)  =&gt; <span class="number">3</span> 计算</span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>)  =&gt; <span class="number">3</span> 计算</span><br><span class="line"></span><br><span class="line">memAdd(<span class="number">1</span>, <span class="number">2</span>) =&gt; <span class="number">3</span> 计算</span><br><span class="line">memAdd(<span class="number">1</span>, <span class="number">2</span>) =&gt; <span class="number">3</span> 缓存</span><br></pre></td></tr></table></figure><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>进行缓存数据，他对纯函数的结果进行一次缓存，（纯函数<em>Pure Function</em>：给定确定的输入输出，他的值都是不变的，所以有了缓存的需求，不用每一次都计算）</p><p>另外，在react中，由于React的Diff算法，他会打补丁，那么如果给的state相同的话，就会跳过这个补丁，也就省去了此次的刷新操作，节省了时间。然而在原本的React中，state更新时，所有的state都会被通知到，内容完全一样，只是他们的内存地址不同，所以就导致了Diff会打上一个无用的补丁，做一些不必要的视图刷新操作。</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>使用高阶函数，将上一次的纯函数的参数，和函数运算的结果，做存储，如果此次的参数和上一次的完全相同，那么就认为可以使用上一次的缓存，也就达到了存储的目的。大量运用到了高阶函数的思想。</p><h4 id="主要的方法"><a href="#主要的方法" class="headerlink" title="主要的方法"></a>主要的方法</h4><ul><li><p><code>createSelectorCreator(memoize)</code><br>用来做生成一个select,他的高阶函数作用是定制化了记忆函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">createSelectorCreator (memoize) &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * dependencies 他所要依赖的相关函数</span></span><br><span class="line"><span class="comment">   * resultFunc 运行最终结果的函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dependencies, resultFunc</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 拿到一个定制化的memoize</span></span><br><span class="line">    <span class="keyword">const</span> memoizeResultFunc = memoize(resultFunc)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回selector,他的作用是处理每一个state</span></span><br><span class="line">    <span class="keyword">const</span> selector = <span class="function">(<span class="params">state, props, ...args</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 执行每一个dependency,获取到每一个参数</span></span><br><span class="line">      <span class="keyword">const</span> params = dependencies.map(</span><br><span class="line">          dependency =&gt; dependency(state, props, ...args)</span><br><span class="line">      );</span><br><span class="line">      <span class="comment">// 通过定制记忆函数返回数据</span></span><br><span class="line">      <span class="keyword">return</span> memoizedResultFunc(...params);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> selector</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>defaultMemoize(func)</code><br>默认的一个记忆函数，他的高阶函数作用是，记住了上一次参数和结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">defaultMemoize (func) &#123;</span><br><span class="line">  <span class="keyword">let</span> lastParams = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> lastResult = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果上一次有结果，并且 每个参数都相同，就返回结果</span></span><br><span class="line">    <span class="keyword">if</span> (lastParams !== <span class="literal">null</span> &amp;&amp; </span><br><span class="line">      params.every(<span class="function">(<span class="params">value, index</span>) =&gt;</span> value === lastParams[index])) &#123;</span><br><span class="line">      <span class="keyword">return</span> lastResult;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记忆上一次的参数，真正执行一次，并把结果都缓存起来</span></span><br><span class="line">    lastParams = params;</span><br><span class="line">    lastResult = func(...params);</span><br><span class="line">    <span class="keyword">return</span> lastResult;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>defaultEqualityCheck(a, b)</code><br>这个函数的作用是判断连个参数是否相等，上面使用了硬比较 <code>===</code>, 当然也可以用其他的判断方法代替一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">value === lastParams[index]</span><br><span class="line">defaultEqualityCheck(value, lastParams[index])</span><br></pre></td></tr></table></figure></li></ul><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  shop: &#123;</span><br><span class="line">    items: [&#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">value</span>: <span class="number">1</span>&#125;,&#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">value</span>: <span class="number">2</span>&#125;,&#123;<span class="attr">id</span>:<span class="number">3</span>, <span class="attr">value</span>: <span class="number">3</span>&#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shopItemsSelector = <span class="function"><span class="params">state</span> =&gt;</span> state.shop.items</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalSelector = createSelector(</span><br><span class="line">  shopItemsSelector,</span><br><span class="line">  (items) =&gt; items.reduce(<span class="function">(<span class="params">acc, item</span>) =&gt;</span> acc + item.value, <span class="number">0</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> total = totalSelector(state)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建出selector</span></span><br><span class="line"><span class="keyword">let</span> selector = createSelector([fun1, fun2], fun3)</span><br><span class="line"><span class="keyword">let</span> someState = (<span class="function"><span class="keyword">function</span>(<span class="params">state, props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> state1 = fun1(state, props)</span><br><span class="line">  <span class="keyword">let</span> state2 = fun2(state, props)</span><br><span class="line">  <span class="keyword">return</span> fun3(state1, state2)</span><br><span class="line">&#125;)(state, props)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 记忆结果</span></span><br><span class="line"><span class="keyword">return</span> fun3(state1, state2),</span><br><span class="line"><span class="comment">// 将直接执行fun3替换为已经记忆化过的memoizedResultFunc</span></span><br><span class="line"><span class="keyword">return</span> memoizedResultFunc(state1, state2)</span><br><span class="line">他去判断state的值是否相同，如果相同，就直接返回出一个上一次存储的结果</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>redux中常用的efffects</title>
      <link href="/2019/08/14/redux%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84efffects/"/>
      <url>/2019/08/14/redux%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84efffects/</url>
      
        <content type="html"><![CDATA[<h2 id="redux-saga中effect的使用"><a href="#redux-saga中effect的使用" class="headerlink" title="redux-saga中effect的使用"></a>redux-saga中effect的使用</h2><p>redux-saga 中将有副作用的方法，都放到了外部单独的文件中去执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action1(plain object)——&gt;redux-saga监听—&gt;执行相应的Effect方法——&gt;返回描述对象—&gt;恢复执行异步和副作用函数—&gt;action2(plain object)</span><br></pre></td></tr></table></figure></p><p>方便进行测试，如果effect方法执行的结果的返回值就是将要执行的对象，那么可以认为，在今后这个action执行的时候，他的结果就是正常的，也就是说redux-saga的作用就是，我们可以提前获取到即将执行的方法，以及他的参数，但是他的具体执行时间是未知的</p><h2 id="redux-effect的相关effect方法"><a href="#redux-effect的相关effect方法" class="headerlink" title="redux-effect的相关effect方法"></a>redux-effect的相关effect方法</h2><blockquote><p>v 1.0.5 </p></blockquote><ul><li>take 监听方法，并返回一个action对象<ul><li>takeLatest <code>yield takeLatest(&#39;xxx&#39;, xxxRequest)</code></li></ul></li><li>call 调用某个方法<ul><li><code>yield call(fn, ...args)</code></li></ul></li><li>put 发出一个action，其参数就是action对象，也就是即将发给reducer做真正的处理<ul><li><code>put({type: &#39;XXXX&#39;, payload: {}})</code></li></ul></li><li>select 获取state，返回的结果是state对象，可以进行获取数据<ul><li><code>let xxx = yield select((state) =&gt; state.xxx);</code></li></ul></li><li>debounce 防止时间抖动，过一段时间发一次请求<ul><li><code>yield debounce(1000, &#39;FETCH_AUTOCOMPLETE&#39;, fetchAutocompleteFn)</code></li></ul></li><li>delay 延迟多少ms的一个，类似于timeout<ul><li><code>yield delay(500)</code></li></ul></li><li>all 监听所有的saga,启动所有的方法<ul><li><code>all([ saga1(), saga2() ])</code></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React Fragment</title>
      <link href="/2019/08/14/Fragment/"/>
      <url>/2019/08/14/Fragment/</url>
      
        <content type="html"><![CDATA[<p>可以理解为,是一个空的jsx标签<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&gt;&lt;/&gt; // 这其实是&lt;React.Fragment&gt;&lt;/React.Fragment&gt;的语法糖</span><br></pre></td></tr></table></figure></p><ul><li><p>当前父组件中是一个table中的tr</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt; &#123;children&#125; &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>table&gt;</span><br></pre></td></tr></table></figure></li><li><p>如果children是传统上的div,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;td&gt;Hello&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">  &lt;td&gt;World&lt;/</span>td&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>那么最终展示的效果为,展示会出现,显示异常<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>World<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>使用React.Fragment时<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;React.Fragment&gt;</span><br><span class="line">  &lt;td&gt;Hello&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">  &lt;td&gt;World&lt;/</span>td&gt;</span><br><span class="line">&lt;<span class="regexp">/React.Fragment&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>那么最终展示的效果为,展示会出现，显示正常<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>World<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux-enhancer浅析</title>
      <link href="/2019/08/13/redux-enhancer%E6%B5%85%E6%9E%90/"/>
      <url>/2019/08/13/redux-enhancer%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="在redux的createStore中，还有两个参数"><a href="#在redux的createStore中，还有两个参数" class="headerlink" title="在redux的createStore中，还有两个参数"></a>在redux的createStore中，还有两个参数</h2><p><code>createStore(reducer, [preloadedState], [enhancer])</code><br>这里主要分析enhancer,这是一个增强器，用来增强redux的各个方法，也就是替换createStore方法的函数，</p><h4 id="简单回顾一下createStore-reducer"><a href="#简单回顾一下createStore-reducer" class="headerlink" title="简单回顾一下createStore(reducer)"></a>简单回顾一下createStore(reducer)</h4><p>就是创建出一个store,然后汇总所有的reducer，将所有的state过一遍<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span> (<span class="params"> reducer </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> state,</span><br><span class="line">    listenArr = []</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getState</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state)) <span class="comment">// 返回一个拷贝，防止直接修改state中数据</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span> (<span class="params"> action </span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 执行reducer返回结果,并且语法要求 reducer(state = &#123;&#125;, action) 这里state语法要求有默认值， 并且最后返回了，所以执行一次就有值</span></span><br><span class="line">    state = reducer(state, action)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, fn; fn = listenArr[i++]; )&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> fn === <span class="string">'function'</span>) &#123;</span><br><span class="line">        fn()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        listenArr.splice(i, <span class="number">1</span>)</span><br><span class="line">        i--</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化一下，没有实际作用，返回用户默认state,</span></span><br><span class="line">  dispatch(&#123;<span class="attr">type</span>: <span class="string">'_INIT_DEFAULT_STATE'</span>&#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span> (<span class="params"> fn </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( !listenArr.includes(fn) ) &#123; <span class="comment">// 防止重复添加</span></span><br><span class="line">      listenArr.push(fn)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> delIndex = listenArr.indexOf(fn)</span><br><span class="line">      listenArr[delIndex] = <span class="literal">null</span> <span class="comment">// 防止数组塌陷</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getState,</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="什么是enhancer-就是代替了createStore，可以创建出一个符合你的要求的一个store"><a href="#什么是enhancer-就是代替了createStore，可以创建出一个符合你的要求的一个store" class="headerlink" title="什么是enhancer,就是代替了createStore，可以创建出一个符合你的要求的一个store"></a>什么是enhancer,就是代替了createStore，可以创建出一个符合你的要求的一个store</h2><p>他的返回值是一个createStore,应该有和原函数一样的参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">autoLogger</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 返回一个函数 createStore, 替代原先的</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">createStore</span> =&gt;</span> (reducer, initialState, enhancer) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 拿到原来的store,等于已经创建好了，直接装饰就可以</span></span><br><span class="line">    <span class="keyword">const</span> store = createStore(reducer, initialState, enhancer) </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 覆盖原先的dispatch</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span> (<span class="params">action</span>) =&gt; </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`dispatch an action: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(action)&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">const</span> res = store.dispatch(action);</span><br><span class="line">      <span class="keyword">const</span> newState = store.getState();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`current state: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(newState)&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回最修改后的store</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建出自定义的logger</span></span><br><span class="line">createStore(reducer, autoLogger())</span><br></pre></td></tr></table></figure></p><h4 id="enhancer就是一个允许覆盖的createStore"><a href="#enhancer就是一个允许覆盖的createStore" class="headerlink" title="enhancer就是一个允许覆盖的createStore"></a>enhancer就是一个允许覆盖的createStore</h4><p>当然他也是侵入性的，会破坏掉原始的store结构,下面的例子就破坏的dispatch<br>经过这个enhancer处理的dispatch就是一个毫无作用的dispatch,所以说他是侵入式的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">badEnhancer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span> (<span class="params">action</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="什么是middleware"><a href="#什么是middleware" class="headerlink" title="什么是middleware"></a>什么是middleware</h2><p>他就是官方提供的一个enhancer,只是最后允许修改dispatch<br>可以看出，他的功能和enhancer一样的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">createStore</span> =&gt;</span> (...args) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="多层enhancer"><a href="#多层enhancer" class="headerlink" title="多层enhancer"></a>多层enhancer</h4><ul><li>当我们要使用很多enhancer的时候，我们可能要包很多层</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function enhancer1 (reducer, initState, () =&gt; &#123;</span><br><span class="line">  return enhancer2 =&gt; (reducer, initState, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    return enhancer3 =&gt; (reducer, initState, enhancer) &#123;</span><br><span class="line"></span><br><span class="line">      return createStore(reducer, initState, enhancer) &#123;</span><br><span class="line">        // enhancer3的逻辑</span><br><span class="line">        const store3 = createStore(reducer, initState, enhancer)</span><br><span class="line">        // ... 覆盖方法</span><br><span class="line">        return &#123; ...store3 &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      return createStore(reducer, initState, enhancer) &#123;</span><br><span class="line">        // enhancer2的逻辑</span><br><span class="line">        const store2 = createStore(reducer, initState, enhancer)</span><br><span class="line">        // ... 覆盖方法</span><br><span class="line">        return &#123; ...store2 &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return createStore(reducer, initState, enhancer) &#123;</span><br><span class="line">      // enhancer1的逻辑</span><br><span class="line">      const store1 = createStore(reducer, initState, enhancer)</span><br><span class="line">      // ... 覆盖方法</span><br><span class="line">      return &#123; ...store1 &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>通常使用compose进行组合, 包裹将applyMiddleware,也要组合进去<br>最后会返回一个依次嵌套的enhancer，类似一个洋葱模型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> enhancer = compose(</span><br><span class="line">  applyMiddleware(...middlewares),</span><br><span class="line">  autLogger(),</span><br><span class="line">  otherEnhancer(),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="当然，如果不需要enhancer，直接createStore-reducer-applyMiddleware-即可"><a href="#当然，如果不需要enhancer，直接createStore-reducer-applyMiddleware-即可" class="headerlink" title="当然，如果不需要enhancer，直接createStore(reducer, applyMiddleware())即可"></a>当然，如果不需要enhancer，直接<code>createStore(reducer, applyMiddleware())</code>即可</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>async与await的理解</title>
      <link href="/2019/07/07/sync%E4%B8%8Eawait%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2019/07/07/sync%E4%B8%8Eawait%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>具体的执行情况V8与浏览器环境可能会略有差异，这里主要做一些原理说明，具体的执行顺序可能需要视实际情况来定。</p></blockquote><h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p>async是将一个方法等待，但是其并不是暂停到那边，而是将其抛出主线程，进入就绪队列等待，而整个async函数的返回值也是一个Promise对象，具体区分以下情况<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'foo'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -&gt; Promise.resolve('foo')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -&gt; Promise.resolve(undefined)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'success'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -&gt; Promise.resolve('success')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn4</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="string">'fail'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -&gt; Promise.reject('fail')</span></span><br></pre></td></tr></table></figure></p><p>也就是说，async的作用，最后返回一个Promise对象。</p><h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><p>await是将Promise的内容取出来的一个方式，方便我们进行异步编程的操作，<strong>他是取出<code>Promise.resolve()</code>的返回值，要根据需求加入<code>try-catch</code>来满足需求</strong>，他的操作必须在async中执行，因为要暂时抛出主线程（“暂时停止”）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resolve的情况，也是正常的情况下</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDataSuccess</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'success'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> dataSuccess = <span class="keyword">await</span> getDataSuccess()</span><br><span class="line">  <span class="built_in">console</span>.log(dataSuccess) <span class="comment">// 输出--&gt; success</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有reject的情况，需要配合try-catch</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDataFail</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="string">'fail'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dataFail = <span class="keyword">await</span> getDataFail()</span><br><span class="line">    <span class="built_in">console</span>.log(dataFail)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error) <span class="comment">// 输出--&gt; error</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><h2 id="async和await搭配使用"><a href="#async和await搭配使用" class="headerlink" title="async和await搭配使用"></a>async和await搭配使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 其中async的作用相当于返回了Promise.resolve( foo() )  async foo () &#123; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// await的作用取出数据  await bar()</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  resolve( bar() )</span><br><span class="line">&#125;).then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  ret = val  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个部分和起来相当于两块Promise</span></span><br><span class="line"><span class="keyword">async</span> fn() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>( ..... )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ret = <span class="keyword">await</span> fn()</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">======== 等价于 =======</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line"> resolve( <span class="built_in">Promise</span>.resolve(fn()) )</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> v1 = val</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="注意，由于浏览器的不同，以及运行环境的不同，可能运行顺序会略有差异"><a href="#注意，由于浏览器的不同，以及运行环境的不同，可能运行顺序会略有差异" class="headerlink" title="注意，由于浏览器的不同，以及运行环境的不同，可能运行顺序会略有差异"></a>注意，由于浏览器的不同，以及运行环境的不同，可能运行顺序会略有差异</h2><blockquote><p>以下仅自己分析（不一定正确），可供思路参考，如有问题，欢迎指正。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testSometing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"执行testSometing"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"testSometing"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">testAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"执行testAsync"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">"hello async"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"test start..."</span>);</span><br><span class="line">    <span class="keyword">const</span> v1 = <span class="keyword">await</span> testSometing();</span><br><span class="line">    <span class="built_in">console</span>.log(v1);</span><br><span class="line">    <span class="keyword">const</span> v2 = <span class="keyword">await</span> testAsync();</span><br><span class="line">    <span class="built_in">console</span>.log(v2);</span><br><span class="line">    <span class="built_in">console</span>.log(v1, v2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span> &#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"promise start.."</span>); </span><br><span class="line">  resolve(<span class="string">"promise"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function">(<span class="params">val</span>)=&gt;</span> <span class="built_in">console</span>.log(val));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"test end..."</span>)</span><br></pre></td></tr></table></figure><h4 id="执行情况一"><a href="#执行情况一" class="headerlink" title="执行情况一"></a>执行情况一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> test start...</span><br><span class="line"><span class="number">2</span> 执行testSometing</span><br><span class="line"><span class="number">3</span> promise start..</span><br><span class="line"><span class="number">4</span> test end...</span><br><span class="line"><span class="number">5</span> promise  *</span><br><span class="line"><span class="number">6</span> testSometing *</span><br><span class="line"><span class="number">7</span> 执行testAsync *</span><br><span class="line"><span class="number">8</span> hello <span class="keyword">async</span></span><br><span class="line"><span class="number">9</span> testSometing hello <span class="keyword">async</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种情况是 由于await 的函数是一个async,相当于两层Promise,如上，所以他抛出线程2次，让后面的运行（较难理解一种）</span></span><br><span class="line">-&gt; <span class="keyword">async</span>的函数<span class="built_in">Promise</span>抛出（剩余<span class="number">2</span>个） -&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>的<span class="built_in">Promise</span>抛出(剩余一个)</span><br><span class="line">-&gt; 运行栈空了,调入 -&gt;<span class="keyword">async</span>的函数<span class="built_in">Promise</span>抛出（剩余<span class="number">1</span>个）-&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>的<span class="built_in">Promise</span>执行</span><br><span class="line">-&gt; 运行栈空了,调入 -&gt;<span class="keyword">async</span>的函数<span class="built_in">Promise</span>执行</span><br></pre></td></tr></table></figure><h4 id="执行情况二"><a href="#执行情况二" class="headerlink" title="执行情况二"></a>执行情况二</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> test start...</span><br><span class="line"><span class="number">2</span> 执行testSometing</span><br><span class="line"><span class="number">3</span> promise start..</span><br><span class="line"><span class="number">4</span> test end...</span><br><span class="line"><span class="number">5</span> testSometing *</span><br><span class="line"><span class="number">6</span> 执行testAsync *</span><br><span class="line"><span class="number">7</span> promise  *</span><br><span class="line"><span class="number">8</span> hello <span class="keyword">async</span></span><br><span class="line"><span class="number">9</span> testSometing hello <span class="keyword">async</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种情况是把两个Promise放到一起，也是比较容易理解的一种方式</span></span><br><span class="line">-&gt; <span class="keyword">async</span>的函数<span class="built_in">Promise</span>抛出 -&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>的<span class="built_in">Promise</span>抛出</span><br><span class="line">-&gt; 运行栈空了,调入 -&gt; <span class="keyword">async</span>的函数<span class="built_in">Promise</span>执行 -&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>的<span class="built_in">Promise</span>执行</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>路由router</title>
      <link href="/2019/07/05/%E8%B7%AF%E7%94%B1router/"/>
      <url>/2019/07/05/%E8%B7%AF%E7%94%B1router/</url>
      
        <content type="html"><![CDATA[<h2 id="react-router-dom"><a href="#react-router-dom" class="headerlink" title="react-router-dom"></a>react-router-dom</h2><blockquote><p>在3.x以上使用<code>react-router-dom</code>,在以下使用<code>react-router</code></p></blockquote><h4 id="BrowseRouter-VS-HashRouter"><a href="#BrowseRouter-VS-HashRouter" class="headerlink" title="BrowseRouter VS HashRouter"></a>BrowseRouter VS HashRouter</h4><ul><li><p>BrowseRouter url变换的方式，多用于服务端渲染的方式 其依靠h5的 history API</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://www.demo.com/</span><br><span class="line">http://www.demo.com/personal/</span><br><span class="line">http://www.demo.com/personal/login/</span><br></pre></td></tr></table></figure></li><li><p>HashRouter 使用哈西路由， 使用js构造history API， 基于history stack来完成的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://www.demo.com/#/</span><br><span class="line">http://www.demo.com/#/personal/</span><br><span class="line">http://www.demo.com/#/personal/login/</span><br></pre></td></tr></table></figure></li></ul><h4 id="Router匹配规则"><a href="#Router匹配规则" class="headerlink" title="Router匹配规则"></a>Router匹配规则</h4><p>一般情况下是都可以匹配的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">1. http://www.demo.com/#/</span><br><span class="line">2. http://www.demo.com/#/user</span><br><span class="line"></span><br><span class="line">都能匹配到</span><br><span class="line">&lt;Route path=&quot;/&quot; component /&gt; 1. 2.</span><br><span class="line">&lt;Route path=&quot;/&quot; exact component /&gt; 1.</span><br><span class="line"></span><br><span class="line">// 权限校验</span><br><span class="line">&lt;Route path=&quot;/pay&quot; render=&#123;() =&gt; &#123;</span><br><span class="line">  let flag = localStorage.getItem(&apos;FLAG&apos;)</span><br><span class="line">  if (flag &amp;&amp; flag === &apos;SAFE&apos;) &#123;</span><br><span class="line">    return &lt;Pay/&gt;</span><br><span class="line">  &#125;</span><br><span class="line">  return &apos;当前环境不安全，终止交易&apos;</span><br><span class="line">&#125;&#125;/&gt;</span><br><span class="line"></span><br><span class="line">// 使用 Switch组件只匹配一个,即匹配一个后跳出</span><br><span class="line">&lt;HashRouter&gt;</span><br><span class="line">&lt;Swtich&gt;</span><br><span class="line">  &lt;Route path=&quot;/&quot; exact component=&#123;A&#125;/&gt;   // 由于` / `匹配的太广泛，所以加一下react</span><br><span class="line">  &lt;Route path=&quot;/user&quot; component=&#123;A&#125;/&gt;</span><br><span class="line">  &lt;Route path=&quot;/pay&quot; component=&#123;A&#125;/&gt;</span><br><span class="line">  &lt;Route  render=&#123;() =&gt; &#123;return &apos;404&apos;&#125; &#125;/&gt; 或者 &lt;Redirect to=&apos;/&apos; /&gt;</span><br><span class="line">&lt;/Switch&gt;</span><br><span class="line">&lt;/HashRouter&gt;</span><br><span class="line"></span><br><span class="line">&lt;Router /&gt; 不设置Path是匹配所有的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 重定向</span><br><span class="line">&lt;Redirect to=&quot;/?lx=404&quot; /&gt;</span><br><span class="line">&lt;Redirect to=&#123;&#123;</span><br><span class="line">  pathname: &apos;/&apos;,</span><br><span class="line">  search: &apos;?/lx=404&apos;</span><br><span class="line">&#125;&#125; /&gt;</span><br><span class="line"></span><br><span class="line">// 如果加入了PUSH属性， 会加入到HISTORY SATCK中增添一条记录</span><br><span class="line"></span><br><span class="line">&lt;Redirect from=&apos;/custom&apos; to=&apos;/custom/list&apos; /&gt;</span><br><span class="line">如果请求的HASH是 &apos;/custom&apos; 那么就重定向到 &apos;/custom/list&apos;</span><br></pre></td></tr></table></figure></p><h4 id="lt-Link-gt-与-lt-NavLink-gt"><a href="#lt-Link-gt-与-lt-NavLink-gt" class="headerlink" title="&lt;Link&gt; 与 &lt;NavLink&gt;"></a><code>&lt;Link&gt;</code> 与 <code>&lt;NavLink&gt;</code></h4><p>必须都包裹在<hashrouter></hashrouter>中</p><ul><li>原理：最终都会转换成<code>&lt;a href=&quot;#/&quot; &gt;xxx&lt;/a&gt;</code></li><li>使用：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link to=&apos;/&apos;&gt;&lt;/Link&gt; 普通的跳转</span><br><span class="line">&lt;Link to=&#123; &#123;</span><br><span class="line">  pathname: &apos;xxx&apos;,</span><br><span class="line">  search: &apos;xxx&apos;,</span><br><span class="line">  state: &apos;xx&apos;</span><br><span class="line">&#125; &#125; &gt;&lt;/Link&gt;</span><br><span class="line"></span><br><span class="line">&lt;NavLink&gt;使用方法一样  可以点击的跳转，但是其原理是匹配hash，并不是onClick增加的active</span><br><span class="line">&lt;NavLink activeClass=&quot;active&quot; activeStyle&gt;</span><br><span class="line">一般一级路由的nav不能简单使用NavLink的点击添加active,（因为Nav已经被渲染好了，</span><br><span class="line">并没有因为hash的改变而重新渲染）</span><br><span class="line">注意：当 &lt;NavLink to=&quot;/&quot; /&gt; 时, 要使用 exact</span><br><span class="line"></span><br><span class="line">1. 解决方案1 -&gt; 将nav放到各Nav组件中（不推荐）</span><br><span class="line">2. 解决方案2 -&gt; 使用withRouter包起来 export default withRouter(connect()(Nav)),</span><br><span class="line">      只要让其通过路由管控就可以，模拟成受路由管控的组件，即可根据路由对的改变而更新</span><br></pre></td></tr></table></figure></li></ul><h4 id="受控组件在props上增添的属性"><a href="#受控组件在props上增添的属性" class="headerlink" title="受控组件在props上增添的属性"></a>受控组件在props上增添的属性</h4><ul><li><p>HISTORY 基于 history stack历史信息栈</p><ul><li>PUSH 追加一条信息 this.props.history.push(‘./plan’)</li><li>GO 前往第几条 1，往后的一页， -1 往前的一页</li><li>GO-BACK &lt;=&gt; GO(-1)</li><li>GO-FORWARD &lt;=&gt; GO(1)</li></ul></li><li><p>LOCATION 获取当前hash路由渲染组件信息</p><ul><li>pathname 当前hash地址</li><li>search 当前 问号 + 传值<br><code>http://www.demo.com/#/plan?lx=1</code> -&gt; ?lx=1</li><li>state 基于REDIRECY/LINK/NAV-LINK, 对象中设置state,即可在这获取<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;LINK to=&#123; &#123;<span class="attr">pathname</span>: <span class="string">'plan'</span>, <span class="attr">search</span>:<span class="string">''</span>, <span class="attr">state</span>: &#123;&#125;&#125; &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>MATCH 获取当前路由匹配结果<ul><li>PARAMS 如果匹配地址参数，路径传参才使用</li></ul></li></ul><h6 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h6><ul><li>search <code>?id=1</code>， 需要解析，可支持刷新，地址栏有状态</li><li>state <code>to={ {pathname: &#39;/&#39;, state: id} }</code>, 直接获取，地址栏无状态，但是不可刷新，可以做成支付页等</li><li>URL传递 将参数作为地址一部分 restful /detail/3<ol><li>更改路由规则  <code>&lt;Route path=&quot;/detail:id&quot;</code> component={A}/&gt;</li><li>设置pathname <code>to={ {pathname: &#39;/detail/${id}&#39; } }</code></li><li>解析 获取到match, <code>let { match: {param} } = this.props</code> param.id即可 </li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux与react-redux</title>
      <link href="/2019/07/05/redux%E4%B8%8Ereact-redux/"/>
      <url>/2019/07/05/redux%E4%B8%8Ereact-redux/</url>
      
        <content type="html"><![CDATA[<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><blockquote><p>redux并不是为react而出，他可以运用到jQuery, vue等项目中</p></blockquote><p>统一的状态管理，将所有的状态值放在一起，通过对Reducer发送dispatch来达到统一管理<br><code>用户 -&gt; reducer</code>  <code>reducer -&gt; 数据</code> 类似一种中介者的模式</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>组件之间通信</li><li>数据临时缓存(即localstore的功能)，性能优化</li></ul><h4 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h4><p>用户发出修改，<code>dispatch</code> -&gt; reducer, 接收到数据，到<code>reducer</code>中进行匹配查找，<br>修改成功后，执行之前订阅过的方法 <code>subscribe</code>。<em>用户在订阅事件中进行了setState,触发视图更新</em></p><h4 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h4><ol><li><p>创建一个reducer </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reducer = (state, action) &#123;</span><br><span class="line">  <span class="comment">// .... action.type 为dispatch的type类型</span></span><br><span class="line">  <span class="keyword">return</span> state <span class="comment">// 返回最终的数据仓库</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建出数据仓库store</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux '</span></span><br><span class="line"><span class="keyword">let</span> store = createStore(reducer)</span><br></pre></td></tr></table></figure></li><li><p>对需要的数据进行取出(<code>getState</code>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;getState&#125; = store</span><br><span class="line"><span class="comment">// let &#123;xx&#125; = getState()</span></span><br></pre></td></tr></table></figure></li><li><p>订阅事件(<code>subscribe</code>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; subscribe &#125; = store</span><br><span class="line">subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// .... setState() 一般调用setState可以触发render更新</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line"><span class="keyword">let</span> unSubscribute = subscribe()</span><br><span class="line">unSubscribute()</span><br></pre></td></tr></table></figure></li><li><p>触发事件(<code>dispatch</code>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; dispatch &#125; = store</span><br><span class="line">dispatch(&#123;</span><br><span class="line">  type: XXX_XXX <span class="comment">//一般使用大写字母</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h2><p>是react对redux的进一步封装，让其操作更简洁</p><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol><li><p>根组件上提供<code>Provider</code>,并且使用其包围起来，并传入store</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Provider store=&#123;store&#125;&gt;<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>....<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>构造组件为connect组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Head extends React.Component&#123; ... &#125;</span><br><span class="line">mapStateToProps = (state) =&gt; &#123; return &#123;...state.xxx &#125; &#125;</span><br><span class="line">mapDispatchToProps = (dispatch) =&gt; &#123; return todo () &#123;...&#125; &#125;</span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(Head)</span><br><span class="line"></span><br><span class="line">// mapStateToProps，mapDispatchToProps两个方法都是讲数据挂在到Props上</span><br><span class="line">// 其余均内部按照正常，到时候改编数据 = 改变状态 触发componentWillReceiveProps</span><br><span class="line">// 完成重新渲染，并且会根据使用的数据自动绑定subscribe上去</span><br><span class="line"></span><br><span class="line">// 即所有的state,dispatch方法从this.props上解构即可</span><br></pre></td></tr></table></figure></li><li><p>从props上解构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; n &#125; = <span class="keyword">this</span>.props</span><br></pre></td></tr></table></figure></li></ol><h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><ol><li>使用导出的组件进行jsx语法编写</li><li>如果传入的props与redux转换后的属性冲突后，会发生覆盖</li></ol><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li><p>Provider<br>Provider 仅仅是将store放入上下文路径中，为了以后可以更好使用，直接渲染子元素即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.props.children</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>connect<br>该方法最终还是渲染Conponent, 直接在render()中渲染即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Componenet</span> &#123;<span class="attr">...this.state</span>&#125; &#123;<span class="attr">...this.props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><ol><li><p>将所有的state，或者dispatch中函数挂在到props<br>本质是挂载到自己的state上，方便后续<code>setState(...)</code> 来触发重新渲染，然而给下一层的时候，就是<code>&lt;Component {...state}/&gt;</code>，<br>也即将属性传递，从而在子组件中可以直接通过this获取到</p></li><li><p>自动订阅<br>由于他自己是以state的形式存储的，所以在<code>ComponentDidMount</code>中就订阅当数据发生改变，重新渲染，所以给子组件的Props改变，<br>会触发<code>componentWillReceiveProps</code>, 并且接下来会触发一系列的更新事件，从而达到了自动更新的目的。</p></li></ol><h4 id="工程化目录"><a href="#工程化目录" class="headerlink" title="工程化目录"></a>工程化目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">|-store</span><br><span class="line">| |-action          // 总的action目录</span><br><span class="line">|   |-personal.js</span><br><span class="line">|   |-vote.js</span><br><span class="line">|   |-index.js      // 汇总导出 import Action .... from '.../store/action'</span><br><span class="line">| |-reducer         // 存放reducer</span><br><span class="line">|   |-personal.js</span><br><span class="line">|   |-vote.js</span><br><span class="line">|   |-index.js      // 汇总导出的 import Reducer .... from '.../store/reducer'</span><br><span class="line">| |-action-types.js // 存放的所有action个中type类型常量 import * as TYPE from '.../store/action-types'</span><br><span class="line">| |-index.js        // 汇总reduce 并且创建出store,导出即可</span><br></pre></td></tr></table></figure><ul><li><p>reducer<br>个项的reducer还是以之前的方式，合并reducer考虑到重复的问题，所以进行了一层对象空间命名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">let</span> reducer = combineReducers(&#123;</span><br><span class="line">  personal,</span><br><span class="line">  vote</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取数据的时候</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = Store.getStore().personal</span><br></pre></td></tr></table></figure></li><li><p>action<br>action中,返回值是之前dispatch的参数，这里只是为了统一管理，其实还是之前的原理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vote = &#123;</span><br><span class="line">  support () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">type</span>: TYPE.VOTE_SUPPORT &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用的时候</span></span><br><span class="line">Store.dispatch(Action.vote.support())</span><br></pre></td></tr></table></figure></li></ul><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><ul><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(reducer, applyMiddleware(xxx中间件<span class="number">1</span>，xxx中间件<span class="number">2.</span>..) )</span><br></pre></td></tr></table></figure></li><li><p>redux-logger: 用于在控制台清晰显示出当前的REDUX的操作信息，以及修改后的状态信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">直接使用，无需配置，控制台会打印出相应的操作过程</span><br></pre></td></tr></table></figure></li><li><p>redux-thunk: 处理异步Dispatch派发任务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">addCustom (payload) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(&#123;</span><br><span class="line">        type: TYPE.ADD_CUSTOM,</span><br><span class="line">        payload</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">dispatch ( Action.custom.addCustom(payload) )</span><br><span class="line"><span class="comment">// 原理，第一次发出 action为undefined，并将state原样返回，获取到数据，再发一次正常的</span></span><br></pre></td></tr></table></figure></li><li><p>redux-promise: 处理异步Dispatch派发任务,支持promise操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">addCustom (payload) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: TYPE.ADD_CUSTOM,</span><br><span class="line">    payload: <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(payload)</span><br><span class="line">      &#125;, <span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">dispatch ( Action.custom.addCustom(payload) )</span><br><span class="line"><span class="comment">// 原理，第一次发出正常的，当发现接收到的数据为Promise，则不进行改变state(即不存储state),</span></span><br><span class="line"><span class="comment">// 后续完成后，再发一次正常的，并改变state</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react组件使用</title>
      <link href="/2019/07/05/react%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/07/05/react%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="jsx的使用"><a href="#jsx的使用" class="headerlink" title="jsx的使用"></a>jsx的使用</h2><ol><li>不建议将JSX直接渲染到dom中，一般都是渲染到一个DIV中（可能会频繁跟换，div比较适合）</li><li><code>{}</code>内是js，表达式，但是一定要存在返回值才可以，for 与 if 都不可以，不能直接放一个对象（<ul><li>除了给style赋值</li><li>除了React.element对象</li></ul></li><li>一般循环创建JSX元素都是采用map方法来完成，注意使用key={}来绑定key的值</li></ol><h2 id="React的流程"><a href="#React的流程" class="headerlink" title="React的流程"></a>React的流程</h2><ol><li>使用Babel将JSX语法规则 解析成React.createElement(type, props, children),仅仅是形式，也就是将JSX语法表述出来，但是此时并没有执行。</li><li><p>React.createElement(type, props, children) 执行，创建一个虚拟DOM，主要包含一下的部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: <span class="string">'xxx'</span>, <span class="comment">// 创建的元素标签名称</span></span><br><span class="line">  props: &#123; <span class="attr">key</span>: value, children&#125;, <span class="comment">// 用于标签上的属性， 并且将children放入</span></span><br><span class="line">  ref: xxx,</span><br><span class="line">  key: xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>RenderDOM.render(obj, container, callback) 渲染这个虚拟dom</p><ul><li>创建obj中的type -&gt; dom 元素 document.createElement()</li><li>根据属性，给dom标签上加属性，并且只循环自身属性（<code>hasOwnProperty</code>） 特殊属性要注意，比如className, style,</li><li>挂载dom节点到Container上， container.appendChild(dom)</li></ul></li></ol><h2 id="React申明组件的方式-基于函数"><a href="#React申明组件的方式-基于函数" class="headerlink" title="React申明组件的方式-基于函数"></a>React申明组件的方式-基于函数</h2><ul><li>所有的组件都是以函数的方式声明出去 <code>export default function Component (props) { ... }</code></li><li>要在该页面中引入 React才可以正常的使用，因为要使用React.createElement 来创建出元素</li><li>经过babel处理后，所有的属性都会以props对象的形式存在起来，所以函数的形参位置就是接受的函数</li></ul><h2 id="React申明组件的方式-基于组件Component"><a href="#React申明组件的方式-基于组件Component" class="headerlink" title="React申明组件的方式-基于组件Component"></a>React申明组件的方式-基于组件Component</h2><ul><li>基于JSX来craeate-element来转换为对象</li><li>继承React.component并且在构造器中要调用 super</li><li>组件中关于props的使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.super中传入props，因为是实例到对象上了，所以可以使用this.来进行访问</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span> (props) &#123; </span><br><span class="line">  <span class="keyword">super</span>(props)</span><br><span class="line">  <span class="keyword">this</span>.props <span class="comment">// 这里可以正常的访问到元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render ()&#123; </span><br><span class="line">  <span class="keyword">this</span>.props <span class="comment">// 这里可以正常的访问到元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.不传入，在constructor中是无法使用的，其他地方react做了默认关联</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span> () &#123;</span><br><span class="line">  <span class="keyword">super</span>()</span><br><span class="line">  <span class="keyword">this</span>.props <span class="comment">// 不可以访问到元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render ()&#123; </span><br><span class="line">  <span class="keyword">this</span>.props <span class="comment">// 这里可以正常的访问到元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="React申明组件-函数式-和-组件式异同"><a href="#React申明组件-函数式-和-组件式异同" class="headerlink" title="React申明组件 函数式 和 组件式异同"></a>React申明组件 函数式 和 组件式异同</h2><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><ul><li>都是通过JSX转换执行</li></ul><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><ul><li>函数式（静态组件） -&gt; 普通函数执行 其中 this为undefined<ul><li>操作较简单</li><li>适合简单调取的方式</li></ul></li><li>组件式 （动态组件）-&gt; 调用new来创建， 其中this为创建的虚拟元素<ul><li>较为复杂</li><li>能够使用生命周期函数</li><li>能够使用一些状态来动态更新内容 </li></ul></li></ul><h2 id="组件中的状态"><a href="#组件中的状态" class="headerlink" title="组件中的状态"></a>组件中的状态</h2><p>只有基于类的组件，有状态，可以使用生命周期函数</p><ul><li>属性只读（别人给的）</li><li>状态读写（自己设定）</li></ul><h4 id="模拟双向数据绑定"><a href="#模拟双向数据绑定" class="headerlink" title="模拟双向数据绑定"></a>模拟双向数据绑定</h4><p>可以在input的onchange事件中绑定setState()<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;text&#125; = <span class="keyword">this</span>.state</span><br><span class="line">&lt;input type=<span class="string">"text"</span> onchange=&#123;ev =&gt; &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    text: ev.target.value</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;&#125; value=&#123;text&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;&#123;text&#125;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h2><h4 id="组件第一次创建的生命周期"><a href="#组件第一次创建的生命周期" class="headerlink" title="组件第一次创建的生命周期"></a>组件第一次创建的生命周期</h4><ul><li><p>static defaultProps{} (默认参数，非正式的第一步，需安装组件 prop-types 才可配置)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">  speed: <span class="number">300</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">  speed: PropTypes.number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>constructor()<br>组件的构造函数</p></li><li>componentWillMount()<br>组件挂载之间</li><li>render()<br>渲染中</li><li>componentDidMount()<br>组件渲染完成后，一般将请求数据放到此处</li></ul><h4 id="改变状态的生命周期"><a href="#改变状态的生命周期" class="headerlink" title="改变状态的生命周期"></a>改变状态的生命周期</h4><ul><li>shouldComponentUpdate(nextProps, nextState)<br>钩子函数，必需返回true,才能够出发更新，一般做性能优化使用</li><li>componentWillUpdate(nextProps, nextState)<br>更新之前，此时的props, state还是之前的数据，可以理解为栈，此时还没有压栈</li><li>render<br>渲染中</li><li>componentDidUpdate()<br>更新完成后</li></ul><h4 id="传入的属性发生变化"><a href="#传入的属性发生变化" class="headerlink" title="传入的属性发生变化"></a>传入的属性发生变化</h4><ul><li>componentWillReceiveProps(nextProps, nextState)<br>传入的属性发生了变化，接下来执行改变状态生命周期的一系列</li></ul><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><ul><li>componentWillUnmount()<br>该组件被卸载之前，并不是销毁，组件还在</li></ul><h2 id="setState-注意"><a href="#setState-注意" class="headerlink" title="setState() 注意"></a>setState() 注意</h2><p>改变状态的这个方法是一个异步执行的方法，一定要慎用 <code>n: this.state.n++</code> 这类操作,最好使用<code>n: this.state.n+1</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state = &#123;</span><br><span class="line">  n: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.state.n)</span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  n: <span class="keyword">this</span>.state.n++</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.state.n)</span><br><span class="line"><span class="comment">// ======= 运行情况 (注意++ 是先赋值，后自增1)</span></span><br><span class="line"><span class="comment">//  主线程                       等待队列</span></span><br><span class="line">    <span class="number">1.</span> log(<span class="number">0</span>)</span><br><span class="line">                                <span class="number">2.</span> set <span class="keyword">this</span>.state.n = <span class="number">0</span> (此时还没到++)</span><br><span class="line">    <span class="number">3.</span> <span class="keyword">this</span>.state.n = <span class="number">1</span> (此时已经给他++了)</span><br><span class="line">    <span class="number">4.</span> log(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">执行情况 <span class="number">1</span> -&gt; <span class="number">3</span> -&gt; <span class="number">4</span> -&gt; <span class="number">2</span> 最终结束后 <span class="keyword">this</span>.state.n = <span class="number">0</span></span><br><span class="line">所以执行到下一个生命周期的时候，把n=<span class="number">0</span>带了过去</span><br></pre></td></tr></table></figure></p><h2 id="组件之间通信"><a href="#组件之间通信" class="headerlink" title="组件之间通信"></a>组件之间通信</h2><h4 id="属性传递-只读"><a href="#属性传递-只读" class="headerlink" title="属性传递 (只读)"></a>属性传递 (只读)</h4><p>通过props进行传递，父亲给儿子， 儿子设置给孙子<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index</span></span><br><span class="line">&lt;Parent n=&#123;<span class="number">1</span>&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Parent</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Parent</span></span><br><span class="line">&lt;Son n=&#123;<span class="keyword">this</span>.props.n&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Son</span></span><br><span class="line">&lt;div&gt;&#123;<span class="keyword">this</span>.props.n&#125;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="上下文传递-可二次修改，不影响其他组件"><a href="#上下文传递-可二次修改，不影响其他组件" class="headerlink" title="上下文传递 (可二次修改，不影响其他组件)"></a>上下文传递 (可二次修改，不影响其他组件)</h4><p>父组件先把需要给后代元素（包括孙子），全都设置好，后代组件需要信息，直接去调取即可（不需要儿子转递了）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==父组件==</span></span><br><span class="line"><span class="comment">// 设置上下文类型</span></span><br><span class="line"><span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">  n: PropTypes.number,</span><br><span class="line">  m: PropTypes.number</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向上下文传递数据</span></span><br><span class="line">getChildContext () &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;n, m&#125; <span class="comment">// 得到需要放置的值</span></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="comment">// 传递下去</span></span><br><span class="line">    n,</span><br><span class="line">    m</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==子组件==</span></span><br><span class="line"><span class="comment">// 子组件需要主动接受的信息</span></span><br><span class="line"><span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">  n: PropTypes.number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.context.n)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js设计模式总结</title>
      <link href="/2019/06/25/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
      <url>/2019/06/25/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h4><p>js中由于没有类的概念，所以单例不需要特别设计，只要保证一个引用即可，但是保存到全局对象又容易造成污染，<br>所以要结合闭包。注意：对象创建与单例的管理要分开。</p><h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p>将算法的使用 与 算法的设计 分离开， 可以看成可变的函数调用<br>主要是解决if else分支过多的问题</p><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>客户不方便直接访问某个对象的时候，提供一个对象来控制对这个对象的访问， 客户 -&gt; 代理 -&gt; 本体<br>虚拟代理 代理对象和实体之间应该是一致的，方便调用或者替换<br>缓存代理 访问某个对象之前，通过闭包看一下之前有没有缓存过，没有则执行并放入缓存 return cache[args] = fn()</p><h4 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h4><p>将迭代的过程抽离开，只关心最后的结果，并不关心迭代的过程<br>内部迭代器 调用方便，更适合看结果，js已经实现了内部迭代器forEach<br>外部迭代器 需要手动控制迭代过程，可自定义化比较高 （数据库resultMap类似，.next() 下一位）</p><h4 id="发布-订阅（观察者）-模式"><a href="#发布-订阅（观察者）-模式" class="headerlink" title="发布-订阅（观察者） 模式"></a>发布-订阅（观察者） 模式</h4><p>将 多个订阅者 放到 一个发布者存储起来（<em>尤其是对多个事件的异步执行</em>），当这个发布者发布对象的时候，会调用其所有订阅者的方法执行，<br>订阅者只需要按照规定订阅其发布者规定的方法即可，主要是事件的解耦，类似dom中的事件绑定</p><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><p>这里主要是针对绑定事件的解耦性， 将 <code>onclick = function () { xxx }</code> 分离开，变成约定好的固定模式,<br>用了一个第三者 （命令者）连接了起来， 做到了解耦性<br><code>onclick = commandObj.execute()</code> + <code>commandObj.execute = function () { xxx }</code></p><p>注意：<br>命令模式中的：”聪明模式”由于没有receiver，从代码结构上与 策略模式 接近，但是从用途上区分他们<br>命令模式，范围广，对什么执行什么命令<br>策略模式，指定范围，采用什么样的方法解决</p><p>“傻瓜模式”： 由receiver做execute,所以命令其实啥都不知道，就是得到命令，调execute<br>“聪明模式”： 直接在command中执行功能，不做转接，中间层直接执行代码</p><h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4><p>树形结构，只需要对树根发出指令，便会依此遍历所有的叶子方法的execute,是在命令模式的宏命令中延申而来<br>类似一个深度遍历， 如果是组合节点-&gt; 遍历执行所有的叶节点的 execute, 如果是叶子节点，直接执行其代码即可</p><h4 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h4><p>算法的框架由模板定义好，子类只需要按照一定的规则去实现一些细节的实现即可，有点类似于与java中的抽象类，接口类<br>他是一种原型继承的方式</p><h4 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h4><p>区分外部状态与内部状态其实就是找出变化的和不变化的，精髓是创建一个对象，依次改变其内部的属性，是一种<br>典型的 以时间换空间的例子， 对象池也类似享元模式虽然没有体现状态分离，但是有共享的体现</p><h4 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h4><p>用来简化if else的相关操作，每个方法只需要处理自己的那一片，处理不了就往后抛，直到有相应的<br>职责者可以处理即可。一般用字符串<code>&#39;nextSuccessor&#39;</code>表示传递给下一个职责对象，或者手动调用下去<br>一般最后一个链都要放一个接锅侠，要不就被放走了</p><h4 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h4><p>对象之间的引用过于复杂的时候，通常可以引入中介者，将每个人的关系都扯到中介者身上，这样会减少对象之间关系维护<br>的困扰，但是所有的关系都是由中介者来维护的，中介者一般会较大，处理逻辑较为复杂，但是其他类都是类似透明的，所有<br>关系都有中介者来维护，类之间是不知道自己是否与别人有关联(导致本身的关联不被关注)，折中使用<br>只需要维护中介者 就完成了类之间的关系维护</p><h4 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h4><p>主要是为了在不改动原函数的情况下，进行拓展，最主要的运用是在函数之前<code>.before</code>，函数之后<code>.after</code><br>使用了AOP编程的思想，让功能之间的耦合度下降，并且装配性变强，可以根据不同的需求去装配不同的功能</p><p>注意：（两者代码结构相似，但是要从目的来进行区分）<br>装饰者模式： 通常会添加一连串的装饰者，给他拓展之外的一些功能。<br>代理模式： 通常只有一个代理对象，而他的目的是增强原有的功能</p><h4 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h4><p>根据不同的场景来解决不同的问题，主要是在不同状态下表现出的方法不一样，将各个事件绑定到状态中<br>定义且切换状态的方式，省去了大部分if else 的逻辑结构,其实就是鸭子类型，进行替换调这个替换对象中的方法</p><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><p>主要是在不改动原有代码的情况下 进行修改，在代码的编写阶段是不会有的，肯定是在对接老项目的时候，<br>修改了某些接口，从而进行变通的一种方式，或是为了兼容其他的API,或者是做方法之间的转换的</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>JavaScript中的设计模式，很多都是采用了高阶函数的一种变形， 其中大量充斥着闭包的概念<br>很多设计模式看似相同，结构也是大部分一样的，但是主要是思想上的不同，他们所针对，所解决的问题不一致<br>而不能单单从形式结构上区分它们，以及JavaScript是没有类的概念的，所以需要灵活的使用鸭子模式来达到<br>不同的设计</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>14适配器模式</title>
      <link href="/2019/06/25/14%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/25/14%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 适配器模式</span></span><br><span class="line"><span class="comment">  主要是为了适配之前的功能， 或者是为了在不修改代码的情况下 进行不同接口之间的通信</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三方接口不同</span></span><br><span class="line"><span class="keyword">var</span> googleMap = &#123;</span><br><span class="line">  show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始渲染谷歌地图'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> baiduMap = &#123;</span><br><span class="line">  show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始渲染百度地图'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> renderMap = <span class="function"><span class="keyword">function</span> (<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (map.show <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">    map.show()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">renderMap(googleMap)</span><br><span class="line">renderMap(baiduMap)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tencentMap = &#123;</span><br><span class="line">  display: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始渲染腾讯地图'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时需要一个tencent地图的适配器</span></span><br><span class="line"><span class="keyword">var</span> tencentMapAdapter = &#123;</span><br><span class="line">  show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tencentMap.display()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">renderMap(tencentMap)</span><br><span class="line">renderMap(tencentMapAdapter)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要的类型不一样</span></span><br><span class="line"><span class="keyword">var</span> getCity = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> city = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'Lanzhou'</span>,<span class="attr">id</span>: <span class="string">'11'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'Hangzhou'</span>,<span class="attr">id</span>: <span class="string">'12'</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> city</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getCity())</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0: Object &#123; name: "Lanzhou", id: "11" &#125;</span></span><br><span class="line"><span class="comment">1: Object &#123; name: "Hangzhou", id: "12" &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在需求需要这样的格式 &#123;11: 'Lanzhou', 12: 'Hangzhou'&#125;</span></span><br><span class="line"><span class="comment">// 再不改动原有代码的情况下 只能使用适配器</span></span><br><span class="line"><span class="keyword">var</span> cityAddressAdapter = <span class="function"><span class="keyword">function</span> (<span class="params">oldAddressfn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> address = &#123;&#125;,</span><br><span class="line">    oldAddress = oldAddressfn()</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, c; c = oldAddress[i++]; ) &#123;</span><br><span class="line">    address[c.id] = c.name</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> address</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">getCity = cityAddressAdapter(getCity)</span><br><span class="line"><span class="built_in">console</span>.log( getCity() )</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>13状态模式</title>
      <link href="/2019/06/25/13%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/25/13%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 状态模式， 在不同的状态下面 动态的为不同的事件绑定不同的方法， </span></span><br><span class="line"><span class="comment"> 这里模拟 电灯开关的例子， 关灯状态  按钮作用 - 开灯  开灯状态 按钮作用 - 关灯</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不适用状态模式 耦合性比较高，各种状态耦合在一起</span></span><br><span class="line"><span class="keyword">var</span> Light = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.state = <span class="string">'off'</span></span><br><span class="line">  <span class="keyword">this</span>.button = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">Light.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> button = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>),</span><br><span class="line">    self = <span class="keyword">this</span></span><br><span class="line">  </span><br><span class="line">  button.innerHTML = <span class="string">'开关'</span></span><br><span class="line">  <span class="keyword">this</span>.button = <span class="built_in">document</span>.body.appendChild( button )</span><br><span class="line">  <span class="keyword">this</span>.button.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    self.buttonWasPressed()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Light.prototype.buttonWasPressed = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'on'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'关灯'</span>)</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'off'</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'off'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开灯'</span>)</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'on'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> light = <span class="keyword">new</span> Light()</span><br><span class="line">light.init()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统模拟类的一种写法 状态模式 对象方法语言中的实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// offLightState</span></span><br><span class="line"><span class="keyword">var</span> OffLightState = <span class="function"><span class="keyword">function</span> (<span class="params">light</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.light = light</span><br><span class="line">&#125;</span><br><span class="line">OffLightState.prototype.buttonWasPressed = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'弱光'</span>) <span class="comment">// offLightState对应行为</span></span><br><span class="line">  <span class="keyword">this</span>.light.setState(<span class="keyword">this</span>.light.weakLightState)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WeakLightState</span></span><br><span class="line"><span class="keyword">var</span> WeakLightState = <span class="function"><span class="keyword">function</span> (<span class="params">light</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.light = light</span><br><span class="line">&#125;</span><br><span class="line">WeakLightState.prototype.buttonWasPressed = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'强光'</span>) <span class="comment">// WeakLightState对应行为</span></span><br><span class="line">  <span class="keyword">this</span>.light.setState(<span class="keyword">this</span>.light.strongLightState)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StrongLightState</span></span><br><span class="line"><span class="keyword">var</span> StrongLightState = <span class="function"><span class="keyword">function</span> (<span class="params">light</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.light = light</span><br><span class="line">&#125;</span><br><span class="line">StrongLightState.prototype.buttonWasPressed = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'关灯'</span>) <span class="comment">// StrongLightState对应行为</span></span><br><span class="line">  <span class="keyword">this</span>.light.setState(<span class="keyword">this</span>.light.offLightState)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Light = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.offLightState = <span class="keyword">new</span> OffLightState(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">this</span>.weakLightState = <span class="keyword">new</span> WeakLightState(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">this</span>.strongLightState = <span class="keyword">new</span> StrongLightState(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">this</span>.button = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">Light.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> button = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>),</span><br><span class="line">    self = <span class="keyword">this</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">this</span>.button = <span class="built_in">document</span>.body.appendChild(button)</span><br><span class="line">  <span class="keyword">this</span>.button.innerHTML = <span class="string">'开关类的状态机'</span></span><br><span class="line">  <span class="keyword">this</span>.currentState = <span class="keyword">this</span>.offLightState <span class="comment">// 设置初始化关灯的状态</span></span><br><span class="line">  <span class="keyword">this</span>.button.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    self.currentState.buttonWasPressed()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Light.prototype.setState = <span class="function"><span class="keyword">function</span> (<span class="params"> newState </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.currentState = newState</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> light = <span class="keyword">new</span> Light()</span><br><span class="line">light.init()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript 版本的状态机 FSM Finite State Machine 有限状态机</span></span><br><span class="line"><span class="keyword">var</span> Light = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.currentState = FSM.off</span><br><span class="line">  <span class="keyword">this</span>.button = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">Light.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> button = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>),</span><br><span class="line">    self = <span class="keyword">this</span></span><br><span class="line">  </span><br><span class="line">  button.innerHTML = <span class="string">'开关灯FSM实现模式'</span></span><br><span class="line">  <span class="keyword">this</span>.button = <span class="built_in">document</span>.body.appendChild(button)</span><br><span class="line">  <span class="keyword">this</span>.button.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    self.currentState.buttonWasPressed.call(self)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> FSM = &#123;</span><br><span class="line">  off: &#123;</span><br><span class="line">    buttonWasPressed: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'开灯'</span>)</span><br><span class="line">      <span class="keyword">this</span>.button.innerHTML = <span class="string">'下一次关灯'</span></span><br><span class="line">      <span class="keyword">this</span>.currentState = FSM.on</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  on: &#123;</span><br><span class="line">    buttonWasPressed: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'关灯'</span>)</span><br><span class="line">      <span class="keyword">this</span>.button.innerHTML = <span class="string">'下一次开灯'</span></span><br><span class="line">      <span class="keyword">this</span>.currentState = FSM.off</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> light = <span class="keyword">new</span> Light()</span><br><span class="line">light.init()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果有修改 只需呀在状态机中修改即可,不用改动原始的代码</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>12装饰者模式</title>
      <link href="/2019/06/25/12%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/25/12%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 装饰者模式，通常使用一连串的对象来为其增强功能， 其优点 就是 在不改动源码的情况下进行增加</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  导弹发射的例子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plane = &#123;</span><br><span class="line">  fire: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'发射子弹 biu~'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">plane.fire()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> missileDecorator = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'发射导弹'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fire1 = plane.fire</span><br><span class="line">plane.fire = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  fire1()</span><br><span class="line">  missileDecorator()</span><br><span class="line">&#125;</span><br><span class="line">plane.fire()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> atomDecorator = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'发射原子弹'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fire2 = plane.fire</span><br><span class="line">plane.fire = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  fire2()</span><br><span class="line">  atomDecorator()</span><br><span class="line">&#125;</span><br><span class="line">plane.fire()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 装饰函数</span></span><br><span class="line"><span class="comment"> 在不改变原有函数的前提下，进行对函数功能的扩充，注意原this指向的问题，所以要使用apply的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通模式 不考虑this的问题</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _a = a</span><br><span class="line"></span><br><span class="line">a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  _a()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">&#125;</span><br><span class="line">a()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 考虑this指向的  如 document.getElementById</span></span><br><span class="line"><span class="comment">// 使用AOP进行装饰</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span> (<span class="params">beforefn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> __self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    beforefn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">return</span> __self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span> (<span class="params">afterfn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> __self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = __self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    afterfn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'==========================='</span>)</span><br><span class="line"><span class="built_in">window</span>.onload = (<span class="built_in">window</span>.onload || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;).after(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'2'</span>)</span><br><span class="line">&#125;).after(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'3'</span>)</span><br><span class="line">&#125;).after(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'4'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">window</span>.onload = (<span class="built_in">window</span>.onload || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;).before(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以使用此特性改变参数</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(param) <span class="comment">// &#123; a: "a", b: "b" &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">func = func.before(<span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">  param.b = <span class="string">'b'</span></span><br><span class="line">&#125;)</span><br><span class="line">func(&#123; <span class="attr">a</span>: <span class="string">'a'</span> &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 结合AOP做请求加token</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ajax = <span class="function"><span class="keyword">function</span> (<span class="params">type, url, param</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(param)</span><br><span class="line">  <span class="comment">// todo.....省略这里</span></span><br><span class="line">&#125;</span><br><span class="line">ajax(<span class="string">'GET'</span>, <span class="string">'api.com/userinfo'</span>, &#123; <span class="attr">name</span>: <span class="string">'zhn'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置一个获取token的方法 用来校验api</span></span><br><span class="line"><span class="keyword">var</span> getToken = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Token'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最基本的思想就是 硬编码到内部， 不利于拓展， 不利于后续的维护</span></span><br><span class="line"><span class="keyword">var</span> ajax = <span class="function"><span class="keyword">function</span> (<span class="params">type, url, param</span>) </span>&#123;</span><br><span class="line">  param = param || &#123;&#125;</span><br><span class="line">  param.token = getToken()</span><br><span class="line">  <span class="built_in">console</span>.log(param)</span><br><span class="line">  <span class="comment">// todo.....省略这里</span></span><br><span class="line">&#125;</span><br><span class="line">ajax(<span class="string">'GET'</span>, <span class="string">'api.com/userinfo'</span>, &#123; <span class="attr">name</span>: <span class="string">'zhn'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里使用AOP的思想 加入装饰模式 </span></span><br><span class="line"><span class="built_in">Function</span>.prototype.befor = <span class="function"><span class="keyword">function</span> (<span class="params">beforefn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> __self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    beforefn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">return</span> __self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ajax = ajax.before(<span class="function"><span class="keyword">function</span> (<span class="params">type, url, param</span>) </span>&#123;</span><br><span class="line">  param.token = getToken()</span><br><span class="line">&#125;)</span><br><span class="line">ajax(<span class="string">'GET'</span>, <span class="string">'api.com/userinfo'</span>, &#123; <span class="attr">name</span>: <span class="string">'zhn'</span> &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 表单验证方式 基于AOP思想,及时迁移了项目，或是改变环境，可以随时取消验证，取消before(validate) 即可，重新绑定一个空函数</span></span><br><span class="line"><span class="comment"> 通常表单提交会将 校验方法 和 提交ajax方法配到一起，但是这样会显得很臃肿，表单提交只应该包含一个提交</span></span><br><span class="line"><span class="comment"> 对于表单的校验功能，应该作为一个装饰者，来切入到提交之前</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前的模式</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> validata = function () &#123;</span></span><br><span class="line"><span class="comment">    // xxxxxx 一大堆验证逻辑</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> ajax('GET', 'api.com/userinfo', &#123; name: 'zhn' &#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用AOP进行优化  如果验证的方式 为 false 则阻止提交</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span> (<span class="params">beforefn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> __self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (beforefn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="comment">// 先前约定的逻辑 返回false直接阻止提交，不执行后面的函数</span></span><br><span class="line">      <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> __self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>)</span><br><span class="line"><span class="keyword">var</span> password = <span class="built_in">document</span>.getElementById(<span class="string">'password'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> validata = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (username.value === <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用户名不能为空'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (password.value === <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'密码不能为空'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> submit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> param = &#123;</span><br><span class="line">    username: username.value,</span><br><span class="line">    password: password.value</span><br><span class="line">  &#125;</span><br><span class="line">  ajax(<span class="string">'GET'</span>, <span class="string">'api.com/userinfo'</span>, &#123; <span class="attr">name</span>: <span class="string">'zhn'</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line">submit = submit.before(validata) <span class="comment">// 提前把检验函数 以AOP的形式放进去</span></span><br><span class="line"><span class="comment">// submit()</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>11中介者模式</title>
      <link href="/2019/06/25/11%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/25/11%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  中介者模式， 所有类之间的关系都有 一个中介者统一维护， 减少了类与类之间的关联，</span></span><br><span class="line"><span class="comment">   这种关系要折中的考虑，如果类之间的关系都取消，等到类多了基本的关联可能都会丢失，中介者会越来越复杂</span></span><br><span class="line"><span class="comment">   例子，统一一处的修改，改变所有的位置</span></span><br><span class="line"><span class="comment">   并且要 选择颜色， 选择数量， 在最后的按钮上做提示信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> colortSelect = <span class="built_in">document</span>.getElementById(<span class="string">'colorSelect'</span>)</span><br><span class="line"><span class="keyword">var</span> numberInput = <span class="built_in">document</span>.getElementById(<span class="string">'numberInput'</span>)</span><br><span class="line"><span class="keyword">var</span> colorInfo = <span class="built_in">document</span>.getElementById(<span class="string">'colorInfo'</span>)</span><br><span class="line"><span class="keyword">var</span> numberInfo = <span class="built_in">document</span>.getElementById(<span class="string">'numberInfo'</span>)</span><br><span class="line"><span class="keyword">var</span> nextBtn = <span class="built_in">document</span>.getElementById(<span class="string">'nextBtn'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统方式 要对colorSelect numberInput 依次绑定事件,其核心业务代码可能是相同的</span></span><br><span class="line"><span class="keyword">var</span> goods = &#123;</span><br><span class="line">  <span class="string">"red"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">"blue"</span>: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 颜色框的逻辑  */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">colortSelect.onchange = function () &#123; </span></span><br><span class="line"><span class="comment">  var color = this.value,</span></span><br><span class="line"><span class="comment">    number = numberInput.value,</span></span><br><span class="line"><span class="comment">    stock = goods[color]</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  colorInfo.innerHTML = color</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  if (!color) &#123;</span></span><br><span class="line"><span class="comment">    nextBtn.disabled = true</span></span><br><span class="line"><span class="comment">    nextBtn.innerHTML = "请选择手机颜色"</span></span><br><span class="line"><span class="comment">    return</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  if (!/^[1-9]\d*$/.test(number)) &#123; // 判断非正整数</span></span><br><span class="line"><span class="comment">    nextBtn.disabled = true</span></span><br><span class="line"><span class="comment">    nextBtn.innerHTML = "请输入正确的购买数量"</span></span><br><span class="line"><span class="comment">    return</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  if (number &gt; stock) &#123;</span></span><br><span class="line"><span class="comment">    nextBtn.disabled = true</span></span><br><span class="line"><span class="comment">    nextBtn.innerHTML = "库存不足"</span></span><br><span class="line"><span class="comment">    return</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">   nextBtn.disabled = false</span></span><br><span class="line"><span class="comment">  nextBtn.innerHTML = "加入购物车"</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* 输入框的逻辑 */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">numberInput.oninput = function () &#123;</span></span><br><span class="line"><span class="comment">  var number = this.value,</span></span><br><span class="line"><span class="comment">    color = colortSelect.value,</span></span><br><span class="line"><span class="comment">    stock = goods[color]</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  colorInfo.innerHTML = color</span></span><br><span class="line"><span class="comment">  numberInfo.innerHTML = number</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  if (!color) &#123;</span></span><br><span class="line"><span class="comment">    nextBtn.disabled = true</span></span><br><span class="line"><span class="comment">    nextBtn.innerHTML = "请选择手机颜色"</span></span><br><span class="line"><span class="comment">    return</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  if (!/^[1-9]\d*$/.test(number)) &#123; // 判断非正整数</span></span><br><span class="line"><span class="comment">    nextBtn.disabled = true</span></span><br><span class="line"><span class="comment">    nextBtn.innerHTML = "请输入正确的购买数量"</span></span><br><span class="line"><span class="comment">    return</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  if (number &gt; stock) &#123;</span></span><br><span class="line"><span class="comment">    nextBtn.disabled = true</span></span><br><span class="line"><span class="comment">    nextBtn.innerHTML = "库存不足"</span></span><br><span class="line"><span class="comment">    return</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  nextBtn.disabled = false</span></span><br><span class="line"><span class="comment">  nextBtn.innerHTML = "加入购物车"</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* 虽然可以把相同的代码抽离出来，可是如果要拓展，或者是加入其它的私有逻辑</span></span><br><span class="line"><span class="comment">  要求修改代码，不符合开闭原则， 所以使用一个中介者管理他们</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 中介者 */</span></span><br><span class="line"><span class="keyword">var</span> mediator = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> colortSelect = <span class="built_in">document</span>.getElementById(<span class="string">'colorSelect'</span>),</span><br><span class="line">    numberInput = <span class="built_in">document</span>.getElementById(<span class="string">'numberInput'</span>),</span><br><span class="line">    colorInfo = <span class="built_in">document</span>.getElementById(<span class="string">'colorInfo'</span>),</span><br><span class="line">    numberInfo = <span class="built_in">document</span>.getElementById(<span class="string">'numberInfo'</span>),</span><br><span class="line">    nextBtn = <span class="built_in">document</span>.getElementById(<span class="string">'nextBtn'</span>)</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    changed: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123; <span class="comment">// obj是哪一个对象改变了</span></span><br><span class="line">      <span class="keyword">var</span> color = colortSelect.value,</span><br><span class="line">        number = numberInput.value,</span><br><span class="line">        stock = goods[color]</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (obj === colortSelect) &#123; <span class="comment">// colorSelect 发生改变</span></span><br><span class="line">        colorInfo.innerHTML = color</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj === numberInput) &#123;</span><br><span class="line">        numberInfo.innerHTML = number</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (!color) &#123;</span><br><span class="line">        nextBtn.disabled = <span class="literal">true</span></span><br><span class="line">        nextBtn.innerHTML = <span class="string">"请选择手机颜色"</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="regexp">/^[1-9]\d*$/</span>.test(number)) &#123; <span class="comment">// 判断非正整数</span></span><br><span class="line">        nextBtn.disabled = <span class="literal">true</span></span><br><span class="line">        nextBtn.innerHTML = <span class="string">"请输入正确的购买数量"</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (number &gt; stock) &#123;</span><br><span class="line">        nextBtn.disabled = <span class="literal">true</span></span><br><span class="line">        nextBtn.innerHTML = <span class="string">"库存不足"</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      nextBtn.disabled = <span class="literal">false</span></span><br><span class="line">      nextBtn.innerHTML = <span class="string">'放入购物车'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件函数</span></span><br><span class="line">colortSelect.onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  mediator.changed(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">numberInput.oninput = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  mediator.changed(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 颜色框和输入框 完全不知道对方的存在， 由于逻辑都是放在中介者当中的， 所以去掉其他类对整体没什么影响</span></span><br><span class="line"><span class="comment"> 虽然功能之间的耦合减少了， 但由于把逻辑内聚到中介者，业务上没有体现出来 颜色 和 数量 之间的关系 </span></span><br><span class="line"><span class="comment"> 拓展性， 只需要在中介者增加拓展的代码， 即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">var mediator = (function ()&#123;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  var memorySelect = document.getElementById('memorySelect')</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  return &#123;</span></span><br><span class="line"><span class="comment">    changed: function (obj) &#123;</span></span><br><span class="line"><span class="comment">      var memory = memorySelect.value</span></span><br><span class="line"><span class="comment">      // .... 相关逻辑</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">      if (obj === memorySelect) &#123;</span></span><br><span class="line"><span class="comment">        memoryInfo.innerHTML = memory</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;)()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>10职责链模式</title>
      <link href="/2019/06/25/10%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/25/10%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 职责链模式，用于传递对象，依次拆分，是自己解决的类型就解决，否则就传递下去，交给别人解决</span></span><br><span class="line"><span class="comment"> 主要是避免了繁琐的 if else 结构， 整个代码看起来结构比较清晰，组织比较明确。</span></span><br><span class="line"><span class="comment"> 例子，使用优惠券</span></span><br><span class="line"><span class="comment"> 交了500定金， 100 优惠券</span></span><br><span class="line"><span class="comment"> 交了200定金   50 优惠券</span></span><br><span class="line"><span class="comment"> 没交定金/定金没有付款    没有优惠券</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 之前使用if else</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order = <span class="function"><span class="keyword">function</span> (<span class="params"> orderType, pay, stock </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (orderType === <span class="number">1</span>) &#123; <span class="comment">// 100优惠券</span></span><br><span class="line">    <span class="keyword">if</span> ( pay === <span class="literal">true</span>) &#123; <span class="comment">// 付定金</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'得到100优惠券'</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'普通购买'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'手机没有库存'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType === <span class="number">2</span>) &#123; <span class="comment">// 50优惠券</span></span><br><span class="line">    <span class="keyword">if</span> ( pay === <span class="literal">true</span>) &#123; <span class="comment">// 付定金</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'得到50优惠券'</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'普通购买'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'手机没有库存'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 没有优惠券</span></span><br><span class="line">    <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'普通购买'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'手机没有库存'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">order(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">10</span>)</span><br><span class="line">order(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 职责链过渡代码</span></span><br><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span> (<span class="params"> orderType, pay, stock </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'500元定金预购，得到100优惠券'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 处理不了全丢给下一个</span></span><br><span class="line">    order200( orderType, pay, stock )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span> (<span class="params"> orderType, pay, stock </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'200元定金预购，得到50优惠券'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 处理不了全丢给下一个</span></span><br><span class="line">    orderNormal( orderType, pay, stock )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="function"><span class="keyword">function</span> (<span class="params"> orderType, pay, stock </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正常购买'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 处理不了全丢给下一个</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'库存不足'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">order500(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">10</span>)</span><br><span class="line">order500(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上代码存在耦合性比较大, 解耦</span></span><br><span class="line"><span class="keyword">var</span> Chain = <span class="function"><span class="keyword">function</span> (<span class="params"> fn </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.fn = fn</span><br><span class="line">  <span class="keyword">this</span>.successor = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">Chain.prototype.setNextSuccessor = <span class="function"><span class="keyword">function</span> (<span class="params">successor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.successor = successor</span><br><span class="line">&#125;</span><br><span class="line">Chain.prototype.passRequest = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ret = <span class="keyword">this</span>.fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  <span class="keyword">if</span> (ret === <span class="string">'nextSuccessor'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.successor &amp;&amp; <span class="keyword">this</span>.successor.passRequest.apply(<span class="keyword">this</span>.successor, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span> (<span class="params"> orderType, pay, stock </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'500元定金预购，得到100优惠券'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 处理不了全丢给下一个</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'nextSuccessor'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span> (<span class="params"> orderType, pay, stock </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'200元定金预购，得到50优惠券'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 处理不了全丢给下一个</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'nextSuccessor'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="function"><span class="keyword">function</span> (<span class="params"> orderType, pay, stock </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正常购买'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 处理不了全丢给下一个</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'库存不足'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> chainOrder500 = <span class="keyword">new</span> Chain(order500)</span><br><span class="line"><span class="keyword">var</span> chainOrder200 = <span class="keyword">new</span> Chain(order200)</span><br><span class="line"><span class="keyword">var</span> chainOrderNormal = <span class="keyword">new</span> Chain(orderNormal)</span><br><span class="line">chainOrder500.setNextSuccessor(chainOrder200)</span><br><span class="line">chainOrder200.setNextSuccessor(chainOrderNormal)</span><br><span class="line"></span><br><span class="line">chainOrder500.passRequest(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">10</span>)</span><br><span class="line">chainOrder500.passRequest(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// js AOP的思想写法 类似永远先执行他自己，如果返回是retSuccessor就再调用他后面的函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">if</span> (ret === <span class="string">'nextSuccessor'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order500 = <span class="function"><span class="keyword">function</span> (<span class="params"> orderType, pay, stock </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'500元定金预购，得到100优惠券'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 处理不了全丢给下一个</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'nextSuccessor'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> order200 = <span class="function"><span class="keyword">function</span> (<span class="params"> orderType, pay, stock </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'200元定金预购，得到50优惠券'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 处理不了全丢给下一个</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'nextSuccessor'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="function"><span class="keyword">function</span> (<span class="params"> orderType, pay, stock </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正常购买'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 处理不了全丢给下一个</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'库存不足'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> order = order500.after(order200).after(orderNormal)</span><br><span class="line">order(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">10</span>)</span><br><span class="line">order(<span class="number">1</span>, <span class="literal">false</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文件上传案例</span></span><br><span class="line"><span class="comment">  重构之前迭代器模式，这里使用职责链模式更好一些</span></span><br><span class="line"><span class="comment">  一般职责链最后要有一个接锅侠</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getActiveObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">'TXFTNActiveX.FTNUpload'</span>)</span><br><span class="line">  &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'nextSuccessor'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFlashUplaodObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//   if ( supportFlash() ) &#123; // 模拟支持插件</span></span><br><span class="line"><span class="comment">//     var str = '&lt;object type="application/x-shockwave-flash"&gt;&lt;/object&gt;'</span></span><br><span class="line"><span class="comment">//     return $(str).appendTo( $('body') )</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'nextSuccessor'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFormUploadObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str = <span class="string">'&lt;input name="File" type="File"&gt;&lt;/input&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123; <span class="comment">// 与之前一样</span></span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">if</span> (ret === <span class="string">'nextSuccessor'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getUploadObj = getActiveObj.after(getFlashUplaodObj).after(getFormUploadObj)</span><br><span class="line"><span class="built_in">console</span>.log(getUploadObj())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>09享元模式</title>
      <link href="/2019/06/25/09%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/25/09%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  享元模式 flyweight,将相似的部分抽取出来复用，但是会牺牲时间为代价（替换属性所花费的一些时间） </span></span><br><span class="line"><span class="comment">  移动端浏览器 通常分配的内存不够多，如果创建了大量的对象，很有可能会崩溃</span></span><br><span class="line"><span class="comment">  最主要的就是 找到内部状态 和 外部状态</span></span><br><span class="line"><span class="comment">  内部状态： 每一个元的本质区别</span></span><br><span class="line"><span class="comment">  外部状态： 可以将不同的属性给这个元，派生出多个对象，</span></span><br><span class="line"><span class="comment">  一张卷子，其题目就是内部状态，每个人的考生信息与答案就像外部状态，用这个外部状态可以生成全班所有人的考卷</span></span><br><span class="line"><span class="comment">  ，而卷子始终都是一张（这里假设卷子是班级共用一张，大家写在各自答题卡上（外部状态上））</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  模特拍照的例子 现在有50件男装，50件女装 依次模特展示拍照</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用享元模式， 对象爆炸, 这里50个男模特，50个女模特是一种浪费</span></span><br><span class="line"><span class="keyword">var</span> Model = <span class="function"><span class="keyword">function</span> (<span class="params">sex, underwear</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sex = sex</span><br><span class="line">  <span class="keyword">this</span>.underwear = underwear</span><br><span class="line">&#125;</span><br><span class="line">Model.prototype.takePhoto = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'sex: '</span> + <span class="keyword">this</span>.sex + <span class="string">' underwear: '</span> + <span class="keyword">this</span>.underwear)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 男模特拍照</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> maleModel = <span class="keyword">new</span> Model(<span class="string">'male'</span>, <span class="string">'underwear'</span> + i)</span><br><span class="line">  maleModel.takePhoto()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 女模特拍照</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> femaleModel = <span class="keyword">new</span> Model(<span class="string">'female'</span>, <span class="string">'underwear'</span> + i)</span><br><span class="line">  femaleModel.takePhoto()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用享元模式，不停修改模特的属性即可,只需要根据性别 创建两个模特即可</span></span><br><span class="line"><span class="keyword">var</span> Model = <span class="function"><span class="keyword">function</span> (<span class="params">sex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sex = sex</span><br><span class="line">&#125;</span><br><span class="line">Model.prototype.takePhoto = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'sex: '</span> + <span class="keyword">this</span>.sex + <span class="string">' underwear: '</span> + <span class="keyword">this</span>.underwear)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> maleModel = <span class="keyword">new</span> Model(<span class="string">'male'</span>),</span><br><span class="line">  femaleModel = <span class="keyword">new</span> Model(<span class="string">'female'</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 男模特拍照</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">  maleModel.underwear = <span class="string">'underwear'</span> + i</span><br><span class="line">  maleModel.takePhoto()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 女模特拍照</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">  femaleModel.underwear = <span class="string">'underwear'</span> + i</span><br><span class="line">  femaleModel.takePhoto()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  文件上传的例子， 根据上传控件的不同，使用不同的创建方式 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂对象实例化,创建 元 的地方, 很像单例模式</span></span><br><span class="line"><span class="keyword">var</span> Upload = <span class="function"><span class="keyword">function</span> (<span class="params">uploadType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.uploadType = uploadType</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> UploadFactory = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> createdFlyWeightObjs = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    create: <span class="function"><span class="keyword">function</span> (<span class="params">uploadType</span>) </span>&#123; <span class="comment">// 内部状态是控件类型 （html5上传，还是falsh上传）</span></span><br><span class="line">      <span class="keyword">if</span> (createdFlyWeightObjs[uploadType]) &#123;</span><br><span class="line">         <span class="keyword">return</span> createdFlyWeightObjs[uploadType]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> createdFlyWeightObjs[uploadType] = <span class="keyword">new</span> Upload(uploadType)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部状态管理器,保存所有的外部状态</span></span><br><span class="line"><span class="keyword">var</span> uploadManager = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> uploadDatabase = &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span> (<span class="params">id, uploadType, fileName, fileSize</span>) </span>&#123; <span class="comment">// 增加一个外部状态</span></span><br><span class="line">      <span class="keyword">var</span> flyweightObj = UploadFactory.create(uploadType)</span><br><span class="line">      <span class="comment">// ... 相关操作</span></span><br><span class="line">      uploadDatabase[id] = &#123;</span><br><span class="line">        fileName,</span><br><span class="line">        fileSize</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> flyweightObj</span><br><span class="line">    &#125;,</span><br><span class="line">    setExternalState: <span class="function"><span class="keyword">function</span> (<span class="params">id, flyweightObj</span>) </span>&#123; <span class="comment">// 设置当前的元的外部状态</span></span><br><span class="line">      <span class="keyword">var</span> uploadData = uploadDatabase[id]</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> uploadData) &#123;</span><br><span class="line">        flyweightObj[key] = uploadData[key]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> startUpload = <span class="function"><span class="keyword">function</span> (<span class="params">uploadType, files</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, file; file = files[i++]; ) &#123;</span><br><span class="line">    <span class="keyword">var</span> uploadObj = uploadManager.add(file.id, uploadType, file.fileName, file.fileSize)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 让uploadDatabase中批量上传 marcoUpload</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传文件</span></span><br><span class="line">startUpload(<span class="string">'plugin'</span>, [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    fileName: <span class="string">'1.txt'</span>,</span><br><span class="line">    fileSize: <span class="number">1000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    fileName: <span class="string">'2.txt'</span>,</span><br><span class="line">    fileSize: <span class="number">2000</span></span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">startUpload(<span class="string">'flash'</span>, [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">4</span>,</span><br><span class="line">    fileName: <span class="string">'4.txt'</span>,</span><br><span class="line">    fileSize: <span class="number">4000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">5</span>,</span><br><span class="line">    fileName: <span class="string">'5.txt'</span>,</span><br><span class="line">    fileSize: <span class="number">5000</span></span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然如果要修改状态，比如添加每个文件后还要进行一些其他操作</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">id, uploadType, fileName, fileSize</span>) </span>&#123; <span class="comment">// 增加一个外部状态</span></span><br><span class="line">  <span class="keyword">var</span> flyweightObj = UploadFactory.create(uploadType)</span><br><span class="line">  <span class="comment">// ... 相关操作</span></span><br><span class="line">  uploadDatabase[id] = &#123;</span><br><span class="line">    fileName,</span><br><span class="line">    fileSize</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取这个文件的完全对象</span></span><br><span class="line">  <span class="keyword">var</span> dom = &#123;&#125;</span><br><span class="line">  dom.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    flyweightObj.todo(id) <span class="comment">// todo这个方法是定义到Upload 即原来的 元 对象上, 这里的方法应该是个事件</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> flyweightObj</span><br><span class="line">&#125;</span><br><span class="line">Upload.prototype.todo = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  uploadManager.setExternalState(id, <span class="keyword">this</span>)</span><br><span class="line">  <span class="comment">// 此时的this就是占用元对象的所有属性， 是一个完整的上传对象</span></span><br><span class="line">  <span class="comment">// this.xxxxxx</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 享元模式对象池的应用</span></span><br><span class="line"><span class="comment">  获取 和 归还都是去对象池中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> objectPoolFactory = <span class="function"><span class="keyword">function</span> (<span class="params">createObjFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> objectPool = []</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    create: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 取出一个</span></span><br><span class="line">      <span class="comment">// 如果对象池中有 就拿出去一个， 否则就创建一个</span></span><br><span class="line">      <span class="keyword">var</span> obj = objectPool.length === <span class="number">0</span> ? createObjFn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>) : objectPool.shift()</span><br><span class="line">      <span class="keyword">return</span> obj</span><br><span class="line">    &#125;,</span><br><span class="line">    recover: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123; <span class="comment">// 归还一个</span></span><br><span class="line">      objectPool.push(obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在创建一个ifram的对象池</span></span><br><span class="line"><span class="keyword">var</span> iframeFactory = objectPoolFactory(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>)</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(iframe) </span><br><span class="line">  iframe.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    iframe.onload = <span class="literal">null</span> <span class="comment">// 防止iframe重复加载</span></span><br><span class="line">    iframeFactory.recover(iframe)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> iframe</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> iframe1 = iframeFactory.create()</span><br><span class="line">iframe1.src = <span class="string">'https://www.baidu.com'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iframe2 = iframeFactory.create()</span><br><span class="line">iframe2.src = <span class="string">'https://www.aliyun.com'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> iframe3 = iframeFactory.create()</span><br><span class="line">  iframe3.src = <span class="string">'https://im.qq.com'</span></span><br><span class="line">&#125;, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果10s后之前的网站有加载完毕的，就改变原有的，否则就创建一个iframe</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>08模板方法模式</title>
      <link href="/2019/06/25/08%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/25/08%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  模板方法设计模式</span></span><br><span class="line"><span class="comment">  将算法的框架与顺序以及一些不变的过程摆放在一起，其子类只需要实现其细节即可</span></span><br><span class="line"><span class="comment">  Coffee or Tea 例子</span></span><br><span class="line"><span class="comment">  冲咖啡：</span></span><br><span class="line"><span class="comment">  把水煮沸</span></span><br><span class="line"><span class="comment">  用沸水冲泡咖啡</span></span><br><span class="line"><span class="comment">  把咖啡倒进屋子</span></span><br><span class="line"><span class="comment">  加糖和牛奶</span></span><br><span class="line"><span class="comment">  泡茶：</span></span><br><span class="line"><span class="comment">  把水煮沸</span></span><br><span class="line"><span class="comment">  用沸水浸泡茶叶</span></span><br><span class="line"><span class="comment">  把茶水倒进杯子</span></span><br><span class="line"><span class="comment">  加柠檬</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象出一个饮料的概念</span></span><br><span class="line"><span class="keyword">var</span> Beverage = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Beverage.prototype.boilWate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'把水煮沸'</span>)</span><br><span class="line">&#125;</span><br><span class="line">Beverage.prototype.brew = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Beverage.prototype.pourInCup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Beverage.prototype.addCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Beverage.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.boilWate()</span><br><span class="line">  <span class="keyword">this</span>.brew()</span><br><span class="line">  <span class="keyword">this</span>.pourInCup()</span><br><span class="line">  <span class="keyword">this</span>.addCondiments()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 咖啡</span></span><br><span class="line"><span class="keyword">var</span> Coffee = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Coffee.prototype = <span class="keyword">new</span> Beverage()</span><br><span class="line">Coffee.prototype.brew = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'沸水冲泡咖啡'</span>)</span><br><span class="line">&#125;</span><br><span class="line">Coffee.prototype.pourInCup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'把咖啡倒进杯子'</span>)</span><br><span class="line">&#125;</span><br><span class="line">Coffee.prototype.addCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'加糖和牛奶'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> coffee = <span class="keyword">new</span> Coffee()</span><br><span class="line">coffee.init()</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 也可以使用传递对象的方式 然而这种方式是使用闭包的方式，创建后无法修改，因为找不到相应的方法，都是封装在函数里 */</span></span><br><span class="line"><span class="keyword">var</span> Beverage = <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> boilWate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把水煮沸'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> brew = param.brew || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'必须传递 brew 方法'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> pourInCup = param.pourInCup || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'必须传递 pourInCup 方法'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> addCondiments = param.addCondiments || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'必须传递 addCondiments 方法'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    boilWate()</span><br><span class="line">    brew()</span><br><span class="line">    pourInCup()</span><br><span class="line">    addCondiments()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> F</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Coffee = Beverage(&#123;</span><br><span class="line">  brew: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用水冲泡咖啡'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  pourInCup: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'把咖啡倒进杯子'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  addCondiments: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'加糖和牛奶'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> coffee = <span class="keyword">new</span> Coffee()</span><br><span class="line">coffee.init()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 拓展</span></span><br><span class="line"><span class="comment"> 这种回调的方式，称为 好莱坞方式，你只需要把函数给我， 什么时候执行我说了算，啥时候调也是我说了算</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 可以添加一些钩子函数，用来控制模板中的方法是否需要执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Coffee.prototype.pourInCup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.customerWantsCondiments()) &#123;</span><br><span class="line">    <span class="keyword">this</span>.addCondiments()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Coffee.prototype.customerWantsCondiments = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">window</span>.confirm(<span class="string">'是否需要添加调料'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>07组合模式</title>
      <link href="/2019/06/25/07%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/25/07%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  组合模式</span></span><br><span class="line"><span class="comment">  更加强大的 宏命令,其优点是可以一次性的执行方法不需要if else 判断哪些要执行，哪些要遍历</span></span><br><span class="line"><span class="comment">  打开空调</span></span><br><span class="line"><span class="comment">  打开电视机和音响</span></span><br><span class="line"><span class="comment">  关门，开电脑，登录QQ</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MacroCommand = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 宏命令 也即组合模式的根节点</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    commandList: [],</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span> (<span class="params">command</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.commandList.push(command)</span><br><span class="line">    &#125;,</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, command; command = <span class="keyword">this</span>.commandList[i++]; ) &#123;</span><br><span class="line">        command.execute()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打开空调指令 */</span></span><br><span class="line"><span class="keyword">var</span> openAcCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打开空调'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 打开电视机和音响指令 */</span></span><br><span class="line"><span class="keyword">var</span> openTVCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打开电视机'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openSoundCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打开音响'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合命令</span></span><br><span class="line"><span class="keyword">var</span> macroCommand1 = MacroCommand()</span><br><span class="line">macroCommand1.add(openTVCommand)</span><br><span class="line">macroCommand1.add(openSoundCommand)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 关门，开电脑，登录QQ指令 */</span></span><br><span class="line"><span class="keyword">var</span> closeDoorCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'关门'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openPCCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打开电脑'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openQQCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打开QQ'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合命令</span></span><br><span class="line"><span class="keyword">var</span> macroCommand2 = MacroCommand()</span><br><span class="line">macroCommand2.add(closeDoorCommand)</span><br><span class="line">macroCommand2.add(openPCCommand)</span><br><span class="line">macroCommand2.add(openQQCommand)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 组合三个事件 */</span></span><br><span class="line"><span class="keyword">var</span> macroCommand = MacroCommand()</span><br><span class="line">macroCommand.add(openAcCommand)</span><br><span class="line">macroCommand.add(macroCommand1)</span><br><span class="line">macroCommand.add(macroCommand2)</span><br><span class="line"><span class="comment">// 执行命令</span></span><br><span class="line">macroCommand.execute()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 由于其执行的透明性的原因</span></span><br><span class="line"><span class="comment">  很有可能会误对叶子节点 调用add,此时可以抛出相应的异常来解决</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> openAcCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打开空调'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'叶子对象不能再添加子节点'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 使用命令模式模拟一个 扫描文件夹的实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Folder = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.files = []</span><br><span class="line">&#125;</span><br><span class="line">Folder.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.files.push(file) </span><br><span class="line">&#125;</span><br><span class="line">Folder.prototype.scan = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'开始扫描文件夹: '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, file; file = <span class="keyword">this</span>.files[i++]; ) &#123;</span><br><span class="line">    file.scan()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> File = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">File.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'文件下面不能再添加文件'</span>)</span><br><span class="line">&#125;</span><br><span class="line">File.prototype.scan = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'开始扫描文件: '</span> + <span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> folder = <span class="keyword">new</span> Folder(<span class="string">'学习资料'</span>)</span><br><span class="line"><span class="keyword">var</span> folder1 = <span class="keyword">new</span> Folder(<span class="string">'JavaScript'</span>)</span><br><span class="line"><span class="keyword">var</span> folder2 = <span class="keyword">new</span> Folder(<span class="string">'jQuery'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> file1 = <span class="keyword">new</span> File(<span class="string">'JavaSccript设计模式'</span>)</span><br><span class="line"><span class="keyword">var</span> file2 = <span class="keyword">new</span> File(<span class="string">'精通jQuery'</span>)</span><br><span class="line"><span class="keyword">var</span> file3 = <span class="keyword">new</span> File(<span class="string">'重构与模式'</span>)</span><br><span class="line"></span><br><span class="line">folder1.add(file1)</span><br><span class="line">folder2.add(file2)</span><br><span class="line"></span><br><span class="line">folder.add(folder1)</span><br><span class="line">folder.add(folder2)</span><br><span class="line">folder.add(file3)</span><br><span class="line"></span><br><span class="line">folder.scan()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 增加父节点，就可以做到组合模式的删除 */</span></span><br><span class="line"><span class="keyword">var</span> Folder = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.parent = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.files = []</span><br><span class="line">&#125;</span><br><span class="line">Folder.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</span><br><span class="line">  file.parent = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">this</span>.files.push(file)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> File = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.parent = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当做删除的时候</span></span><br><span class="line">File.prototype.remove = Folder.prototype.remove = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.parent) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> files = <span class="keyword">this</span>.parent.files, l = files.length; l &gt;= <span class="number">0</span>; l--) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = files[i]</span><br><span class="line">    <span class="keyword">if</span> (file = <span class="keyword">this</span>) &#123;</span><br><span class="line">      files.splice(l, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>06命令模式</title>
      <link href="/2019/06/25/06%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/25/06%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 命令模式</span></span><br><span class="line"><span class="comment"> 模拟给按钮绑定一个刷新事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 真实刷新逻辑 </span></span><br><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">  refresh: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'刷新了页面'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷新命令 (中间商命令者)</span></span><br><span class="line"><span class="keyword">var</span> RefreshMenuBarCommand = <span class="function"><span class="keyword">function</span> (<span class="params"> recevier </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      recevier.refresh()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置命令</span></span><br><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span> (<span class="params"> button, command</span>) </span>&#123;</span><br><span class="line">  button.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    command.execute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> button1 = &#123;&#125; <span class="comment">// 这里模拟button1按钮</span></span><br><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = RefreshMenuBarCommand ( MenuBar ) <span class="comment">// 获取命令</span></span><br><span class="line">setCommand( button1, refreshMenuBarCommand)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 宏命令，可以执行一批命令，就是把命令放入数组中，一批执行</span></span><br><span class="line"><span class="comment"> 关门 -&gt; 打开电脑 -&gt; 登录QQ</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> closeDoorCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'关门'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openPCCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打开电脑'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openQQCommand = &#123;</span><br><span class="line">  execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'打开QQ'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MacroCommand = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    commandList: [],</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span> (<span class="params"> command </span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.commandList.push(command)</span><br><span class="line">    &#125;,</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, command; command = <span class="keyword">this</span>.commandList[i++]; ) &#123;</span><br><span class="line">        command.execute()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> marcroCommand = MacroCommand()</span><br><span class="line">marcroCommand.add (closeDoorCommand )</span><br><span class="line">marcroCommand.add (openPCCommand )</span><br><span class="line">marcroCommand.add (openQQCommand )</span><br><span class="line">marcroCommand.execute()</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 基于命令模式的撤销/重做（可重做的命令）</span></span><br><span class="line"><span class="comment"> 把历史命令全部保存起来，之后全部命令重做，直到所需要的前一步</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> commandStack = [] <span class="comment">// 历史命令队列</span></span><br><span class="line"></span><br><span class="line">command() <span class="comment">// 执行命令</span></span><br><span class="line">commandStack.push(command) <span class="comment">// 放入历史命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重做任务 replay 把任务队列中的任务重新做一遍</span></span><br><span class="line"><span class="keyword">var</span> replay = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> command</span><br><span class="line">  <span class="keyword">while</span> (command = commandStack.shift()) &#123;</span><br><span class="line">    command()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撤销命令一般为 undo</span></span><br><span class="line"><span class="keyword">var</span> undo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// commandStack.pop()</span></span><br><span class="line"> <span class="comment">// 之后根据逻辑进行操作</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 或者重做到上一步</span></span><br><span class="line"> commandStack.pop() <span class="comment">// 弹出上一步</span></span><br><span class="line"> replay() <span class="comment">// 重做所有</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>05订阅者模式</title>
      <link href="/2019/06/25/05%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/25/05%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 订阅，发布者</span></span><br><span class="line"><span class="comment"> 模拟售楼部的情况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> salesOffices = &#123; <span class="comment">// 售楼部</span></span><br><span class="line">  clientList: &#123;&#125;, <span class="comment">// 订阅的列表</span></span><br><span class="line">  </span><br><span class="line">  listen: <span class="function"><span class="keyword">function</span> (<span class="params"> key, fn </span>) </span>&#123; <span class="comment">// 订阅者：订阅事件</span></span><br><span class="line">    <span class="keyword">if</span> ( !<span class="keyword">this</span>.clientList[ key ] ) &#123; <span class="comment">// 如果还没有订阅过，先初始化一下</span></span><br><span class="line">      <span class="keyword">this</span>.clientList[ key ] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.clientList[ key ].push( fn ) <span class="comment">// 订阅消息添加进缓存列表</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  trigger: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 发布者: 发布消息</span></span><br><span class="line">    <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call( <span class="built_in">arguments</span> ), <span class="comment">// 消息类型</span></span><br><span class="line">      fns = <span class="keyword">this</span>.clientList[ key ] <span class="comment">// 订阅该消息的所有方法</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span> ( !fns || fns.length === <span class="number">0</span>) &#123; <span class="comment">// 没有人订阅</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = fns[ i++ ]; ) &#123; <span class="comment">// 执行订阅</span></span><br><span class="line">      fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">salesOffices.listen( <span class="string">'squareMeter88'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> price </span>) </span>&#123; <span class="comment">// 订阅squareMeter88事件</span></span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'squareMeter88 -&gt; 价格为'</span> + price )</span><br><span class="line">&#125;)</span><br><span class="line">salesOffices.listen( <span class="string">'squareMeter100'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> price </span>) </span>&#123; <span class="comment">// 订阅squareMeter100事件</span></span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'squareMeter100 -&gt; 价格为'</span> + price )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">salesOffices.trigger( <span class="string">'squareMeter88'</span>, <span class="number">2000000</span>) <span class="comment">// 发布squareMeter88事件</span></span><br><span class="line">salesOffices.trigger( <span class="string">'squareMeter100'</span>, <span class="number">3000000</span>) <span class="comment">// 发布squareMeter100事件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 通用的订阅者事件（增加remove） </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> event = &#123;</span><br><span class="line">  clientList: &#123;&#125;,</span><br><span class="line">  listen: <span class="function"><span class="keyword">function</span> (<span class="params"> key, fn </span>) </span>&#123; <span class="comment">// 订阅功能</span></span><br><span class="line">    <span class="keyword">if</span> ( !<span class="keyword">this</span>.clientList[ key ]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.clientList[ key ] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.clientList[ key ].push( fn )</span><br><span class="line">  &#125;,</span><br><span class="line">  remove: <span class="function"><span class="keyword">function</span>(<span class="params"> key, fn </span>) </span>&#123; <span class="comment">// 取消事件的订阅</span></span><br><span class="line">    <span class="keyword">var</span> fns = <span class="keyword">this</span>.clientList[ key ]</span><br><span class="line">    <span class="keyword">if</span> ( !fns ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !fn ) &#123; <span class="comment">// 没有指定 默认去除所有</span></span><br><span class="line">      fns &amp;&amp; ( fns.length = <span class="number">0</span> )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> ( <span class="keyword">var</span> l = fns.length - <span class="number">1</span>; l &gt;= <span class="number">0</span>; l--) &#123;</span><br><span class="line">         <span class="keyword">var</span> _fn = fns[ l ]</span><br><span class="line">         <span class="keyword">if</span> ( _fn === fn ) &#123;</span><br><span class="line">           fns.splice( l, <span class="number">1</span>)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  trigger: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 发布功能</span></span><br><span class="line">    <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call( <span class="built_in">arguments</span> ),</span><br><span class="line">      fns = <span class="keyword">this</span>.clientList[ key ]</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span> ( !fns || fns.length === <span class="number">0</span> ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = fns[ i++ ]; ) &#123;</span><br><span class="line">      fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> installEvent = <span class="function"><span class="keyword">function</span> (<span class="params"> obj </span>) </span>&#123; <span class="comment">// 安装事件</span></span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> key <span class="keyword">in</span> event) &#123;</span><br><span class="line">    obj[ key ] = event[ key ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;</span><br><span class="line">installEvent(salesOffices) <span class="comment">// 安装发布者模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handleSquareMeter88Fn1 = <span class="function"><span class="keyword">function</span> (<span class="params"> price </span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'fn1得知 squareMeter88 -&gt; 价格为'</span> + price )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> handleSquareMeter88Fn2 = <span class="function"><span class="keyword">function</span> (<span class="params"> price </span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'fn2得知 squareMeter88 -&gt; 价格为'</span> + price )</span><br><span class="line">&#125;</span><br><span class="line">salesOffices.listen( <span class="string">'squareMeter88'</span>, handleSquareMeter88Fn1 ) <span class="comment">// fn1订阅squareMeter88事件</span></span><br><span class="line">salesOffices.listen( <span class="string">'squareMeter88'</span>, handleSquareMeter88Fn2 ) <span class="comment">// fn2订阅squareMeter88事件</span></span><br><span class="line">salesOffices.trigger( <span class="string">'squareMeter88'</span>, <span class="number">2000000</span> )</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'==========================='</span>)</span><br><span class="line">salesOffices.remove( <span class="string">'squareMeter88'</span>, handleSquareMeter88Fn1 ) <span class="comment">// 取消fn1对squareMeter88事件的订阅</span></span><br><span class="line">salesOffices.trigger( <span class="string">'squareMeter88'</span>, <span class="number">2000000</span> )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 然而现实中不需要为特定的对象专门注册这一个发布订阅， 共用一个即可 */</span></span><br><span class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clientList = &#123;&#125;,</span><br><span class="line">    listen,</span><br><span class="line">    trigger,</span><br><span class="line">    remove</span><br><span class="line">    </span><br><span class="line">    listen = <span class="function"><span class="keyword">function</span> (<span class="params"> key, fn </span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> ( !clientList[ key ]) &#123;</span><br><span class="line">        clientList[ key ] = []</span><br><span class="line">      &#125;</span><br><span class="line">      clientList[ key ].push( fn )</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    remove = <span class="function"><span class="keyword">function</span> (<span class="params"> key, fn </span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> fns = clientList[ key ]</span><br><span class="line">      <span class="keyword">if</span> ( !fns ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( !fn ) &#123;</span><br><span class="line">        fns &amp;&amp; (fns.length = <span class="number">0</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">var</span> l = fns.length - <span class="number">1</span>; l &gt;= <span class="number">0</span>; l--) &#123;</span><br><span class="line">          <span class="keyword">var</span> _fn = fns[ l ]</span><br><span class="line">          <span class="keyword">if</span> ( _fn === fn ) &#123;</span><br><span class="line">            fns.splice( l, <span class="number">1</span> )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    trigger = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call( <span class="built_in">arguments</span> ),</span><br><span class="line">        fns = clientList[ key ]</span><br><span class="line">      <span class="keyword">if</span> ( !fns || fns.length === <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = fns[ i++ ]; ) &#123;</span><br><span class="line">        fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单实现到这里， 完整的发布者 订阅者模式还需要提供如下两个方面的能力</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 1.全局事件命名冲突 </span></span><br><span class="line"><span class="comment"> 比如都发布了一个 squareMeter88 无法确定具体是那一个 事件发布出来的，可能事件重名，不便于管理</span></span><br><span class="line"><span class="comment"> 这里可以引入 namespace 在每一个命名空间内进行事件的订阅</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 可以显示创建命名空间后在内部调用</span></span><br><span class="line"><span class="comment"> 默认情况下不申明，就在自己申明的'_default'环境中</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 2.离线时间的发布</span></span><br><span class="line"><span class="comment"> 有的事件发布出来，可能订阅者还没来得及订阅，这里可以使用一个离线的cache,等待何时的时机发布出去</span></span><br><span class="line"><span class="comment"> 离线事件只能发布一次，不能重复发布，不然就没有了发布的意义（它只是当时没发布，等到事宜的时机再将事件发布出去）</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> 在触发的时候，判定有离线事件队列，就先别真触发，先放入离线事件队列中</span></span><br><span class="line"><span class="comment"> 当触发监听listen时 如果有离线事件队列，就把离线事件队列调出来运行一次</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>04迭代器模式</title>
      <link href="/2019/06/25/04%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/25/04%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 迭代器模式</span></span><br><span class="line"><span class="comment"> 将迭代的过程抽离开，根据业务的需求定制 是关心结果，还是关心迭代的过程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 模拟forEach内部迭代器</span></span><br><span class="line"><span class="keyword">var</span> each = <span class="function"><span class="keyword">function</span> (<span class="params"> ary, callback </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = ary.length; i &lt; l; i++) &#123;</span><br><span class="line">    callback.call( ary[i], ary[i], i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">each( [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`arr[<span class="subst">$&#123;index&#125;</span>] -&gt; <span class="subst">$&#123;item&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 通过编写一个比较函数， 分别使用内部迭代器，和外部迭代器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部迭代器 结合之前编写的 each</span></span><br><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span> (<span class="params"> arr1, arr2 </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr1.length !== arr2.length) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="string">'arr1 与 arr2 不相等'</span> )</span><br><span class="line">  &#125;</span><br><span class="line">  each( arr1, <span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (item !== arr2[ index ]) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="string">'arr1 与 arr2 不相等'</span> )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'arr1 与 arr2 相等'</span> )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// compare( [1,2,3], [1,2,4]) // Error: arr1 与 arr2 不相等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部迭代器  只要保证对象有length 并且其key是数字 &#123;"0": '0index', '1': '1index'&#125;</span></span><br><span class="line"><span class="keyword">var</span> Iterator = <span class="function"><span class="keyword">function</span> (<span class="params"> obj </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> current = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    current += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> isDone = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> current &gt;= obj.length</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> getCurrItem = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[ current ]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next, isDone, getCurrItem</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span> (<span class="params"> iterator1, iterator2 </span>) </span>&#123; <span class="comment">// 如果长度不相同 是个bug</span></span><br><span class="line">  <span class="keyword">while</span> ( !iterator1.isDone() &amp;&amp; !iterator2.isDone()) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( iterator1.getCurrItem() !== iterator2.getCurrItem() ) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="string">'iterator1 和 iterator 不相等'</span> )</span><br><span class="line">    &#125;</span><br><span class="line">    iterator1.next()</span><br><span class="line">    iterator2.next()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'iterator1 和 iterator 相等'</span> )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator1 = Iterator([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="keyword">var</span> iterator2 = Iterator([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment">// compare(iterator1, iterator2) // iterator1 和 iterator 相等</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 应用内部迭代器 来根据支持的类型 插入不同的上传控件 */</span></span><br><span class="line"><span class="comment">// 不符合开闭原则的写法</span></span><br><span class="line"><span class="keyword">var</span> getUploadObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"TXFTNActiveX.FTNUpload"</span>) <span class="comment">// IE 上传控件</span></span><br><span class="line">  &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="keyword">if</span> ( suportFlash() ) &#123; <span class="comment">// 支持falsh 控件 模拟</span></span><br><span class="line">      <span class="keyword">var</span> str = <span class="string">'&lt;object type="application/x-shockwave-flash"&gt;&lt;/object&gt;'</span></span><br><span class="line">      <span class="keyword">return</span> $(str).appendTo( $(<span class="string">'body'</span>) )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> str = <span class="string">'&lt;input name="File" type="File"&gt;&lt;/input&gt;'</span></span><br><span class="line">      <span class="keyword">return</span> $(str).appendTo( $(<span class="string">'body'</span>) )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="comment">// 如果有另一种上传方式就需要 修改代码 不符合开闭原则 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 符合开闭原则的写法 + 内部迭代器</span></span><br><span class="line"><span class="keyword">var</span> getActiveUploadObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// IE 上传控件</span></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"TXFTNActiveX.FTNUpload"</span>) </span><br><span class="line">  &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFlashUploadObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( suportFlash() ) &#123; <span class="comment">// 支持falsh 控件 模拟</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">'&lt;object type="application/x-shockwave-flash"&gt;&lt;/object&gt;'</span></span><br><span class="line">    <span class="keyword">return</span> $(str).appendTo( $(<span class="string">'body'</span>) )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getFormUploadObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">'&lt;input name="File" type="File"&gt;&lt;/input&gt;'</span></span><br><span class="line">  <span class="keyword">return</span> $(str).appendTo( $(<span class="string">'body'</span>) )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iteratorUploadObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 如果返回是不是false 则返回该对象 循环结束</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>, fn; fn = <span class="built_in">arguments</span>[ i++]; )&#123;</span><br><span class="line">    <span class="keyword">var</span> uploadObj = fn()</span><br><span class="line">    <span class="keyword">if</span> (uploadObj !== <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> uploadObj</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uploadObj = iteratorUploadObj( getActiveUploadObj, getFlashUploadObj, getFormUploadObj )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需求配置新的上传对象 只需要再添加新的方法即可</span></span><br><span class="line"><span class="keyword">var</span> getHtml5UplaodObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ........ 具体代码略 如果不成功可以返回false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getWebkitUploadObj = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ........ 具体代码略 如果不成功可以返回false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时满足了开闭原则</span></span><br><span class="line"><span class="keyword">var</span> uploadObj = iteratorUploadObj( getActiveUploadObj, getFlashUploadObj, </span><br><span class="line">  getHtml5UplaodObj, getWebkitUploadObj, getFormUploadObj )</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>03代理模式</title>
      <link href="/2019/06/25/03%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/25/03%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 代理模式，通过一个代理对象访问本体</span></span><br><span class="line"><span class="comment"> 模拟小明将花送给A</span></span><br><span class="line"><span class="comment"> 可以通过B转送给A</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> Flower = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 默认 */</span></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">  sendFlower: <span class="function"><span class="keyword">function</span> (<span class="params"> target </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flower = <span class="keyword">new</span> Flower()</span><br><span class="line">    target.receiveFlower( flower )</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">  receiveFlower: <span class="function"><span class="keyword">function</span> (<span class="params"> flower </span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'收到了花'</span> + flower)</span><br><span class="line">  &#125;,</span><br><span class="line">  listenGoodMood: <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'心情不错，我答应啦'</span>)</span><br><span class="line">      fn()</span><br><span class="line">    &#125;, <span class="number">5000</span>)  <span class="comment">// 假设A 5s后心情变好</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// xiaoming.sendFlower( A ) 这里A只有在心情好的时候 才收花,所以这里不行, 需要一个代理B</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = &#123;</span><br><span class="line">  receiveFlower: <span class="function"><span class="keyword">function</span> (<span class="params"> flower </span>) </span>&#123;</span><br><span class="line">    A.listenGoodMood(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      A.receiveFlower( flower )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// xiaoming.sendFlower( B ) //通过一个代理B 完成了任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 虚拟代理发送整合http请求发送</span></span><br><span class="line"><span class="comment"> 对于实时性不太高的系统可以采用，减少频繁的http次数保证高效 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> synchronousFile = <span class="function"><span class="keyword">function</span> (<span class="params"> id </span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'开始同步文件， HTTP....'</span> + id )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> checkbox = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, c; c = checkbox[i++]; ) &#123;</span><br><span class="line">  c.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">this</span>.checked === <span class="literal">true</span> ) &#123;</span><br><span class="line">      synchronousFile ( <span class="keyword">this</span>.id )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 频繁的发送浪费网络请求， 可以整合成一批 进行发送 </span></span><br><span class="line"><span class="comment"> 其原理类似公交车发车， 只要有一个请求过来就放一个公交车，</span></span><br><span class="line"><span class="comment"> 等待2s后，一起发车，后续的请求直接上车即可</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxySynchronousFile = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cache = [], <span class="comment">// 保存发送队列</span></span><br><span class="line">    timer <span class="comment">// 定时器</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"> id </span>) </span>&#123; <span class="comment">// 代理对象要与本体设计一致 方便调换和更改</span></span><br><span class="line">     cache.push(id) <span class="comment">// 放入发送队列</span></span><br><span class="line">     <span class="keyword">if</span> ( timer ) &#123; <span class="comment">// 当前已经有一批准备好，发送中</span></span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       synchronousFile ( cache.join( <span class="string">','</span> ) )</span><br><span class="line">       clearTimeout( timer )</span><br><span class="line">       timer = <span class="literal">null</span></span><br><span class="line">       cache.length = <span class="number">0</span> <span class="comment">// 清空集合</span></span><br><span class="line">     &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> checkbox = <span class="built_in">document</span>.getElementsByTagName( <span class="string">'input'</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, c; c = checkbox[i++]; ) &#123;</span><br><span class="line">  c.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.checked === <span class="literal">true</span>) &#123;</span><br><span class="line">      proxySynchronousFile( <span class="keyword">this</span>.id )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 缓存代理，就是将一些结果提前缓存起来，然后后续便于直接查找</span></span><br><span class="line"><span class="comment">  如 这里做一些大计算（认为此处为复杂计算）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">    a = a * <span class="built_in">arguments</span>[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">    a = a + <span class="built_in">arguments</span>[i] </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建缓存代理的工厂</span></span><br><span class="line"><span class="keyword">var</span> createProxyFactory = <span class="function"><span class="keyword">function</span> (<span class="params"> fn </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call( <span class="built_in">arguments</span>, <span class="string">','</span> )</span><br><span class="line">    <span class="keyword">if</span> (args <span class="keyword">in</span> cache) &#123;</span><br><span class="line">      <span class="keyword">return</span> cache[ args ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cache[ args ] = fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyMult = createProxyFactory( mult )</span><br><span class="line"><span class="keyword">var</span> proxyAdd = createProxyFactory( add )</span><br><span class="line"></span><br><span class="line">proxyMult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 进行计算，并且把结果放入缓存中</span></span><br><span class="line">proxyMult(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 从缓存中直接读取</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>02策略模式</title>
      <link href="/2019/06/25/02%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/25/02%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义策略</span></span><br><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">  <span class="string">"S"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"A"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"B"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用策略</span></span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span> (<span class="params"> level, salary</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> strategies[ level ]( salary )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="built_in">console</span>.log( calculateBonus( <span class="string">'S'</span>, <span class="number">10000</span>) )</span><br><span class="line"><span class="built_in">console</span>.log( calculateBonus( <span class="string">'B'</span>, <span class="number">10000</span>) )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用案例，做一个表单验配置 validator */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 策略对象 */</span></span><br><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">  isNonEmpty: <span class="function"><span class="keyword">function</span> (<span class="params"> value, errorMsg </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="string">''</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  minLength: <span class="function"><span class="keyword">function</span> (<span class="params">value, length, errorMsg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value.length &lt; length) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  maxLength: <span class="function"><span class="keyword">function</span> (<span class="params">value, length, errorMsg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value.length &gt; length) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  isMobile: <span class="function"><span class="keyword">function</span> (<span class="params">value, errorMsg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/^1[3|5|8][0-9]&#123;9&#125;$/</span>.test( value )) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 验证器 validator */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">      <span class="keyword">this</span>.cache = []</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  add (dom, rules) &#123; <span class="comment">// 添加一个策略</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, rule; rule = rules[ i++ ]; ) &#123;</span><br><span class="line">      <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line">      </span><br><span class="line">      ;(<span class="function"><span class="keyword">function</span> (<span class="params">rule</span>) </span>&#123; <span class="comment">// 异步调用， 这里要注意闭包，否则一直检验此项最后一个策略</span></span><br><span class="line">        <span class="keyword">var</span> strategyAry = rule.strategy.split( <span class="string">':'</span> )</span><br><span class="line">        <span class="keyword">var</span> errorMsg = rule.errorMsg</span><br><span class="line">        </span><br><span class="line">        that.cache.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// cache放入配置好的待执行方法</span></span><br><span class="line">          <span class="keyword">var</span> strategy = strategyAry.shift()  <span class="comment">// ['minLength', 6]</span></span><br><span class="line">          strategyAry.unshift( dom.value ) <span class="comment">// 把待测值放入第一个参数 ['value', 6] </span></span><br><span class="line">          strategyAry.push(errorMsg) <span class="comment">// 把错误提示 放入最后一个 （第二位或第三位） ['value', 6， '不能少于6位']</span></span><br><span class="line">          <span class="keyword">return</span> strategies[ strategy ].apply(dom, strategyAry)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)(rule)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  validate () &#123; <span class="comment">// 验证策略</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, validatorFunc; validatorFunc = <span class="keyword">this</span>.cache [ i++ ]; ) &#123;</span><br><span class="line">      <span class="keyword">var</span> errorMsg = validatorFunc()</span><br><span class="line">      <span class="keyword">if</span> ( errorMsg ) &#123;</span><br><span class="line">        <span class="keyword">return</span> errorMsg</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ================= 客户端调用 =================  */</span></span><br><span class="line"><span class="keyword">var</span> registerForm = <span class="built_in">document</span>.getElementById(<span class="string">'registerForm'</span>) <span class="comment">// 获取元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> validataFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 验证逻辑</span></span><br><span class="line">  <span class="keyword">var</span> validator = <span class="keyword">new</span> Validator()</span><br><span class="line">  </span><br><span class="line">  validator.add(registerForm.username, [&#123;</span><br><span class="line">    strategy: <span class="string">'isNonEmpty'</span>,</span><br><span class="line">    errorMsg: <span class="string">'用户名不能为空'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    strategy: <span class="string">'minLength:6'</span>,</span><br><span class="line">    errorMsg: <span class="string">'用户名不能少于6位'</span></span><br><span class="line">  &#125;])</span><br><span class="line">  </span><br><span class="line">  validator.add(registerForm.password, [&#123;</span><br><span class="line">    strategy: <span class="string">'minLength:6'</span>,</span><br><span class="line">    errorMsg: <span class="string">'密码不能少于6位'</span></span><br><span class="line">  &#125;])</span><br><span class="line">  </span><br><span class="line">  validator.add(registerForm.phonenumber, [&#123;</span><br><span class="line">    strategy: <span class="string">'isMobile'</span>,</span><br><span class="line">    errorMsg: <span class="string">'手机号不正确'</span></span><br><span class="line">  &#125;])</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 调用校验</span></span><br><span class="line">  <span class="keyword">var</span> errorMsg = validator.validate()</span><br><span class="line">  <span class="keyword">return</span> errorMsg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">registerForm.onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 绑定验证逻辑</span></span><br><span class="line">  <span class="keyword">var</span> errorMsg = validataFunc()</span><br><span class="line">  <span class="keyword">if</span> ( errorMsg ) &#123; <span class="comment">// 有错误， 阻止提交</span></span><br><span class="line">    alert( errorMsg )</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  sayHi () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'zhn'</span>)</span><br><span class="line"><span class="comment">// console.log(p)</span></span><br><span class="line">p.sayHi()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>01单例模式</title>
      <link href="/2019/06/25/01%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/25/01%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 注意：单例管理 和 对象创建要分开 */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// 返回创建单例的方法</span></span><br><span class="line"><span class="comment">var getSingle = function ( fn ) &#123;</span></span><br><span class="line"><span class="comment">  var result</span></span><br><span class="line"><span class="comment">  return function () &#123;</span></span><br><span class="line"><span class="comment">    return result || (result = fn.apply(this, arguments))</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 创建对象的方法</span></span><br><span class="line"><span class="comment">var createSigleIframe = getSingle(function () &#123;</span></span><br><span class="line"><span class="comment">  var iframe = document.createElement('iframe')</span></span><br><span class="line"><span class="comment">  document.body.appendChild(iframe)</span></span><br><span class="line"><span class="comment">  return iframe</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="comment">document.getElementById( 'loginBtn' ).onclick = function () &#123;</span></span><br><span class="line"><span class="comment">  var loginLayer = createSigleIframe()</span></span><br><span class="line"><span class="comment">  loginLayer.src = 'http://www.baidu.com'</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">document.getElementById( 'loginBtn' ).onclick = function () &#123; // 多次调用不会创建多个iframe</span></span><br><span class="line"><span class="comment">  var loginLayer = createSigleIframe()</span></span><br><span class="line"><span class="comment">  loginLayer.src = 'http://www.google.com'</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* 模拟小程序中云开发获取db的例子，使用单例 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> result || (result = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getDB = getSingle(<span class="function"><span class="keyword">function</span> (<span class="params">wx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> wx.cloud.database()</span><br><span class="line">&#125;) </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 这里保证始终取出了一个db</span></span><br><span class="line"><span class="comment">// var wx = &#123;name: 'wx'&#125;</span></span><br><span class="line"><span class="keyword">var</span> db = getDB(wx)</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="keyword">var</span> db = getDB()</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="keyword">var</span> db = getDB()</span><br><span class="line"><span class="comment">// ......</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js的相关高阶函数</title>
      <link href="/2019/06/25/js%E7%9A%84%E7%9B%B8%E5%85%B3%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
      <url>/2019/06/25/js%E7%9A%84%E7%9B%B8%E5%85%B3%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="柯里化-currying"><a href="#柯里化-currying" class="headerlink" title="柯里化 currying"></a>柯里化 currying</h4><p>就是把一些方法 在内部做了，或者可以连续调用 减少普遍性， 增加适用性，提前做<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 做一个能够累加的方法</span></span><br><span class="line"><span class="keyword">var</span> currying = <span class="function"><span class="keyword">function</span> (<span class="params"> fn </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = []</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> fn.apply( <span class="keyword">this</span>, args)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      [].push.apply( args, <span class="built_in">arguments</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">arguments</span>.callee  <span class="comment">// 返回调用函数 可以fn()()()</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cost = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> money = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++ ) &#123;</span><br><span class="line">      money += <span class="built_in">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> money</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">//  var result = cost(1, 2, 3) // 立即计算6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var cost = currying (cost) // 柯里化</span></span><br><span class="line"><span class="comment">// cost(1)</span></span><br><span class="line"><span class="comment">// cost(2)</span></span><br><span class="line"><span class="comment">// cost(3)(4)</span></span><br><span class="line"><span class="comment">// var result = cost() // 这里在计算10</span></span><br></pre></td></tr></table></figure></p><h4 id="非柯里化-uncurrying"><a href="#非柯里化-uncurrying" class="headerlink" title="非柯里化 uncurrying"></a>非柯里化 uncurrying</h4><p>就是把原本内部的一些方法 抽离出来，可以单独使用， 借用方法，只要是this指向的问题</p><ul><li><p>document.createElement()<br> -&gt; 此时的createElement的调用者是document</p></li><li><p>createFn = document.createElement<br>-&gt; createFn()  -&gt;  此时的createElement的调用者是window.所以会出现异常</p></li><li><p>主要的解决方案 是把this固定下来</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.uncurrying = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span> <span class="comment">// 这里是方法体</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="built_in">Array</span>.prototype.shift.call( <span class="built_in">arguments</span> ) </span><br><span class="line">    <span class="keyword">return</span> self.apply( obj, <span class="built_in">arguments</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> push = <span class="built_in">Array</span>.prototype.push.uncurrying()</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="string">"0"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"length"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">push(obj, <span class="number">1</span>) <span class="comment">// Object [ 0, 1 ]</span></span><br></pre></td></tr></table></figure><h4 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h4><p>频繁触发的事件造成的不必要的事件的浪费,返回那些频繁的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span> (<span class="params">fn, interval</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> _self = fn, <span class="comment">// 原始函数的引用</span></span><br><span class="line">    timer,  <span class="comment">// 计时器</span></span><br><span class="line">    firstTime = <span class="literal">true</span> <span class="comment">// 第一次</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span></span><br><span class="line">    _me = <span class="keyword">this</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (firstTime) &#123; <span class="comment">// 第一次进入</span></span><br><span class="line">      _self.apply(_me, args)</span><br><span class="line">      <span class="keyword">return</span> firstTime = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (timer) &#123; <span class="comment">// 当前正在准备运行中</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      clearTimeout(timer)</span><br><span class="line">      timer = <span class="literal">null</span></span><br><span class="line">      _self.apply(_me, args)</span><br><span class="line">      </span><br><span class="line">    &#125;, interval || <span class="number">500</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onresize = throttle(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>)</span><br><span class="line">&#125;, <span class="number">500</span>) <span class="comment">// 保证事件触发500ms/次</span></span><br></pre></td></tr></table></figure><h4 id="分时函数"><a href="#分时函数" class="headerlink" title="分时函数"></a>分时函数</h4><p>浏览器执行速度很快，有可能使其吃不消，假死，崩溃，可以降低速度，分批执行<br>类似与坐大巴车， 一批一批的拉客</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timeChunk = <span class="function"><span class="keyword">function</span> (<span class="params">ary, fn, count</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj,</span><br><span class="line">    t</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> len = ary.length</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Math</span>.min(count || <span class="number">1</span>, ary.length); i++) &#123; <span class="comment">// 这里保证一次运行最小次数</span></span><br><span class="line">      <span class="keyword">var</span> obj = ary.shift()</span><br><span class="line">      fn(obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    t = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (ary.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> clearInterval(t)</span><br><span class="line">      &#125;</span><br><span class="line">      start()</span><br><span class="line">    &#125;, <span class="number">200</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ary = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  ary.push(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> render = timeChunk(ary, <span class="function"><span class="keyword">function</span> (<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// TODO...... 一次执行8个任务 一批一批执行</span></span><br><span class="line">  <span class="comment">// console.log(n)</span></span><br><span class="line">&#125;, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">render()</span><br></pre></td></tr></table></figure><h4 id="惰性加载"><a href="#惰性加载" class="headerlink" title="惰性加载"></a>惰性加载</h4><p>判断浏览器类型，这种需要干一次存储起来即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addEvent = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 提前缓存起来了， 但是可能一次没执行，会浪费</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">ele, type, handler</span>) </span>&#123;</span><br><span class="line">      ele.addEventListener(typem, handler, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">ele, type, handler</span>) </span>&#123;</span><br><span class="line">      ele.attachEvent(<span class="string">'on'</span> + typem, handler)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// addEvent(dom, 'click', () =&gt; &#123; console.log(1) &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addEvent = <span class="function"><span class="keyword">function</span> (<span class="params">ele, type, handler</span>) </span>&#123; <span class="comment">// 当第一次用完之后改变指向</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</span><br><span class="line">    addEvent = <span class="function"><span class="keyword">function</span> (<span class="params">ele, type, handler</span>) </span>&#123;</span><br><span class="line">      ele.addEventListener(typem, handler, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</span><br><span class="line">    addEvent = <span class="function"><span class="keyword">function</span> (<span class="params">ele, type, handler</span>) </span>&#123;</span><br><span class="line">      ele.attachEvent(<span class="string">'on'</span> + typem, handler)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// addEvent(dom, 'click', () =&gt; &#123; console.log(1) &#125;)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js中正则相关的方面</title>
      <link href="/2019/06/12/js%E4%B8%AD%E6%AD%A3%E5%88%99%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%B9%E9%9D%A2/"/>
      <url>/2019/06/12/js%E4%B8%AD%E6%AD%A3%E5%88%99%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%B9%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h4 id="比较基础的用法"><a href="#比较基础的用法" class="headerlink" title="比较基础的用法"></a>比较基础的用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正则后match的结果是一个字符串 g是全局替换 否则他匹配到第一个就停下来了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abc666'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/^a.*6$/g</span>) <span class="comment">// ^表示严格开头  $表示严格结尾 [ "abc666" ]</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'6^1a'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/\^1a/g</span>) <span class="comment">//  [ "^1a" ] 对关键词进行转义 </span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'   hello world  '</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/(^\s+)|(\s+$)/</span>) <span class="comment">// 匹配前后的空格 [ "    ", "  "]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'php'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/p.p/</span>) <span class="comment">// .表示任意字符 一个点表示一个字符 [ "php" ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'phahsp'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/p.*p/</span>) <span class="comment">// .*表示任意的字符串 [ "phahsp" ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'pha_hsp'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/p\w*p/g</span>) <span class="comment">// \w表示 字母 数字 下划线 [ "pha_hsp" ]</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'p*@ #*-+p'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/p\W*p/g</span>) <span class="comment">// \W表示 非字母 非数字 非下划线 [ "p*@ #*-+p" ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hello123456666aas5474xc'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/\d/g</span>) <span class="comment">// \d 表示也给数字 [ "1", "2", "3", "4", "5", "6", "6", "6", "6", "5", … ]</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/\d+/g</span>) <span class="comment">// 贪婪模式，会一直匹配下去 [ "123456666", "5474" ]</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/\D+/g</span>) <span class="comment">// \D 表示非数字 [ "hello", "aas", "xc" ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcd nihao 666 zhn'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/\bn.*/g</span>) <span class="comment">// \b 表示匹配边界 以开头  使用空格做依据 [ "nihao 666 zhn" ]</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/\bn.*o/g</span>) <span class="comment">// [ "nihao" ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩下查阅配置手册即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分组的使用 */</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'1111, 1212, 1331 1344'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/\d\d\d\d/g</span>) <span class="comment">// 查找四个数字 [ "1111", "1212", "1331" ]</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/(\d)(\d)\1\2/g</span>) <span class="comment">// 匹配使用 \1 [ "1111", "1212" ]</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/(\d)(?:\d)(\d)\2/g</span>) <span class="comment">// 匹配使用 禁止使用此分组 ?: [ "1111", "1344" ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 断言/环视 */</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'java11 and es6'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/[A-z]+(?=\d)/g</span>) <span class="comment">// 后限制,但是自己不会被输出 [ "java", "es" ] </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'12sda4716'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/(?!^\d+\$)^[0-9a-zA-Z]+$/g</span>) <span class="comment">// 前表范围 不能只是数字的情况下 满足[0-9a-zA-Z]+即，   [ "12sda4716" ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure><h4 id="函数方法相关"><a href="#函数方法相关" class="headerlink" title="函数方法相关"></a>函数方法相关</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*RegExp test 正则表达式的方法 */</span></span><br><span class="line"><span class="keyword">var</span> res = <span class="regexp">/abc/g</span>.test(<span class="string">'abc'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*RegExp exec 正则表达式的方法 */</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'1111 1122 3434 5678 8989'</span></span><br><span class="line"><span class="keyword">var</span> r = <span class="regexp">/(\d)\d\1\d/g</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 会有连续性</span></span><br><span class="line"><span class="keyword">var</span> i = r.lastIndex <span class="comment">// 前一次匹配的位置 0</span></span><br><span class="line"><span class="keyword">var</span> res = r.exec(str) <span class="comment">// [ "1111", "1" ]  '1111'是匹配的结果  '1'是分组的信息</span></span><br><span class="line"><span class="built_in">console</span>.log(i, res) <span class="comment">// 0 [ "1111", "1" ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = r.lastIndex  <span class="comment">// 上一次匹配的结束位置 4</span></span><br><span class="line"><span class="keyword">var</span> res = r.exec(str) <span class="comment">// [ "3434", "3" ]</span></span><br><span class="line"><span class="built_in">console</span>.log(i, res) <span class="comment">// 4 [ "3434", "3" ] </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*String  replace的方法 */</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'helli world'</span> </span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="string">'l'</span>, <span class="string">'L'</span>) <span class="comment">// heLli world 只替换一处</span></span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="regexp">/l/</span>, <span class="string">'L'</span>) <span class="comment">// heLli world</span></span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="regexp">/l/g</span>, <span class="string">'L'</span>) <span class="comment">// heLLi worLd 全局替换/g</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 借助子表达式 12345 - 12[12-3-45]45</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'12345'</span></span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="regexp">/(3)/g</span>, <span class="string">"[$`-$1-$']"</span>) <span class="comment">// $` 匹配左侧的部分  $' 匹配右侧的部分</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'1234567'</span></span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="regexp">/(2).(4).(6)/g</span>, <span class="string">"[$`-$2-$']"</span>) <span class="comment">// 1[1-4-7]7 整个分组左右</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除汉字相同的部分</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"这这这这丸丸丸子多多多多多多少钱一一一一斤"</span></span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="regexp">/([\u4e00-\u9fa5])\1*/g</span>, <span class="string">'$1'</span>) <span class="comment">//性能略差，所有都要匹配 子，少，钱也替换了（子 -&gt; 子） 这丸子多少钱一斤</span></span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="regexp">/([\u4e00-\u9fa5])\1+/g</span>, <span class="string">'$1'</span>) <span class="comment">//性能略好，子，少，钱根本就没匹配到（不满足\1+） 这丸子多少钱一斤</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 借助替换函数 首字母大写</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'aaa bbb ccc'</span> <span class="comment">// Aaa Bbb Ccc</span></span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="regexp">/[a-z]+/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="comment">// x为匹配到的的组</span></span><br><span class="line">  <span class="keyword">return</span> x.substr(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + x.substr(<span class="number">1</span>) <span class="comment">// 最后要将 x 返回出去</span></span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js中正则相关的方面</title>
      <link href="/2019/06/12/%E6%AD%A3%E5%88%99%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/06/12/%E6%AD%A3%E5%88%99%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h4 id="比较基础的用法"><a href="#比较基础的用法" class="headerlink" title="比较基础的用法"></a>比较基础的用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正则后match的结果是一个字符串 g是全局替换 否则他匹配到第一个就停下来了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abc666'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/^a.*6$/g</span>) <span class="comment">// ^表示严格开头  $表示严格结尾 [ "abc666" ]</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'6^1a'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/\^1a/g</span>) <span class="comment">//  [ "^1a" ] 对关键词进行转义 </span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'   hello world  '</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/(^\s+)|(\s+$)/</span>) <span class="comment">// 匹配前后的空格 [ "    ", "  "]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'php'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/p.p/</span>) <span class="comment">// .表示任意字符 一个点表示一个字符 [ "php" ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'phahsp'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/p.*p/</span>) <span class="comment">// .*表示任意的字符串 [ "phahsp" ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'pha_hsp'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/p\w*p/g</span>) <span class="comment">// \w表示 字母 数字 下划线 [ "pha_hsp" ]</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'p*@ #*-+p'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/p\W*p/g</span>) <span class="comment">// \W表示 非字母 非数字 非下划线 [ "p*@ #*-+p" ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hello123456666aas5474xc'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/\d/g</span>) <span class="comment">// \d 表示也给数字 [ "1", "2", "3", "4", "5", "6", "6", "6", "6", "5", … ]</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/\d+/g</span>) <span class="comment">// 贪婪模式，会一直匹配下去 [ "123456666", "5474" ]</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/\D+/g</span>) <span class="comment">// \D 表示非数字 [ "hello", "aas", "xc" ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcd nihao 666 zhn'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/\bn.*/g</span>) <span class="comment">// \b 表示匹配边界 以开头  使用空格做依据 [ "nihao 666 zhn" ]</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/\bn.*o/g</span>) <span class="comment">// [ "nihao" ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩下查阅配置手册即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分组的使用 */</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'1111, 1212, 1331 1344'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/\d\d\d\d/g</span>) <span class="comment">// 查找四个数字 [ "1111", "1212", "1331" ]</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/(\d)(\d)\1\2/g</span>) <span class="comment">// 匹配使用 \1 [ "1111", "1212" ]</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/(\d)(?:\d)(\d)\2/g</span>) <span class="comment">// 匹配使用 禁止使用此分组 ?: [ "1111", "1344" ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 断言/环视 */</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'java11 and es6'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/[A-z]+(?=\d)/g</span>) <span class="comment">// 后限制,但是自己不会被输出 [ "java", "es" ] </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'12sda4716'</span></span><br><span class="line"><span class="keyword">var</span> result = str.match(<span class="regexp">/(?!^\d+\$)^[0-9a-zA-Z]+$/g</span>) <span class="comment">// 前表范围 不能只是数字的情况下 满足[0-9a-zA-Z]+即，   [ "12sda4716" ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure><h4 id="函数方法相关"><a href="#函数方法相关" class="headerlink" title="函数方法相关"></a>函数方法相关</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*RegExp test 正则表达式的方法 */</span></span><br><span class="line"><span class="keyword">var</span> res = <span class="regexp">/abc/g</span>.test(<span class="string">'abc'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*RegExp exec 正则表达式的方法 */</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'1111 1122 3434 5678 8989'</span></span><br><span class="line"><span class="keyword">var</span> r = <span class="regexp">/(\d)\d\1\d/g</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 会有连续性</span></span><br><span class="line"><span class="keyword">var</span> i = r.lastIndex <span class="comment">// 前一次匹配的位置 0</span></span><br><span class="line"><span class="keyword">var</span> res = r.exec(str) <span class="comment">// [ "1111", "1" ]  '1111'是匹配的结果  '1'是分组的信息</span></span><br><span class="line"><span class="built_in">console</span>.log(i, res) <span class="comment">// 0 [ "1111", "1" ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = r.lastIndex  <span class="comment">// 上一次匹配的结束位置 4</span></span><br><span class="line"><span class="keyword">var</span> res = r.exec(str) <span class="comment">// [ "3434", "3" ]</span></span><br><span class="line"><span class="built_in">console</span>.log(i, res) <span class="comment">// 4 [ "3434", "3" ] </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*String  replace的方法 */</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'helli world'</span> </span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="string">'l'</span>, <span class="string">'L'</span>) <span class="comment">// heLli world 只替换一处</span></span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="regexp">/l/</span>, <span class="string">'L'</span>) <span class="comment">// heLli world</span></span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="regexp">/l/g</span>, <span class="string">'L'</span>) <span class="comment">// heLLi worLd 全局替换/g</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 借助子表达式 12345 - 12[12-3-45]45</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'12345'</span></span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="regexp">/(3)/g</span>, <span class="string">"[$`-$1-$']"</span>) <span class="comment">// $` 匹配左侧的部分  $' 匹配右侧的部分</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'1234567'</span></span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="regexp">/(2).(4).(6)/g</span>, <span class="string">"[$`-$2-$']"</span>) <span class="comment">// 1[1-4-7]7 整个分组左右</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除汉字相同的部分</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"这这这这丸丸丸子多多多多多多少钱一一一一斤"</span></span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="regexp">/([\u4e00-\u9fa5])\1*/g</span>, <span class="string">'$1'</span>) <span class="comment">//性能略差，所有都要匹配 子，少，钱也替换了（子 -&gt; 子） 这丸子多少钱一斤</span></span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="regexp">/([\u4e00-\u9fa5])\1+/g</span>, <span class="string">'$1'</span>) <span class="comment">//性能略好，子，少，钱根本就没匹配到（不满足\1+） 这丸子多少钱一斤</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 借助替换函数 首字母大写</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'aaa bbb ccc'</span> <span class="comment">// Aaa Bbb Ccc</span></span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="regexp">/[a-z]+/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="comment">// x为匹配到的的组</span></span><br><span class="line">  <span class="keyword">return</span> x.substr(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + x.substr(<span class="number">1</span>) <span class="comment">// 最后要将 x 返回出去</span></span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>穿越时空的信</title>
      <link href="/2019/06/12/%E7%A9%BF%E8%B6%8A%E6%97%B6%E7%A9%BA%E7%9A%84%E4%BF%A1/"/>
      <url>/2019/06/12/%E7%A9%BF%E8%B6%8A%E6%97%B6%E7%A9%BA%E7%9A%84%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如果把来找我咨询的人比喻成迷途的羔羊，通常他们的手上都有地图，却没有看，或是不知道路在哪里。</p></blockquote><p>东野圭吾老先生著的《解忧杂货店》，故事看似独立，却又穿插其中，最后一幕真的是震惊到了我，穿越时空的连接，却近在眼前，每个人或许都有一个小牛奶箱，我想这零星的温暖，对我们来说，就已经足够了。</p><p>之前以为自己或许不爱看书，一直引以为傲，或许是该静下心来，去从别人的生活中照亮到自己的影子。</p><blockquote><p> 可是换个角度来看，正因为是一张白纸，才可以随心所欲的描绘地图，一切尽在你自己，对你来说，一切都是自由，在你面前是无限的可能，这可是很棒的事啊，我衷心的祈祷你可以相信自己，无悔的燃烧自己的人生。  </p></blockquote><p>或许这就是浪矢杂货店的魅力所在，或许这正也是阅读的魅力吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>promise中链式调用then的问题</title>
      <link href="/2019/06/11/promise%E4%B8%AD%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8then%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/06/11/promise%E4%B8%AD%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8then%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>promise是一个很好的解决异步调用的方法，其链式调用也是一个很好的方式，这里探究一下其调用过程</p></blockquote><h4 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>()  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>()  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下两种Promise的方式中， 是否会进行下去，</span></span><br><span class="line"><span class="comment">//以及新产生的promise是否会被传递下去,或者说有什么不同</span></span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><p><em>每一句打印后面都输出了时间戳，是为了更好描述运行顺序</em><br>测试代码直接贴在下方，可以拿到浏览器中进行测试查看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// fn1()</span></span><br><span class="line">  <span class="comment">// fn1_1()</span></span><br><span class="line">  <span class="comment">// fn2()</span></span><br><span class="line">  <span class="comment">// fn3()</span></span><br><span class="line">  <span class="comment">// fn4()</span></span><br><span class="line">  <span class="comment">// fn5()</span></span><br><span class="line">  <span class="comment">// fn6()</span></span><br><span class="line">  <span class="comment">// fn7()</span></span><br><span class="line">  <span class="comment">// fn8()</span></span><br><span class="line">  <span class="comment">// fn9()</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'11111'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'22222'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'33333'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  start 1560165694777</span></span><br><span class="line"><span class="comment">  11111 1560165694787</span></span><br><span class="line"><span class="comment">  end 1560165694790</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1_1</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'11111'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    resolve()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'11111-1111'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'22222'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'33333'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  start 1560166834093</span></span><br><span class="line"><span class="comment">  11111 1560166834106</span></span><br><span class="line"><span class="comment">  11111-1111 1560166834108</span></span><br><span class="line"><span class="comment">  end 1560166834110</span></span><br><span class="line"><span class="comment">  22222 1560166834115</span></span><br><span class="line"><span class="comment">  33333 1560166834119</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过前 fn1, fn1_1 两个小例子可知，最开始的new Promise可能对我们进行干扰，</span></span><br><span class="line"><span class="comment">出现这种状况的原因是，申明 new Promise的时候此时异步还未开始，所以我们</span></span><br><span class="line"><span class="comment">直接按照接下来的方式进行测试</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'11111'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'22222'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'33333'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  start 1560166657107</span></span><br><span class="line"><span class="comment">  end 1560166657117</span></span><br><span class="line"><span class="comment">  11111 1560166657120</span></span><br><span class="line"><span class="comment">  22222 1560166657122</span></span><br><span class="line"><span class="comment">  33333 1560166657130</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'11111'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'22222'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'2222error'</span>)</span><br><span class="line">    </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'33333'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line"></span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  start 1560166779524</span></span><br><span class="line"><span class="comment">  end 1560166779533</span></span><br><span class="line"><span class="comment">  11111 1560166779537</span></span><br><span class="line"><span class="comment">  22222 1560166779539</span></span><br><span class="line"><span class="comment">  2222error 1560166779543</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过 fn3 这个例子知道了，只要在调用过程中，返回了一个Promise的reject状态就会结束下去</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn4</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'11111'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'inner Promise'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'22222'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'33333'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line"></span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  start 1560167538395</span></span><br><span class="line"><span class="comment">  end 1560167538407</span></span><br><span class="line"><span class="comment">  11111 1560167538409</span></span><br><span class="line"><span class="comment">  inner Promise 1560167538414</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过 fn4 这个例子，如果调用链中返回一个pending，</span></span><br><span class="line"><span class="comment">他也会等待（Promise创建出来就是pending状态）,</span></span><br><span class="line"><span class="comment">他既没有reject,也没有resovle。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">到目前，一共有两种方式会阻止链式， </span></span><br><span class="line"><span class="comment">① 返回了一个reject的Promise   </span></span><br><span class="line"><span class="comment">② 返回pendding状态的Promsie</span></span><br><span class="line"><span class="comment">其余的情况都会畅通无阻的运行下去(前提直接就在调用链中了)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn5</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'11111'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'22222'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    <span class="built_in">Promise</span>.reject(<span class="string">'2222error'</span>)  </span><br><span class="line">    </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'33333'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line"></span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  start 1560166933856</span></span><br><span class="line"><span class="comment">  end 1560166933865</span></span><br><span class="line"><span class="comment">  11111 1560166933869</span></span><br><span class="line"><span class="comment">  22222 1560166933873</span></span><br><span class="line"><span class="comment">  33333 1560166933874</span></span><br><span class="line"><span class="comment">  (node:8196) UnhandledPromiseRejectionWarning: 2222error</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过 fn5 这个例子，其实那个新创建的Promise,并不属于这个调用链，我们接着向下验证</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn6</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'11111'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'22222'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    <span class="built_in">Promise</span>.reject(<span class="string">'2222error'</span>).then().catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'inner'</span> + err, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()))  </span><br><span class="line">    </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'33333'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line"></span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  start 1560167831274</span></span><br><span class="line"><span class="comment">  end 1560167831292</span></span><br><span class="line"><span class="comment">  11111 1560167831296</span></span><br><span class="line"><span class="comment">  22222 1560167831301</span></span><br><span class="line"><span class="comment">  33333 1560167831307</span></span><br><span class="line"><span class="comment">  inner2222error 1560167831316</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过 fn6 我们已经知道了在调用链中，如果return 出一个Promise，那么</span></span><br><span class="line"><span class="comment">它将属于此调用链，否则就会有他自己的一个调用链</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123; <span class="comment">// 这里模拟一个异步操作</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn7</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'11111'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    <span class="keyword">return</span> timeout(<span class="number">500</span>)</span><br><span class="line">    </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'22222'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    <span class="keyword">return</span> timeout(<span class="number">500</span>)</span><br><span class="line">    </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'33333'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    <span class="keyword">return</span> timeout(<span class="number">500</span>)</span><br><span class="line">    </span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    <span class="keyword">return</span> timeout(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  start 1560167223744</span></span><br><span class="line"><span class="comment">  end 1560167223759</span></span><br><span class="line"><span class="comment">  11111 1560167223764</span></span><br><span class="line"><span class="comment">  22222 1560167224274</span></span><br><span class="line"><span class="comment">  33333 1560167224779</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn8</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'11111'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    timeout(<span class="number">500</span>)</span><br><span class="line">    </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'22222'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    timeout(<span class="number">500</span>)</span><br><span class="line">    </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'33333'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    timeout(<span class="number">500</span>)</span><br><span class="line">    </span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    timeout(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  start 1560168006937</span></span><br><span class="line"><span class="comment">  end 1560168006951</span></span><br><span class="line"><span class="comment">  11111 1560168006954</span></span><br><span class="line"><span class="comment">  22222 1560168006961</span></span><br><span class="line"><span class="comment">  33333 1560168006966</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn9</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'11111'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    timeout(<span class="number">500</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'inner11111'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()) &#125;)</span><br><span class="line">    </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'22222'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    timeout(<span class="number">500</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'inner22222'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()) &#125;)</span><br><span class="line">    </span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'33333'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    timeout(<span class="number">500</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'inner33333'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()) &#125;)</span><br><span class="line">    </span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">    timeout(<span class="number">500</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'inner44444'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()) &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().getTime())</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  start 1560168109766</span></span><br><span class="line"><span class="comment">  end 1560168109775</span></span><br><span class="line"><span class="comment">  11111 1560168109778</span></span><br><span class="line"><span class="comment">  22222 1560168109781</span></span><br><span class="line"><span class="comment">  33333 1560168109785</span></span><br><span class="line"><span class="comment">  inner11111 1560168110281</span></span><br><span class="line"><span class="comment">  inner22222 1560168110288</span></span><br><span class="line"><span class="comment">  inner33333 1560168110291</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">最后通过 fn7, fn8, fn9 这三个例子中，以及传入的时间，</span></span><br><span class="line"><span class="comment">确实印证了之前所说的，这里用一副图进行代替。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">所以最为关键的就是，在Promise的调用链中，关键要明白你新产生的这个 Promsie</span></span><br><span class="line"><span class="comment">是否添加到了这个调用链中</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="总结图示"><a href="#总结图示" class="headerlink" title="总结图示"></a>总结图示</h4><p><img src="/img/2019/06/11/1.png" alt="Promise调用链"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>云函数中生成excel并且上传到云存储中</title>
      <link href="/2019/06/05/%E4%BA%91%E5%87%BD%E6%95%B0%E4%B8%AD%E7%94%9F%E6%88%90excel%E5%B9%B6%E4%B8%94%E4%B8%8A%E4%BC%A0%E5%88%B0%E4%BA%91%E5%AD%98%E5%82%A8%E4%B8%AD/"/>
      <url>/2019/06/05/%E4%BA%91%E5%87%BD%E6%95%B0%E4%B8%AD%E7%94%9F%E6%88%90excel%E5%B9%B6%E4%B8%94%E4%B8%8A%E4%BC%A0%E5%88%B0%E4%BA%91%E5%AD%98%E5%82%A8%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>云环境1.0.51</p></blockquote><p>小程序的云开发功能为我们带来了很大的方便，于是就打算研究一下如何在云函数中拉取数据，之后生成excel到云存储中，过程中踩了些坑，这里分享给大家，希望能有所帮助。</p><h4 id="首先了解一个node生成excel的库excel-export"><a href="#首先了解一个node生成excel的库excel-export" class="headerlink" title="首先了解一个node生成excel的库excel-export"></a>首先了解一个node生成excel的库<a href="https://github.com/functionscope/Node-Excel-Export" target="_blank" rel="noopener">excel-export</a></h4><p><em>虽然已经许久未更新了，但是目前还没有什么太大的问题，所以在他的基础上进行开发,并且上手也比较容易</em></p><h4 id="主要用法"><a href="#主要用法" class="headerlink" title="主要用法"></a>主要用法</h4><ol><li><p>引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nodeExcel = <span class="built_in">require</span>(<span class="string">'excel-export'</span>);</span><br></pre></td></tr></table></figure></li><li><p>创建配置对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> conf = &#123;</span><br><span class="line">  stylesXmlFile, <span class="comment">// 约束文件（不然生成的excel打开会报一些问题）</span></span><br><span class="line">  cols,          <span class="comment">// 可理解为表头  [&#123; caption: 'columnName', type: 'string' &#125;], 这里出于方便,type为string,具体可移步其文档查看</span></span><br><span class="line">  rows,          <span class="comment">// 可以理解为填充的数据 ['wechat', 'mp']</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建流对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let result = nodeExcel.execute(conf)</span><br><span class="line">// 普通node后端可以直接使用 res.end(result, &apos;binary&apos;); 进行下载，要记得添加相应的头，其文档里也有说明</span><br><span class="line">// 最终可以使用 Buffer.from(result.toString(), &apos;binary&apos;) 转换为一个Buffer对象</span><br></pre></td></tr></table></figure></li></ol><h4 id="嵌入云开发"><a href="#嵌入云开发" class="headerlink" title="嵌入云开发"></a>嵌入云开发</h4><p>大致的思路就是 [拉取数据] -&gt; [生成excel流对象] -&gt; [上传到云存储中] -&gt; [返回该fileID]</p><h5 id="几个踩坑点"><a href="#几个踩坑点" class="headerlink" title="几个踩坑点"></a>几个踩坑点</h5><ol><li>读入文件要使用 <code>path.resolve(__dirname, &#39;xxx&#39;)</code></li><li>得到excel流对象 使用 <code>Buffer.from(result.toString(), &#39;binary&#39;)</code> 再配合<code>cloud.uploadFile</code></li><li>生成时conf要配置<code>stylesXmlFile</code>,不然打开文件总有个提示，很不爽!,<code>styles.xml</code>这个文件可以在<code>node_modules/excel-export/example/styles.xml</code>找到。</li><li>数据和表头最好是对应的，数据也可以存在空值</li></ol><h4 id="云函数目录结构"><a href="#云函数目录结构" class="headerlink" title="云函数目录结构"></a>云函数目录结构</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- testDownload</span><br><span class="line">- |- index.js</span><br><span class="line">- |- styles.xml</span><br><span class="line">- |- package.json</span><br><span class="line">- |- package-lock.json</span><br><span class="line">- |- node_modules (在开发工具中应该是不显示的)</span><br></pre></td></tr></table></figure><h4 id="package-json中的依赖"><a href="#package-json中的依赖" class="headerlink" title="package.json中的依赖"></a>package.json中的依赖</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"dependencies": &#123;</span><br><span class="line">  "excel-export": "^0.5.1",</span><br><span class="line">  "wx-server-sdk": "latest"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="index-js文件代码"><a href="#index-js文件代码" class="headerlink" title="index.js文件代码"></a>index.js文件代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">'wx-server-sdk'</span>)</span><br><span class="line"><span class="keyword">const</span> nodeExcel = <span class="built_in">require</span>(<span class="string">'excel-export'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line">cloud.init(&#123;</span><br><span class="line">  env: <span class="string">"xxxx"</span>   <span class="comment">// 你的环境</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = cloud.database()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成分数项并且下载对应的excel</span></span><br><span class="line">exports.main = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> collectionId = <span class="string">'123666'</span>                 <span class="comment">// 模拟的集合名</span></span><br><span class="line">  <span class="keyword">let</span> openId = <span class="string">'sda6248daa888764'</span>             <span class="comment">// 模拟openid</span></span><br><span class="line">  <span class="keyword">let</span> confParams = [<span class="string">'姓名'</span>, <span class="string">'学号'</span>, <span class="string">'签到时间'</span>] <span class="comment">// 模拟表头</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> jsonData = []</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取数据</span></span><br><span class="line">  <span class="keyword">await</span> db.collection(collectionId).get().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    jsonData = res.data</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 转换成excel流数据</span></span><br><span class="line">  <span class="keyword">let</span> conf = &#123;</span><br><span class="line">    stylesXmlFile: path.resolve(__dirname, <span class="string">'styles.xml'</span>),</span><br><span class="line">    name: <span class="string">'sheet'</span>,</span><br><span class="line">    cols: confParams.map(<span class="function"><span class="params">param</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">caption</span>: param, <span class="attr">type</span>: <span class="string">'string'</span> &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    rows: jsonToArray(jsonData)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = nodeExcel.execute(conf) <span class="comment">// result为excel二进制数据流</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 上传到云存储</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> cloud.uploadFile(&#123;</span><br><span class="line">    cloudPath: <span class="string">`download/sheet<span class="subst">$&#123;openId&#125;</span>.xlsx`</span>,    <span class="comment">// excel文件名称及路径，即云存储中的路径</span></span><br><span class="line">    fileContent: Buffer.from(result.toString(), <span class="string">'binary'</span>),</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// json对象转换成数组填充</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">jsonToArray</span> (<span class="params">arrData</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line">    arrData.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> itemArray = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> item) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key === <span class="string">'_id'</span> || key === <span class="string">'_openid'</span>) &#123; <span class="keyword">continue</span> &#125;</span><br><span class="line">        itemArray.push(item[key])</span><br><span class="line">      &#125;</span><br><span class="line">      arr.push(itemArray)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="触发云函数，可以看到云存储中有了刚刚生成的文件"><a href="#触发云函数，可以看到云存储中有了刚刚生成的文件" class="headerlink" title="触发云函数，可以看到云存储中有了刚刚生成的文件"></a>触发云函数，可以看到云存储中有了刚刚生成的文件</h4><p><img src="/img/2019/06/05/1.png" alt="数据库中的数据"><br>数据库中的数据,由于表头都是一样的，所以这边的key可以适当的简化，但是要注意数据库中拉取数据顺序的问题</p><p><img src="/img/2019/06/05/2.png" alt="最终生成的excel"><br>最终生成的excel</p>]]></content>
      
      
      
        <tags>
            
            <tag> wxmp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.jQuery中选择元素的相关</title>
      <link href="/2019/06/01/jQuery%E4%B8%AD%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0%E7%9A%84%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/06/01/jQuery%E4%B8%AD%E9%80%89%E6%8B%A9%E5%85%83%E7%B4%A0%E7%9A%84%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>jQuery中最后都是输出一个伪数组，也即本质是一个对象，{0:xx, 1:xx, length:2}为其准备了length，也即可以使用循环，但是不能使用数组的内置方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.lenth; i++)&#123;</span><br><span class="line">  <span class="keyword">let</span> temp = <span class="keyword">this</span>[i]  <span class="comment">// 其实是通过一个字面量的方式取到了对象内部的数据。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.slice()  <span class="comment">// x 报错，其不是一个数组</span></span><br></pre></td></tr></table></figure></p></blockquote><p>一般情况下，会出现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>)  <span class="comment">// 创建元素</span></span><br><span class="line">$(<span class="string">'#dv1'</span>)        <span class="comment">// 选择id</span></span><br><span class="line">$(<span class="string">'.div a.active'</span>) <span class="comment">// 复杂的选择器</span></span><br><span class="line">$(<span class="built_in">document</span>)   <span class="comment">// 传入的对象</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;) <span class="comment">// 页面加载函数</span></span><br><span class="line">$(<span class="string">'[]'</span>) $(<span class="string">'&#123;&#125;'</span>)  <span class="comment">// 一些其他的</span></span><br></pre></td></tr></table></figure><p>首先他都是通过一些正则的判断，用来匹配，用if else来分治不同的情况。</p><ul><li><p><code>$(&#39;&lt;div&gt;&lt;/div&gt;&#39;) $(&#39;&lt;div title=&#39;div&#39; html=&quot;div&quot;&gt;&lt;/div&gt;&#39;)</code>html标签的形式<br>主要使用jQuery.parseHTML解析成html字符串的形式，并最后jQuery.merge来混合成位数组，如果里面有属性，则遍历这个属性,<br>如果是jQuery定义的方法，如css(),html(),就采用 <code>this[ key ] (this[key])</code> 否则进行属性添加，<code>this.attr(key, this[key])</code></p></li><li><p><code>$(&#39;#dv1&#39;)</code>id的形式<br>主要通过提取其id并且通过js原生方法getElementById用来获取dom,之后挂载到this后输出即可</p></li><li><p><code>$(&#39;.div a.active&#39;)</code>复杂的选择器<br>主要通过使用jQuery的内置方法find来进行寻找，其find内部使用了sizzle引擎进行查找</p></li><li><p><code>$(function () { })</code>function 页面加载函数<br>直接将其挂载到rootjQuery.ready() 上面，页面加载函数</p></li><li><p><code>$(&#39;[]&#39;) $(&#39;{}&#39;)</code>其他一些形式<br>通过jQuery.makeArray，传入两个参数，变成一个伪数组后输出即可</p></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>jQuery中的伪数组里面都是dom对象，这也就解释了为什么可以通过<code>$(&#39;&#39;)[0] $(&#39;&#39;).get(0)</code> 来转换成dom对象，（get方法内部就是this[num]，如果是负数 -&gt; 从后往前取，那么就是this[this.length+num]）</p><p>dom对象转换成jQuery对象只需要 <code>$(dom)</code>,如果是对象的话<code>this[0] = dom</code> 直接挂载上去即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.对创建jQuery的理解</title>
      <link href="/2019/05/31/%E5%AF%B9%E5%88%9B%E5%BB%BAjQuery%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2019/05/31/%E5%AF%B9%E5%88%9B%E5%BB%BAjQuery%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="关于jQuery中创建对象的相关，jQuery-fn-init-prototype-jQuery-fn"><a href="#关于jQuery中创建对象的相关，jQuery-fn-init-prototype-jQuery-fn" class="headerlink" title="关于jQuery中创建对象的相关，jQuery.fn.init.prototype = jQuery.fn;"></a>关于jQuery中创建对象的相关，jQuery.fn.init.prototype = jQuery.fn;</h2><blockquote><p>本文以jQuery2.0.3分析为例</p></blockquote><h2 id="关于构造函数的两个点"><a href="#关于构造函数的两个点" class="headerlink" title="关于构造函数的两个点"></a>关于构造函数的两个点</h2><ul><li>在JS中创建对象必须要使用<code>new</code>，否则就如同构建了一个普通对象，<code>this</code>表示未来创建的实例， 并返回this</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">school</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.school = school</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Student(<span class="string">'hdu'</span>) <span class="comment">// 创建了对象 &#123;school: 'hdu'&#125;</span></span><br><span class="line">Student(<span class="string">'hdu'</span>) <span class="comment">// 仅仅是执行了一个函数 并无其他作用</span></span><br></pre></td></tr></table></figure><ul><li>如果构造函数中有返回值<code>return xxx</code> 如果<code>xxx</code>是个复杂类型（对象,数组…）时，最终返回这个复杂类型（对象,数组…）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">school</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.school = school</span><br><span class="line">  <span class="keyword">return</span> <span class="number">666</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Student(<span class="string">'hdu'</span>) <span class="comment">// &#123;school: 'hdu'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span> (<span class="params">school</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.school = school</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">name</span>: <span class="string">'LiHua'</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Student(<span class="string">'hdu'</span>) <span class="comment">// &#123;name: 'LiHua'&#125;</span></span><br></pre></td></tr></table></figure><h4 id="jQuery-fn-init-prototype-jQuery-fn的作用"><a href="#jQuery-fn-init-prototype-jQuery-fn的作用" class="headerlink" title="jQuery.fn.init.prototype = jQuery.fn的作用"></a><code>jQuery.fn.init.prototype = jQuery.fn</code>的作用</h4><blockquote><p>首先在jQuery中定义了 <code>jQuery.fn = jQuery.prototype</code> ，其应该是方便后续的调用，fn就是prototype</p></blockquote><blockquote><p>我们在调用jQuery的时候，是采用<code>$(&#39;&#39;)</code>(<em>$ = jQuery</em>)</p></blockquote><p>我们都知道jQuery是面向对象的思想，其<code>$(&#39;&#39;).css()</code>,那么我们就能推测出来，<code>$(&#39;&#39;)</code>返回值是一个对象，<br>但是之前我们看到构造函数必须要使用<code>new</code>这个关键字才行,也就是<code>new $(&#39;&#39;)</code>，<br>然而jQuery目的就是让我们<code>write less</code>,所以我们自然就推测出来，<code>$(&#39;&#39;)</code>他的返回值是一个对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jQuery = <span class="function"><span class="keyword">function</span>(<span class="params"> selector, context </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init( selector, context, rootjQuery );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>这也就证明了我们的推测, 调用<code>$(&#39;&#39;)</code>其返回值是<code>jQuery.fn.init</code>的一个实例</p><p>那么问题又来了，我们在使用的时候，好多方法都是挂载到<code>$</code>原型上面的，那么既然创建出的是<code>jQuery.fn.init</code>的一个实例，<br>调用<code>$(&#39;&#39;).css()</code> 那么这个<code>css()</code>应该在<code>jQuery.fn.init</code>的原型上才对，但是纵观源码，都是对<code>jQuery</code>的原型操作的，<br>我们自己定义拓展方法也是 <code>$.fn.myFunction</code>,这都说明了我们确实是挂载到 <code>$</code>的原型上的，所以我们不妨大胆假设一下，<br><strong><code>jQuery.fn.init</code>的原型就是<code>jQuery</code>的原型</strong>，这样才能很好的解释我们的推测，也就说明了我们虽然创建出的是<code>jQuery.fn.init</code>的一个实例，<br>由于其原型也是<code>jQuery</code>的原型，所以我们给jQuery添加的拓展方法，自然就关联到jQuery.fn.init上了</p><p>带着问题向下翻，果不其然!<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Give the init function the jQuery prototype for later instantiation</span></span><br><span class="line">jQuery.fn.init.prototype = jQuery.fn;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>jQuery为了我们书写方便，避免了<code>new $(&#39; &#39;)</code>, 但是他的源码中帮我们new了一个对象出来，为了关联，就只能把jQuery的原型和底层帮我们new出来的这个的原型绑定在一起，</p><p>这就有一个假象： <code>$(&#39;&#39;)</code>，给我们 new 了一个jQuery出来。</p><ul><li>其实我们用的是jQuery.fn.init的实例</li><li>jQuery也只是一个方法名</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解读webpack,简单实现mypack</title>
      <link href="/2019/05/26/%E8%A7%A3%E8%AF%BBwebpack-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0mypack/"/>
      <url>/2019/05/26/%E8%A7%A3%E8%AF%BBwebpack-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0mypack/</url>
      
        <content type="html"><![CDATA[<p>虽然使用webpack有一阵日子了，但是对其内部的相关打包过程，还不是很了解，今天翻阅了相关资料后，借鉴写了一个webpack简化版本，仅是其核心的部分，mypack</p><h4 id="了解一下requireJS的大致运行过程"><a href="#了解一下requireJS的大致运行过程" class="headerlink" title="了解一下requireJS的大致运行过程"></a>了解一下requireJS的大致运行过程</h4><blockquote><p>这里需要node环境（用到了文件读写相关，webpack也是在node上运行的）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myRequire</span> (<span class="params">moduleName</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// content指示文件的内容</span></span><br><span class="line">  <span class="keyword">let</span> content = fs.readFileSync(moduleName, <span class="string">'UTF8'</span>)</span><br><span class="line">  <span class="keyword">let</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'exports'</span>, <span class="string">'module'</span>, <span class="string">'require'</span>, <span class="string">'__dirname'</span>, </span><br><span class="line">    <span class="string">'__filename'</span>, content + <span class="string">'\n return module.exports'</span>)</span><br><span class="line">  <span class="keyword">let</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">    exports: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, myRequire, __dirname, __filename)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = myRequire(<span class="string">'./b.js'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">"Hello RequireJS!"</span></span><br></pre></td></tr></table></figure><h4 id="模拟一下AMD的打包方式，虽然不常用，但是对理解起来是有帮助的"><a href="#模拟一下AMD的打包方式，虽然不常用，但是对理解起来是有帮助的" class="headerlink" title="模拟一下AMD的打包方式，虽然不常用，但是对理解起来是有帮助的"></a>模拟一下AMD的打包方式，虽然不常用，但是对理解起来是有帮助的</h4><blockquote><p>可以直接在浏览器中运行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myAMD.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> factories = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myDefine</span> (<span class="params">moduleName, dependencies, factory</span>) </span>&#123;</span><br><span class="line">  factory.dependencies = dependencies <span class="comment">// 挂在该方法上的依赖关系</span></span><br><span class="line">  factories[moduleName] = factory <span class="comment">// 创建对应关系</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myRequire</span> (<span class="params">mods, callback</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = mods.map(<span class="function"><span class="params">mod</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> factory = factories[mod] <span class="comment">// 获取该方法</span></span><br><span class="line">    <span class="keyword">let</span> dependencies = factory.dependencies <span class="comment">// 获取该依赖</span></span><br><span class="line">    <span class="keyword">let</span> exports</span><br><span class="line">    myRequire(dependencies, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">      exports = factory.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> exports</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> callback.apply(<span class="literal">null</span>, result)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 申明依赖</span></span><br><span class="line">myDefine(<span class="string">'name'</span>, [], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'AMD'</span></span><br><span class="line">&#125;)</span><br><span class="line">myDefine(<span class="string">'age'</span>, [], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">666</span></span><br><span class="line">&#125;)</span><br><span class="line">myDefine(<span class="string">'person'</span>, [<span class="string">'name'</span>, <span class="string">'age'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> person = <span class="string">'person '</span> + name + <span class="string">' is '</span> + age</span><br><span class="line">  <span class="keyword">return</span> person</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 引入依赖 第一种方式</span></span><br><span class="line">myRequire([<span class="string">'name'</span>, <span class="string">'age'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name, age)</span><br><span class="line">&#125;)</span><br><span class="line">myRequire([<span class="string">'person'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">person</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(person)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h6 id="其中的核心思想就是"><a href="#其中的核心思想就是" class="headerlink" title="其中的核心思想就是"></a>其中的核心思想就是</h6><ol><li>申明了一个全局的factories，并且通过其moduleName作为key,其factory（也就是callback）作为value,在申明的过程中就已经关联到了全局的factories,后续直接从中取出即可。</li><li>在挂载其依赖的时候，require内部分别将其依赖转换为依赖的结果（map方法），这里如果再有依赖可以利用递归的方式解决。</li></ol><h4 id="mypack的实现"><a href="#mypack的实现" class="headerlink" title="mypack的实现"></a>mypack的实现</h4><ol><li>配置mypack的环境</li></ol><ul><li><p>首先在建立mypack，（并进入mypack文件夹中）并且将在bin中创建出mypack.js,并且初始化npm环境<code>npm init -y</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|-mypack</span><br><span class="line">| |-bin</span><br><span class="line">|  |-mypack.js</span><br><span class="line">| |-package.json</span><br><span class="line">|</span><br><span class="line"></span><br><span class="line">// 注意修改package.json中的路径问题 bin: bin/mypack.js</span><br></pre></td></tr></table></figure></li><li><p>然后在mypack.js中文件头部<code>#! /usr/bin/env node</code> 不然会报没有适当的js解析器</p></li><li><p>之后我们进行链接 <code>npm link</code> 这样我们就全局安装，退回其他位置都可以执行命令 <code>&gt;mypack</code></p></li></ul><ol start="2"><li>首先确定入口文件，出口文件的位置，也即有执行的开始位置，将解析入口文件中的内容，递归的读入，把require替换成本规则可识别的函数名（本例myRequire），并且以key(文件路径)，value(内容)的形式放到总的modules中。也即所有用到的依赖已经到内存中。</li><li>立即执行函数，并且第一个require的就是入口文件，依次执行，也就是碰见myRequire(已经在第二步全部正则替换)时，解析出内容返回。</li><li>递归的进行myRequire的解析，其参数就为之前的modules的key,通过映射关系取出内容执行。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mypack.js  mypack代码</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> entry = <span class="string">'./src/index.js'</span>  <span class="comment">// 入口文件</span></span><br><span class="line"><span class="keyword">let</span> output = <span class="string">'./dist/index.js'</span>  <span class="comment">// 出口文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">let</span> modules = []</span><br><span class="line"><span class="keyword">let</span> script = fs.readFileSync(entry, <span class="string">'UTF8'</span>)</span><br><span class="line"><span class="comment">// 匹配对应关系</span></span><br><span class="line"><span class="keyword">let</span> replaceReg = <span class="function">(<span class="params">script</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> script.replace(<span class="regexp">/require\(['"](.+?)["']\)/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = path.join(<span class="string">'./src'</span>, <span class="built_in">arguments</span>[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">let</span> content = fs.readFileSync(name, <span class="string">'UTF8'</span>)</span><br><span class="line">    <span class="comment">// 对于每拿到的content都进行一次替换</span></span><br><span class="line">    content = replaceReg(content)</span><br><span class="line">    modules.push(&#123;name, content&#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`mypack_require('<span class="subst">$&#123;name&#125;</span>')`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">script = replaceReg(script)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">'ejs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">(function(modules) &#123;</span></span><br><span class="line"><span class="string">   // 引入</span></span><br><span class="line"><span class="string">   function mypack_require(moduleId) &#123;</span></span><br><span class="line"><span class="string">     var module = &#123;</span></span><br><span class="line"><span class="string">       exports: &#123;&#125;</span></span><br><span class="line"><span class="string">     &#125;;</span></span><br><span class="line"><span class="string">     modules[moduleId].call(module.exports, module, module.exports, mypack_require);</span></span><br><span class="line"><span class="string">     return module.exports;</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">   return mypack_require("&lt;%-entry%&gt;");</span></span><br><span class="line"><span class="string"> &#125;)</span></span><br><span class="line"><span class="string">  (&#123;</span></span><br><span class="line"><span class="string">   "&lt;%-entry%&gt;": (function(module, exports, mypack_require) &#123;</span></span><br><span class="line"><span class="string">     eval(\`&lt;%-script%&gt;\`);</span></span><br><span class="line"><span class="string">  &#125;) // index.js的文件</span></span><br><span class="line"><span class="string">&lt;%for(let i = 0; i &lt; modules.length; i++)&#123;</span></span><br><span class="line"><span class="string">let module = modules[i]%&gt;</span></span><br><span class="line"><span class="string">  ,</span></span><br><span class="line"><span class="string">    "&lt;%-module.name%&gt;": (function(module, exports, mypack_require) &#123;</span></span><br><span class="line"><span class="string">      eval(\`&lt;%-module.content%&gt;\`);</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;%&#125;%&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> &#125;);</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="comment">// 最终result为打包后的结果</span></span><br><span class="line"><span class="keyword">let</span> result = ejs.render(template, &#123;</span><br><span class="line">  entry,</span><br><span class="line">  script,</span><br><span class="line">  modules</span><br><span class="line">&#125;)</span><br><span class="line">fs.writeFileSync(output, result)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'mypack success'</span>)</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 目录结构</span><br><span class="line">|-src</span><br><span class="line">| |a.js</span><br><span class="line">| |c.js</span><br><span class="line">| |index.js</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js打包前的内容</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./a.js'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello mypack'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./c.js'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello mypack666'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// c.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'=====c.js======'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js 打包后的内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 引入</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">mypack_require</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">       exports: &#123;&#125;</span><br><span class="line">     &#125;;</span><br><span class="line">     modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, mypack_require);</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> mypack_require(<span class="string">"./src/index.js"</span>);</span><br><span class="line"> &#125;)</span><br><span class="line">  (&#123;</span><br><span class="line">   <span class="string">"./src/index.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, mypack_require</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">eval</span>(<span class="string">`mypack_require('src\a.js')</span></span><br><span class="line"><span class="string">console.log('hello mypack')`</span>);</span><br><span class="line">  &#125;) <span class="comment">// index.js的文件</span></span><br><span class="line"></span><br><span class="line">  ,</span><br><span class="line">    <span class="string">"src\a.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, mypack_require</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">eval</span>(<span class="string">`console.log('hello mypack666')`</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li>添加一个styleLoader,这里以函数的形式进行放入，也可以单独写一个模块引入</li></ol><ul><li>loader 其实就是在解析所有的代码时（递归读入代码，即replaceReg之中，对模块内容在进行一些处理）</li><li>loader 解析不同的文件是根据正则表达式的后缀进行区分的。</li><li>这里针对于styleLoader中的css代码，第一是进行了压缩成一行，并且替换掉了/r/n解析时的标志，因为innerText接收的是字符串，然而字符串是无法换行的，所以只能压缩成一行，在将原来空行形成的/r/n替换掉。（文末提出一种不压缩的方案）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  mypack.js  mypack代码加入了styleLoader </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> entry = <span class="string">'./src/index.js'</span>  <span class="comment">// 入口文件</span></span><br><span class="line"><span class="keyword">let</span> output = <span class="string">'./dist/index.js'</span>  <span class="comment">// 出口文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">let</span> modules = []</span><br><span class="line"><span class="keyword">let</span> script = fs.readFileSync(entry, <span class="string">'UTF8'</span>)</span><br><span class="line"><span class="comment">//======================styleLoader申明===================</span></span><br><span class="line"><span class="keyword">let</span> styleLoader = <span class="function"><span class="keyword">function</span> (<span class="params">source</span>) </span>&#123; <span class="comment">//模拟styleLoader</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">    let style = document.createElement('style')</span></span><br><span class="line"><span class="string">    style.innerText = <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(source).replace(<span class="regexp">/\\r\\n/g</span>, <span class="string">''</span>)&#125;</span></span></span><br><span class="line"><span class="string">    document.head.appendChild(style)</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=====================styleLoader申明结束===================</span></span><br><span class="line"><span class="comment">// 匹配对应关系</span></span><br><span class="line"><span class="keyword">let</span> replaceReg = <span class="function">(<span class="params">script</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> script.replace(<span class="regexp">/require\(['"](.+?)["']\)/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = path.join(<span class="string">'./src'</span>, <span class="built_in">arguments</span>[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">let</span> content = fs.readFileSync(name, <span class="string">'UTF8'</span>)</span><br><span class="line">    <span class="comment">// 对于每拿到的content都进行一次替换</span></span><br><span class="line">    content = replaceReg(content)</span><br><span class="line"><span class="comment">//======================应用规则=====================</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/\.css$/</span>.test(name))&#123;</span><br><span class="line">      content = styleLoader(content) <span class="comment">// 处理styleLoader</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//=====================应用规则结束===================</span></span><br><span class="line">    modules.push(&#123;name, content&#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`mypack_require('<span class="subst">$&#123;name&#125;</span>')`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">script = replaceReg(script)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">'ejs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">(function(modules) &#123;</span></span><br><span class="line"><span class="string">   // 引入</span></span><br><span class="line"><span class="string">   function mypack_require(moduleId) &#123;</span></span><br><span class="line"><span class="string">     var module = &#123;</span></span><br><span class="line"><span class="string">       exports: &#123;&#125;</span></span><br><span class="line"><span class="string">     &#125;;</span></span><br><span class="line"><span class="string">     modules[moduleId].call(module.exports, module, module.exports, mypack_require);</span></span><br><span class="line"><span class="string">     return module.exports;</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">   return mypack_require("&lt;%-entry%&gt;");</span></span><br><span class="line"><span class="string"> &#125;)</span></span><br><span class="line"><span class="string">  (&#123;</span></span><br><span class="line"><span class="string">   "&lt;%-entry%&gt;": (function(module, exports, mypack_require) &#123;</span></span><br><span class="line"><span class="string">     eval(\`&lt;%-script%&gt;\`);</span></span><br><span class="line"><span class="string">  &#125;) // index.js的文件</span></span><br><span class="line"><span class="string">&lt;%for(let i = 0; i &lt; modules.length; i++)&#123;</span></span><br><span class="line"><span class="string">let module = modules[i]%&gt;</span></span><br><span class="line"><span class="string">  ,</span></span><br><span class="line"><span class="string">    "&lt;%-module.name%&gt;": (function(module, exports, mypack_require) &#123;</span></span><br><span class="line"><span class="string">      eval(\`&lt;%-module.content%&gt;\`);</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;%&#125;%&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> &#125;);</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="comment">// 最终result为打包后的结果</span></span><br><span class="line"><span class="keyword">let</span> result = ejs.render(template, &#123;</span><br><span class="line">  entry,</span><br><span class="line">  script,</span><br><span class="line">  modules</span><br><span class="line">&#125;)</span><br><span class="line">fs.writeFileSync(output, result)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'mypack success'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 目录结构</span><br><span class="line">|-src</span><br><span class="line">| |a.js</span><br><span class="line">| |c.js</span><br><span class="line">| |b.css</span><br><span class="line">| |index.js</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js打包前的内容</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./a.js'</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./b.css'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello mypack'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./c.js'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello mypack666'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// c.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'=====c.js======'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//b.css</span></span><br><span class="line">body&#123;</span><br><span class="line">  background: hotpink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js 打包后的内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 引入</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">mypack_require</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">       exports: &#123;&#125;</span><br><span class="line">     &#125;;</span><br><span class="line">     modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, mypack_require);</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> mypack_require(<span class="string">"./src/index.js"</span>);</span><br><span class="line"> &#125;)</span><br><span class="line">  (&#123;</span><br><span class="line">   <span class="string">"./src/index.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, mypack_require</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">eval</span>(<span class="string">`mypack_require('src\a.js')</span></span><br><span class="line"><span class="string">mypack_require('src\b.css')</span></span><br><span class="line"><span class="string">console.log('hello mypack')`</span>);</span><br><span class="line">  &#125;) <span class="comment">// index.js的文件</span></span><br><span class="line"></span><br><span class="line">  ,</span><br><span class="line">    <span class="string">"src\c.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, mypack_require</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">eval</span>(<span class="string">`console.log('=====c.js======')`</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  ,</span><br><span class="line">    <span class="string">"src\a.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, mypack_require</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">eval</span>(<span class="string">`mypack_require('src\c.js')</span></span><br><span class="line"><span class="string">console.log('hello mypack666')`</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  ,</span><br><span class="line">    <span class="string">"src\b.css"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, mypack_require</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">eval</span>(<span class="string">`</span></span><br><span class="line"><span class="string">    let style = document.createElement('style')</span></span><br><span class="line"><span class="string">    style.innerText = "body&#123;  background: hotpink;&#125;"</span></span><br><span class="line"><span class="string">    document.head.appendChild(style)</span></span><br><span class="line"><span class="string">  `</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><ol start="6"><li>不压缩css的一种写法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">style.innerText = \\\<span class="string">` <span class="subst">$&#123;source&#125;</span> \\\`</span></span><br><span class="line"><span class="string">// 代码在构建的时候 输出到index.js变成了 evel(`</span> ...\<span class="string">` backgrounde... \` ... `</span>)</span><br><span class="line"><span class="comment">// 代码再被执行的时候，执行evel的时候，就以模板字符串` background ...` 呈现出来</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js 打包后变为</span></span><br><span class="line">style.innerText = \<span class="string">` body&#123;</span></span><br><span class="line"><span class="string">  background: hotpink;</span></span><br><span class="line"><span class="string">&#125; \`</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>种好每一颗土豆</title>
      <link href="/2019/05/24/%E7%A7%8D%E5%A5%BD%E6%AF%8F%E4%B8%80%E9%A2%97%E5%9C%9F%E8%B1%86/"/>
      <url>/2019/05/24/%E7%A7%8D%E5%A5%BD%E6%AF%8F%E4%B8%80%E9%A2%97%E5%9C%9F%E8%B1%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感谢75岁的任老先生</p></blockquote><ul><li>“风口浪尖”的华为</li></ul><p>这几天由于美国相关政策，华为的芯片西方供应链似乎全部断裂，加上之前孟女士被加拿大政府软禁，就在这样一个紧急关头，大家都在担心华为今后发展之时，任老先生的采访似乎形成了巨大反差，就连我们的央视记者都感到诧异，而在他的回答中，无不显示一个掌舵人的沉稳。</p><ul><li>种好每一颗土豆</li></ul><p>任老先生的回答中，关于基础教育谈到了很多，也提到公司内部的数学家，物理学家，以及工程师，全球人才的引进,生于忧患死于安乐。这都是值得我们思考的问题。或许不能带上过于偏激的想法，真正的发展，才是最重要的，就如任老先生所说，在攀登珠峰的道路上，我们暂时滑了下去，但是有朝一日，我们会在峰顶携手共进。</p><p>在这样的环境下，似乎都有了去搞芯片的想法，但给我影响最大的，就是那句“种好每一个土豆”，我们怎样爱国，并不是买他的手机，也不是一窝蜂去干什么，各行各业都对祖国有贡献，或许我们种好每一颗土豆，就是对祖国最大的支持。</p><p>加油！“愿有朝一日，我们在珠峰携手共进。”</p><p><img src="/img/2019/05/24/1.png" alt="75岁的任老先生"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Apache2的安装与配置</title>
      <link href="/2019/05/23/Apache2%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/05/23/Apache2%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当前环境Centos7</p></blockquote><ol><li><p>安装Apache</p><ul><li><code>yum install httpd</code></li></ul></li><li><p>httpd 启动</p><ul><li><code>service httpd start</code></li></ul></li><li><p>httpd 状态查看</p><ul><li><code>service httpd status</code></li></ul></li><li><p>httpd 停止</p><ul><li><code>service httpd stop</code></li></ul></li><li><p>安装目录介绍</p><ul><li><p>Apache默认将网站的根目录指向/var/www/html</p></li><li><p>默认的主配置文件/etc/httpd/conf/httpd.conf</p></li><li><p>配置存储在的/etc/httpd/conf.d/目录</p></li></ul></li></ol><ul><li>如果出现外部设备无法访问的情况，应该调试相关的防火墙配置</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>45天的诞生</title>
      <link href="/2019/05/20/45%E5%A4%A9%E7%9A%84%E8%AF%9E%E7%94%9F/"/>
      <url>/2019/05/20/45%E5%A4%A9%E7%9A%84%E8%AF%9E%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="记第一个微信小程序的上线"><a href="#记第一个微信小程序的上线" class="headerlink" title="记第一个微信小程序的上线"></a>记第一个微信小程序的上线</h2><blockquote><p>从0405号创建项目开始，到慢慢探索，中间确实收获了不少的知识，最开始是为了’微信小程序比赛’,但是在不断的打磨当中，才慢慢发现做一个应用也并非写一个程序，需要不断地打磨，或许有写好的功能，又要被砍去，或许几天后发现之前的做法简直蠢极了，更多的感悟，都融进了这个应用里，感谢它带给我的成长，继续加油吧！</p></blockquote><p><img src="/img/2019/05/20/1.jpg" alt="小程序码"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一百万种可能</title>
      <link href="/2019/05/05/%E4%B8%80%E7%99%BE%E4%B8%87%E7%A7%8D%E5%8F%AF%E8%83%BD/"/>
      <url>/2019/05/05/%E4%B8%80%E7%99%BE%E4%B8%87%E7%A7%8D%E5%8F%AF%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2018/11/16-2019/05/05 一共170天</p></blockquote><p>不知不觉，这样过去了快半年，明天5.6号就结束了，一瞬间有一百万种可能，感谢成长，这一阵子失去了很多，也获得了很多，很多的意想不到，很多的突然闯入，感谢这一阵子让我成长的人和事，明天开始就要努力学习了，或许自己还没有很多能力去干很多事情，或许还有好多，回想起之前的种种不舍，但是，还是要继续向前，加油吧，浩南，路还很长，一定不要放弃，给自己加油，你是最棒的！</p><p><img src="/img/2019/05/05/1.jpg" alt="致自己"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用vm连接虚拟机</title>
      <link href="/2019/05/04/%E4%BD%BF%E7%94%A8vm%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2019/05/04/%E4%BD%BF%E7%94%A8vm%E8%BF%9E%E6%8E%A5%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基于Centos7</p></blockquote><p>参考:<a href="https://blog.csdn.net/n950814abc/article/details/79512834#commentBox" target="_blank" rel="noopener">https://blog.csdn.net/n950814abc/article/details/79512834#commentBox</a></p><h4 id="设置虚拟机网络设置"><a href="#设置虚拟机网络设置" class="headerlink" title="设置虚拟机网络设置"></a>设置虚拟机网络设置</h4><p>使用vmnet8 即（NAT模式）记住<strong>子网IP</strong>与<strong>子网掩码</strong></p><p>比如 <em>子网IP：192.168.204.0 子网掩码：255.255.255.0</em></p><h4 id="网络配置，电脑中网络适配器VMare8-Network-Adapter"><a href="#网络配置，电脑中网络适配器VMare8-Network-Adapter" class="headerlink" title="网络配置，电脑中网络适配器VMare8 Network Adapter"></a>网络配置，电脑中网络适配器VMare8 Network Adapter</h4><p>注意ip地址，是电脑最为一台机器的ip<em>如 192.168.204.6</em></p><p>子网掩码，默认网关填写之前即可 DNS服务器可以使用8.8.8.8 / 114.114.114.114</p><h4 id="配置linux中的网络配置"><a href="#配置linux中的网络配置" class="headerlink" title="配置linux中的网络配置"></a>配置linux中的网络配置</h4><p>vim /etc/sysconfig/network-scripts/ifcfg-ens33 （这里为ifcfg-ens33根据实际情况来）</p><ul><li><p>修改配置：<br><code>BOOTPROTO=static  // 静态ip</code></p></li><li><p>新增地址：如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IPADDR=192.168.204.134    // 分配的ip</span><br><span class="line">NERMASK=255.255.255.0     // 子网掩码</span><br><span class="line">GATEWAY=192.168.204.1     // 默认网关</span><br></pre></td></tr></table></figure></li></ul><h4 id="重启linux的网络配置"><a href="#重启linux的网络配置" class="headerlink" title="重启linux的网络配置"></a>重启linux的网络配置</h4><p>service network restart</p><h4 id="查看ip地址"><a href="#查看ip地址" class="headerlink" title="查看ip地址"></a>查看ip地址</h4><p>ifconfig 查看ens33那个</p><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><ul><li><p>之前一直在纠结linux是否要联网才能用，因为是我自己配置的？为什么要联网？ </p><p>这里其实是连接本地服务的那个网，所以才要在那里配置开机自启动。</p></li><li><p>外部电脑地址到底是x.x.x.1还是要另外设置?</p><p>主机也相当于一台电脑，和虚拟机中平起平坐，只不过是它连接的正好是他自己的服务，但是也要给他一个内网ip,所以之前设置了电脑上为192.168.204.6，在windows中查看也可以看到。而192.168.204.1是默认网关只要和默认网关不同就可以。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用nginx部署前端项目</title>
      <link href="/2019/04/26/%E4%BD%BF%E7%94%A8nginx%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/04/26/%E4%BD%BF%E7%94%A8nginx%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当前环境 centos7</p></blockquote><h4 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h4><ul><li><p>gcc 安装</p><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p><p><code>yum install gcc-c++</code></p></li><li><p>PCRE pcre-devel 安装</p><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：</p><p><code>yum install -y pcre pcre-devel</code></p></li><li><p>zlib 安装</p><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p><p><code>yum install -y zlib zlib-devel</code></p></li><li><p>OpenSSL 安装</p><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</p><p><code>yum install -y openssl openssl-devel</code></p></li></ul><h4 id="下载nginx"><a href="#下载nginx" class="headerlink" title="下载nginx"></a>下载nginx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://nginx.org/download/nginx-1.10.1.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜狐镜像</span></span><br><span class="line">wget -c http://mirrors.sohu.com/nginx/nginx-0.1.8.tar.gz</span><br></pre></td></tr></table></figure><h4 id="解压nginx"><a href="#解压nginx" class="headerlink" title="解压nginx"></a>解压nginx</h4><p><code>tar -xzvf nginx-1.10.1.tar.gz</code></p><h4 id="安装（进入解压目录）"><a href="#安装（进入解压目录）" class="headerlink" title="安装（进入解压目录）"></a>安装（进入解压目录）</h4><ul><li><code>./configure</code></li><li><code>make</code></li><li><code>make install</code></li><li>查看nginx的安装目录<code>whereis nginx</code></li></ul><h4 id="测试nginx"><a href="#测试nginx" class="headerlink" title="测试nginx"></a>测试nginx</h4><ul><li><code>./nginx</code> 开区服务</li><li><code>./nginx -s quit</code> 关闭服务</li></ul><h4 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h4><ul><li>切换到安装目录中的<code>conf</code>文件夹</li><li>编辑<code>vim nginx.config</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root  &lt;项目的路径&gt;;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="启动nginx查看运行情况"><a href="#启动nginx查看运行情况" class="headerlink" title="启动nginx查看运行情况"></a>启动nginx查看运行情况</h4><ul><li><code>ps -ef | grep nginx</code> 查看nginx运行的情况以及pid</li><li><code>./nginx -s quit</code></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>以上操作需在nginx安装目录中，（可参考linux环境变量相关知识）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于云开发中云函数超时定义</title>
      <link href="/2019/04/19/%E5%85%B3%E4%BA%8E%E4%BA%91%E5%BC%80%E5%8F%91%E4%B8%AD%E4%BA%91%E5%87%BD%E6%95%B0%E8%B6%85%E6%97%B6%E5%AE%9A%E4%B9%89/"/>
      <url>/2019/04/19/%E5%85%B3%E4%BA%8E%E4%BA%91%E5%BC%80%E5%8F%91%E4%B8%AD%E4%BA%91%E5%87%BD%E6%95%B0%E8%B6%85%E6%97%B6%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>在云函数中的定义里，有一个关于超时的概念，这里并不是程序实际运行的时间，而是一个预期运行的时间</p><p>比如一个程序跑下来仅用了 8ms 但是他一直在等待内部的异步操作执行完才会关闭，这里就是异步操作超时，导致整个请求超时。（20s是截止目前云函数最长运行时间）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'=======  start  ==='</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())   <span class="comment">// 1555601179634</span></span><br><span class="line">db.collection(<span class="string">"testCollection"</span>).get()</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===第一次===='</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()) <span class="comment">// 1555601179843</span></span><br><span class="line">    <span class="keyword">return</span> timeout(<span class="number">5000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===第二次===='</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()) <span class="comment">// 1555601184847</span></span><br><span class="line">    <span class="keyword">return</span> timeout(<span class="number">5000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===第三次===='</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()) <span class="comment">// 1555601189853</span></span><br><span class="line">    <span class="keyword">return</span> timeout(<span class="number">5000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===第四次===='</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()) <span class="comment">// 1555601194853</span></span><br><span class="line">    <span class="keyword">return</span> timeout(<span class="number">5000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'===第五次===='</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()) <span class="comment">// 这里已经是超时区了</span></span><br><span class="line">    <span class="keyword">return</span> timeout(<span class="number">5000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'=======  end  ==='</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())   <span class="comment">// 1555601179642</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装的Promise的等待函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> wxmp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>02关于云函数中await与async的理解</title>
      <link href="/2019/04/19/%E5%85%B3%E4%BA%8E%E4%BA%91%E5%87%BD%E6%95%B0%E4%B8%ADawait%E4%B8%8Easync%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2019/04/19/%E5%85%B3%E4%BA%8E%E4%BA%91%E5%87%BD%E6%95%B0%E4%B8%ADawait%E4%B8%8Easync%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>在小程序云开发的服务端交互数据库的案例中，官方文档都用了async与await,其实是为了更好的表示出先后次序</p><h4 id="核心语法"><a href="#核心语法" class="headerlink" title="核心语法"></a>核心语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">await</span> asyncFunction()   <span class="comment">// 等待异步函数的执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实他会阻塞函数，可以理解为把一个异步活生生变成同步了</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">;<span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())    <span class="comment">// 1555597655277</span></span><br><span class="line">  timeout(<span class="number">5000</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())    <span class="comment">// 1555597655279</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;<span class="function">(<span class="params"><span class="keyword">async</span> (</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())    <span class="comment">// 1555597655277</span></span><br><span class="line">  <span class="keyword">await</span> timeout(<span class="number">5000</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime())    <span class="comment">// 1555597655279</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>那么可以看出，这样做的目的，一方面是为了严控代码的执行顺序，另一方便也省去了很多考虑异步的麻烦。</p>]]></content>
      
      
      
        <tags>
            
            <tag> wxmp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mpvue-fullpage</title>
      <link href="/2019/04/05/mpvue-fullpage/"/>
      <url>/2019/04/05/mpvue-fullpage/</url>
      
        <content type="html"><![CDATA[<p>自定义的fullpage效果, 其核心是<code>top</code>属性的改变</p><h4 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h4><ol><li>复制此模板去自己的项目中</li><li>每一个滚动屏div添加上<code>class:section</code></li><li>在totalPageNum填入当前滚动屏的数量</li></ol><h4 id="使用了一些技巧"><a href="#使用了一些技巧" class="headerlink" title="使用了一些技巧"></a>使用了一些技巧</h4><ul><li>css高度属性  hv, wv, 高度，宽度的视口大小， 100hv = 1 viewport height 等等</li><li>为了双向数据绑定，将变化的css属性 以style属性的方式写在了标签内部。</li></ul><h4 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h4><p><img src="/img/2019/04/05/1.gif" alt="预览效果"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;fullpage-container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;fullpage-container-fill&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;scroll-fullpage&quot; :style=&quot;&#123; top: top &#125;&quot; ref=&quot;fullpage&quot;&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          id=&quot;hook1&quot;</span><br><span class="line">          class=&quot;section section01&quot;</span><br><span class="line">          :class=&quot;&#123; active: scrollindex === 0 &#125;&quot;</span><br><span class="line">          @touchstart=&quot;scrollTouchStart&quot;</span><br><span class="line">          @touchmove=&quot;scrollTouchMove&quot;</span><br><span class="line">          @touchend=&quot;scrollTouchEnd&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;div class=&quot;cont&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;cont-body&quot;&gt;</span><br><span class="line">              &lt;h1&gt;排队挂号&lt;/h1&gt;</span><br><span class="line">              &lt;h3&gt;腰腿痛---&gt;建议前往骨伤科就诊&lt;/h3&gt;</span><br><span class="line">              &lt;p&gt;①&lt;/p&gt;</span><br><span class="line">              &lt;h4&gt;↓↓↓↓↓&lt;/h4&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div</span><br><span class="line">          id=&quot;hook2&quot;</span><br><span class="line">          class=&quot;section section02&quot;</span><br><span class="line">          :class=&quot;&#123; active: scrollindex === 1 &#125;&quot;</span><br><span class="line">          @touchstart=&quot;scrollTouchStart&quot;</span><br><span class="line">          @touchmove=&quot;scrollTouchMove&quot;</span><br><span class="line">          @touchend=&quot;scrollTouchEnd&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;div class=&quot;cont&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;cont-body&quot;&gt;</span><br><span class="line">              &lt;h1&gt;前往骨伤科&lt;/h1&gt;</span><br><span class="line">              &lt;h3&gt;三楼，电梯口右侧&lt;/h3&gt;</span><br><span class="line">              &lt;p&gt;②&lt;/p&gt;</span><br><span class="line">              &lt;h4&gt;↓↓↓↓↓&lt;/h4&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div</span><br><span class="line">          id=&quot;hook3&quot;</span><br><span class="line">          class=&quot;section section03&quot;</span><br><span class="line">          :class=&quot;&#123; active: scrollindex === 2 &#125;&quot;</span><br><span class="line">          @touchstart=&quot;scrollTouchStart&quot;</span><br><span class="line">          @touchmove=&quot;scrollTouchMove&quot;</span><br><span class="line">          @touchend=&quot;scrollTouchEnd&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;div class=&quot;cont&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;cont-body&quot;&gt;</span><br><span class="line">              &lt;h1&gt;预约医师&lt;/h1&gt;</span><br><span class="line">              &lt;h3&gt;请将您的挂号单与前台处扫描&lt;/h3&gt;</span><br><span class="line">              &lt;p&gt;③&lt;/p&gt;</span><br><span class="line">              &lt;h4&gt;↓↓↓↓↓&lt;/h4&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div</span><br><span class="line">          id=&quot;hook4&quot;</span><br><span class="line">          class=&quot;section section04&quot;</span><br><span class="line">          :class=&quot;&#123; active: scrollindex === 3 &#125;&quot;</span><br><span class="line">          @touchstart=&quot;scrollTouchStart&quot;</span><br><span class="line">          @touchmove=&quot;scrollTouchMove&quot;</span><br><span class="line">          @touchend=&quot;scrollTouchEnd&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;div class=&quot;cont&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;cont-body&quot;&gt;</span><br><span class="line">              &lt;h1&gt;收费处缴纳医药费&lt;/h1&gt;</span><br><span class="line">              &lt;h3&gt;一楼，大厅，进大门右手处&lt;/h3&gt;</span><br><span class="line">              &lt;p&gt;④&lt;/p&gt;</span><br><span class="line">              &lt;h4&gt;↓↓↓↓↓&lt;/h4&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      scrollindex: 0, // 当前页面的索引值</span><br><span class="line">      totalPageNum: 4, // 总共页面数</span><br><span class="line">      starty: 0, // 开始的位置x</span><br><span class="line">      startTime: 0, // 开始的时间戳</span><br><span class="line">      endy: 0, // 结束的位置y</span><br><span class="line">      endTime: 0, // 结束的时间戳</span><br><span class="line">      critical: 120, // 触发翻页的临界值</span><br><span class="line">      maxTimeCritical: 300, // 滑动的时间戳临界值上限</span><br><span class="line">      minTimeCritical: 100 // 滑动的时间戳临界值下限</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    top() &#123;</span><br><span class="line">      // 计算当前往上的距离</span><br><span class="line">      return this.scrollindex * -100 + &apos;vh&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    scrollTouchStart(e) &#123;</span><br><span class="line">      e = e.mp;</span><br><span class="line">      // 获取开始点击点</span><br><span class="line">      this.starty = e.touches[0].pageY;</span><br><span class="line">      // 获取当前点击时间</span><br><span class="line">      this.startTime = e.timeStamp;</span><br><span class="line">    &#125;,</span><br><span class="line">    scrollTouchMove(e) &#123;&#125;,</span><br><span class="line">    scrollTouchEnd(e) &#123;</span><br><span class="line">      e = e.mp;</span><br><span class="line">      // 获取结束位置</span><br><span class="line">      this.endy = e.changedTouches[0].pageY;</span><br><span class="line">      // 间隔时间</span><br><span class="line">      this.endTime = e.timeStamp;</span><br><span class="line">      let timeStampdiffer = this.endTime - this.startTime;</span><br><span class="line"></span><br><span class="line">      if (</span><br><span class="line">        // 此时判断是滑动的时间差</span><br><span class="line">        timeStampdiffer &lt;= this.maxTimeCritical &amp;&amp;</span><br><span class="line">        timeStampdiffer &gt; this.minTimeCritical &amp;&amp;</span><br><span class="line">        // 此时判断已经改变了 初始位置 &gt; 当前位置</span><br><span class="line">        this.starty &gt; e.changedTouches[0].pageY</span><br><span class="line">      ) &#123;</span><br><span class="line">        // 手势上滑  移动</span><br><span class="line">        this.scrollindex =</span><br><span class="line">          this.scrollindex &gt;= this.totalPageNum-1 ? this.scrollindex : this.scrollindex + 1;</span><br><span class="line">      &#125; else if (</span><br><span class="line">        // 判断时间</span><br><span class="line">        timeStampdiffer &lt;= this.maxTimeCritical &amp;&amp;</span><br><span class="line">        timeStampdiffer &gt; this.minTimeCritical &amp;&amp;</span><br><span class="line">        // 初始位置 &lt; 当前位置  手势下滑</span><br><span class="line">        this.starty &lt; e.changedTouches[0].pageY</span><br><span class="line">      ) &#123;</span><br><span class="line">        // 手势下滑 移动</span><br><span class="line">        this.scrollindex = this.scrollindex &lt;= 0 ? 0 : this.scrollindex - 1 ;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;wxss&quot;&gt;</span><br><span class="line">#hook1 &#123;</span><br><span class="line">  background: #9999cc;</span><br><span class="line">&#125;</span><br><span class="line">#hook2 &#123;</span><br><span class="line">  background: #cc66cc;</span><br><span class="line">&#125;</span><br><span class="line">#hook3 &#123;</span><br><span class="line">  background: #cc99cc;</span><br><span class="line">&#125;</span><br><span class="line">#hook4 &#123;</span><br><span class="line">  background: #cccccc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cont&#123;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.cont-body h4&#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  bottom: 100rpx;</span><br><span class="line">  font-size: 48rpx;</span><br><span class="line">  left: 45%;</span><br><span class="line">  color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">.cont-body p&#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: 80rpx;</span><br><span class="line">  color: #fff;</span><br><span class="line">  margin-top: 300rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">page &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  background: #fff;</span><br><span class="line">  color: #282828;</span><br><span class="line">&#125;</span><br><span class="line">.fullpage-container &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  flex: 1;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  padding: 0;</span><br><span class="line">  align-items: initial;</span><br><span class="line">  justify-content: first baseline;</span><br><span class="line">&#125;</span><br><span class="line">.fullpage-container-fill &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.scroll-fullpage &#123;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  position: absolute;</span><br><span class="line">  /* 增加动画*/</span><br><span class="line">  transition: top .3s linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.section &#123;</span><br><span class="line">  width: 100vw;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.cont &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>orcl创建数据库基于DBCA-11g（图）</title>
      <link href="/2019/03/17/orcl%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E4%BA%8EDBCA-11g/"/>
      <url>/2019/03/17/orcl%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E4%BA%8EDBCA-11g/</url>
      
        <content type="html"><![CDATA[<h4 id="第1步"><a href="#第1步" class="headerlink" title="第1步"></a>第1步</h4><p><img src="/img/2019/03/17/1.png" alt=""></p><h4 id="第2步"><a href="#第2步" class="headerlink" title="第2步"></a>第2步</h4><p><img src="/img/2019/03/17/2.png" alt=""></p><h4 id="第3步"><a href="#第3步" class="headerlink" title="第3步"></a>第3步</h4><p><img src="/img/2019/03/17/3.png" alt=""></p><h4 id="第4步"><a href="#第4步" class="headerlink" title="第4步"></a>第4步</h4><p><img src="/img/2019/03/17/4.png" alt=""></p><h4 id="第5步"><a href="#第5步" class="headerlink" title="第5步"></a>第5步</h4><p><img src="/img/2019/03/17/5.png" alt=""></p><h4 id="第6步"><a href="#第6步" class="headerlink" title="第6步"></a>第6步</h4><p><img src="/img/2019/03/17/6.png" alt=""></p><h4 id="第7步"><a href="#第7步" class="headerlink" title="第7步"></a>第7步</h4><p><img src="/img/2019/03/17/7.png" alt=""></p><h4 id="第8步"><a href="#第8步" class="headerlink" title="第8步"></a>第8步</h4><p><img src="/img/2019/03/17/8.png" alt=""></p><h4 id="第9步"><a href="#第9步" class="headerlink" title="第9步"></a>第9步</h4><p><img src="/img/2019/03/17/9.png" alt=""></p><h4 id="第10步"><a href="#第10步" class="headerlink" title="第10步"></a>第10步</h4><p><img src="/img/2019/03/17/10.png" alt=""></p><h4 id="第11步"><a href="#第11步" class="headerlink" title="第11步"></a>第11步</h4><p><img src="/img/2019/03/17/11.png" alt=""></p><h4 id="确认安装"><a href="#确认安装" class="headerlink" title="确认安装"></a>确认安装</h4><p><img src="/img/2019/03/17/12.png" alt=""></p><p>最后一路等待就可以</p>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>npm中关于依赖包冲突的问题</title>
      <link href="/2019/03/06/npm%E4%B8%AD%E5%85%B3%E4%BA%8E%E4%BE%9D%E8%B5%96%E5%8C%85%E5%86%B2%E7%AA%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/03/06/npm%E4%B8%AD%E5%85%B3%E4%BA%8E%E4%BE%9D%E8%B5%96%E5%8C%85%E5%86%B2%E7%AA%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>测试环境 npm-v 6.8.0 </p></blockquote><p>要了解npm解决包冲突的问题，就要先了解一下他是如何找包的</p><h4 id="node中require查找依赖的方式"><a href="#node中require查找依赖的方式" class="headerlink" title="node中require查找依赖的方式"></a>node中require查找依赖的方式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">│   app.js</span><br><span class="line">│</span><br><span class="line">└───node_modules</span><br></pre></td></tr></table></figure><p>一般我们们的app.js中的requier查找依赖的时候，会去目录下的node_modules去寻找</p><p>但是，实际他会以一种依次向上的方式进行寻找，<strong>这里以common模块依赖jquery为例</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// common.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>)</span><br></pre></td></tr></table></figure></p><hr><ul><li><p>向外层目录寻找(当前目录没找到指定的js)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">│   app.js</span><br><span class="line">│</span><br><span class="line">├───common</span><br><span class="line">│   │   common.js</span><br><span class="line">│   │</span><br><span class="line">│   └───node_modules</span><br><span class="line">│       └───bootstrap</span><br><span class="line">└───node_modules</span><br><span class="line">    └───jquery</span><br></pre></td></tr></table></figure><ol><li>首先 common.js会在本级的node_modules中寻找是否存在jquery</li><li>之后，他会向上一层目录去寻找，是否有node_modules,并去寻找</li></ol></li></ul><hr><ul><li><p>向外层目录寻找(当前目录不存在node_modules)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">│   app.js</span><br><span class="line">│</span><br><span class="line">├───common</span><br><span class="line">│       common.js</span><br><span class="line">│</span><br><span class="line">└───node_modules</span><br><span class="line">    └───jquery</span><br></pre></td></tr></table></figure><ol><li>首先，common.js的本级目录不存在node_modules，直接跳向上一级目录</li><li>在上级目录中，找到了指定的js</li></ol></li></ul><hr><ul><li><p>向多层目录下寻找（直到找到根目录为止）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">│   app.js</span><br><span class="line">│</span><br><span class="line">├───mgr</span><br><span class="line">│   └───public</span><br><span class="line">│       ├───common</span><br><span class="line">│       │   │   common.js</span><br><span class="line">│       │   │</span><br><span class="line">│       │   └───node_modules</span><br><span class="line">│       │       └───bootstrap</span><br><span class="line">│       └───node_modules</span><br><span class="line">│           └───express</span><br><span class="line">└───node_modules</span><br><span class="line">    └───jquery</span><br></pre></td></tr></table></figure><ol><li>首先，common.js在本级的node_modules中寻找，未找到，跳转到上一级目录</li><li>查找到了public目录， 查看此目录的node_modules中寻找，未找到，跳转上一级目录</li><li>来到了mgr目录， 未找到node_modules目录，继续向上寻找</li><li>来到了项目根目录下，在本级的node_modules中，寻找到了</li></ol><p>可以看出，他在寻找的时候，会依次向上寻找，直到根目录下</p></li></ul><hr><ul><li><p><strong>node不会去兄弟目录中查找</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">│   app.js</span><br><span class="line">│</span><br><span class="line">├───common</span><br><span class="line">│   │   common.js</span><br><span class="line">│   │</span><br><span class="line">│   └───node_modules</span><br><span class="line">│       └───bootstrap</span><br><span class="line">├───host</span><br><span class="line">│   └───node_modules</span><br><span class="line">│       └───jquery</span><br><span class="line">└───node_modules</span><br><span class="line">    └───express</span><br></pre></td></tr></table></figure><ol><li>common.js去本级node_modules目录下寻找，没有找到，返回上一级</li><li>来到了项目根目录，去本级目录下的node_modules目录下寻找,没有找到，寻找结束，未找到。</li><li><strong>注意，他不会钻到他的兄弟目录host中去寻找</strong>，他只能向上寻找，不能向下。</li></ol></li></ul><hr><h4 id="npm解决包冲突的问题"><a href="#npm解决包冲突的问题" class="headerlink" title="npm解决包冲突的问题"></a>npm解决包冲突的问题</h4><ul><li><p>有两个相同的项目依赖了同一个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├───a</span><br><span class="line">│   └───c_v1.0.0</span><br><span class="line">└───b</span><br><span class="line">    └───c_v2.0.0</span><br></pre></td></tr></table></figure><ul><li>a 依赖了1.0.0的c文件</li><li>b 依赖了2.0.0的c文件</li></ul></li></ul><hr><ul><li><p>版本不同的时候，他会分别在各自的包下建立node_modules文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">│   app.js</span><br><span class="line">│</span><br><span class="line">└───node_modules</span><br><span class="line">    ├───a</span><br><span class="line">    │   └───node_modules</span><br><span class="line">    │       └───c(v1.0.0)</span><br><span class="line">    ├───b</span><br><span class="line">    │   └───node_modules</span><br><span class="line">    │       └───c(v2.0.0)</span><br><span class="line">    ├───bootstrap</span><br><span class="line">    ├───c</span><br><span class="line">    └───jquery</span><br></pre></td></tr></table></figure><ul><li>a依赖了的c包（1.0.0） (实际上没有版本号，就叫c)</li><li>b依赖了的c包2.0.0 (实际上没有版本号，就叫c)</li><li>由于他查找包的机制，就会找到适合自己版本的</li></ul></li></ul><hr><ul><li><p>仅仅单个版本不同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">│   app.js</span><br><span class="line">│</span><br><span class="line">└───node_modules</span><br><span class="line">    ├───a</span><br><span class="line">    │   └───node_modules</span><br><span class="line">    │       └───c(v1.0.0)</span><br><span class="line">    ├───b</span><br><span class="line">    ├───d</span><br><span class="line">    ├───bootstrap</span><br><span class="line">    ├───c</span><br><span class="line">    └───jquery</span><br></pre></td></tr></table></figure><ul><li>a依赖了c包（1.0.0）</li><li>b也依赖的c包</li><li>d也依赖的c包</li><li>由于包查找机制，先从内层查找，依次向外翻，a会使用它特定版本的c,其他使用外部的c就好</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>node中文件操作路径问题</title>
      <link href="/2019/03/06/node%E4%B8%AD%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/03/06/node%E4%B8%AD%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="文件分隔符"><a href="#文件分隔符" class="headerlink" title="文件分隔符"></a>文件分隔符</h4><blockquote><p><code>/</code> 左-&gt; 正斜杠，<code>\</code> 右 -&gt; 反斜杠</p></blockquote><ul><li>在mac, linux, unix 使用 <code>/</code> 分隔符</li><li>在win 使用 <code>\</code> 作为分隔符， 由于<code>\</code>存在转义的效果，一般会使用<code>\\</code><ul><li>win中也可以使用<code>/</code></li></ul></li></ul><h4 id="介绍path相关"><a href="#介绍path相关" class="headerlink" title="介绍path相关"></a>介绍path相关</h4><ul><li>path.basename<ul><li>获取一个路径的文件名（默认包含拓展名）</li><li>path.basename(‘c:/a/b.js’)  -&gt; b.js</li><li>path.basename(‘c:/a/b.js’, ‘.js’)  -&gt; b</li></ul></li><li>path.dirname<ul><li>获取一个路径中的目录部分</li></ul></li><li>path.parse<ul><li>把一个路径转换为对象<ul><li>root 根目录</li><li>dir 目录</li><li>base 包含后缀名的文件名</li><li>ext后缀名</li><li>name 不包含后缀名的文件名</li></ul></li></ul></li><li>path.join<ul><li>需要进行路径拼接的时候推荐使用这个方法（极其智能）</li><li>path.join(‘c:/a/b’, ‘c’)  -&gt; c:/a/b/c</li><li>path.join(‘c:/a/b’, ‘/c’)  -&gt; c:/a/b/c</li><li>path.join(‘c:/a/b’, ‘./c’)  -&gt; c:/a/b/c</li><li>path.join(‘c:/a/b’, ‘../c’)  -&gt; c:/a/c</li></ul></li><li>path.isAbsolute<ul><li>判断是否是一个绝对路径</li><li>path.isAbsolute(‘c://a’)  -&gt; true</li><li>path.isAbsolute(‘/a’)  -&gt; true (/为根目录)</li></ul></li></ul><h4 id="dirname-与-filename"><a href="#dirname-与-filename" class="headerlink" title="__dirname 与 __filename"></a><code>__dirname</code> 与 <code>__filename</code></h4><blockquote><p>均是动态的获取, 他们是比较特殊的成员</p></blockquote><ul><li><code>__dirname</code> 文件所属<strong>目录</strong>的绝对路径 c://a/b</li><li><code>__filename</code> 所属<strong>文件</strong>的绝对路径 c://a/b/c.js</li></ul><h4 id="fs模块中的相对路径"><a href="#fs模块中的相对路径" class="headerlink" title="fs模块中的相对路径"></a>fs模块中的相对路径</h4><blockquote><p>fs.readFile(‘./a.txt’, fn)</p></blockquote><ul><li>其中的路径’./a.txt’ 并不是文件所在目录为寻找</li><li>是以终端，即node运行文件时目录<ul><li>c://a/b&gt; node a.js</li><li>c://a/&gt; b/node a.js</li></ul></li><li>虽然他们 看似相同，由于node运行目录不相同，fs.readFile时寻找不一样<ul><li>c://a/b/a.txt</li><li>c://a/a.txt</li></ul></li><li>这是专门的一种设计，并不是一种bug,所以建议修改目录为<ul><li><code>fs.readFile(path.join(__dirname, &#39;./a.txt&#39;), fn)</code><ul><li>这样每次都是动态获取的，所以不会造成目录问题</li><li>注意引入<code>path</code>模块，一般，<strong><code>fs</code>,<code>path</code>都是成对引入</strong></li></ul></li></ul></li></ul><h4 id="require中的相对路径"><a href="#require中的相对路径" class="headerlink" title="require中的相对路径"></a>require中的相对路径</h4><ul><li><strong>在<code>require</code>中，不存在上述问题，还是引入即可， require(‘./a’)</strong><ul><li>省略模块后缀.js</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>node中连接数据库</title>
      <link href="/2019/03/05/node%E4%B8%AD%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/03/05/node%E4%B8%AD%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="mongodb数据库，基于第三方库-mongoose-高度封装了mongodb官方文件"><a href="#mongodb数据库，基于第三方库-mongoose-高度封装了mongodb官方文件" class="headerlink" title="mongodb数据库，基于第三方库 mongoose(高度封装了mongodb官方文件)"></a>mongodb数据库，基于第三方库 mongoose(高度封装了mongodb官方文件)</h2><h4 id="引入mongoose"><a href="#引入mongoose" class="headerlink" title="引入mongoose"></a>引入mongoose</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema</span><br></pre></td></tr></table></figure><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/test'</span>)</span><br></pre></td></tr></table></figure><h4 id="设计文档结构（表结构）"><a href="#设计文档结构（表结构）" class="headerlink" title="设计文档结构（表结构）"></a>设计文档结构（表结构）</h4><p>段名称就是表结构中的属性名称, 约束的目的是为了保证数据的完整性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userSchame = <span class="keyword">new</span> Schame(&#123;</span><br><span class="line">  username: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    required: <span class="literal">true</span> <span class="comment">// 必须有</span></span><br><span class="line">  &#125;,</span><br><span class="line">  password: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    required: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  email: &#123;</span><br><span class="line">    type: <span class="built_in">String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="将文档发布为模型"><a href="#将文档发布为模型" class="headerlink" title="将文档发布为模型"></a>将文档发布为模型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> User = mongoose.model(<span class="string">'User'</span>, userSchame)</span><br></pre></td></tr></table></figure><h4 id="使用文档模型"><a href="#使用文档模型" class="headerlink" title="使用文档模型"></a>使用文档模型</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// **********************</span></span><br><span class="line"><span class="comment">// /新增数据</span></span><br><span class="line"><span class="comment">// **********************</span></span><br><span class="line"><span class="keyword">var</span> admin = <span class="keyword">new</span> User(&#123;</span><br><span class="line">  username: <span class="string">'zs'</span>,</span><br><span class="line">  password: <span class="string">'123456'</span>,</span><br><span class="line">  email: <span class="string">'admin@admin.com'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">admin.save(<span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'保存失败'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'保存成功'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// **********************</span></span><br><span class="line"><span class="comment">//  /新增数据</span></span><br><span class="line"><span class="comment">// **********************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// **********************</span></span><br><span class="line"><span class="comment">// /查询数据</span></span><br><span class="line"><span class="comment">// **********************</span></span><br><span class="line">User.find(<span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">User.find(&#123;</span><br><span class="line">  username: <span class="string">'zs'</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">User.findOne(&#123;</span><br><span class="line">  username: <span class="string">'zs'</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// **********************</span></span><br><span class="line"><span class="comment">//  /查询数据</span></span><br><span class="line"><span class="comment">// **********************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// **********************</span></span><br><span class="line"><span class="comment">// /删除数据</span></span><br><span class="line"><span class="comment">// **********************</span></span><br><span class="line">User.remove(&#123;</span><br><span class="line">  username: <span class="string">'zs'</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'删除失败'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'删除成功'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(ret)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// **********************</span></span><br><span class="line"><span class="comment">//  /删除数据</span></span><br><span class="line"><span class="comment">// **********************</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// **********************</span></span><br><span class="line"><span class="comment">// /更新数据 </span></span><br><span class="line"><span class="comment">// **********************</span></span><br><span class="line"><span class="comment">// 注意，mongodb中的_id是一个较为特殊的值, 可以查询使用，避免对象中出现_id这种属性</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">User.findByIdAndUpdate(<span class="string">'5a001b23d219eb00c8581184'</span>, &#123;</span><br><span class="line">  password: <span class="string">'123'</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, ret</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'更新失败'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'更新成功'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//  // 更新密码123 -&gt; 456</span></span><br><span class="line">User.update(&#123; <span class="attr">password</span>: <span class="string">'123'</span> &#125;, &#123; <span class="attr">password</span>: <span class="string">'456'</span> &#125;, fn);</span><br><span class="line"><span class="comment">//  // 更新密码123 -&gt; 456 多个文件</span></span><br><span class="line">User.update(&#123; <span class="attr">password</span>: <span class="string">'123'</span> &#125;, &#123; <span class="attr">password</span>: <span class="string">'456'</span> &#125;, &#123; <span class="attr">multi</span>: <span class="literal">true</span> &#125;, fn);</span><br><span class="line"><span class="comment">// **********************</span></span><br><span class="line"><span class="comment">//  /更新数据</span></span><br><span class="line"><span class="comment">// **********************</span></span><br></pre></td></tr></table></figure><h2 id="mysql数据库，第三方库"><a href="#mysql数据库，第三方库" class="headerlink" title="mysql数据库，第三方库"></a>mysql数据库，第三方库</h2><h4 id="引入数据库"><a href="#引入数据库" class="headerlink" title="引入数据库"></a>引入数据库</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br></pre></td></tr></table></figure><h4 id="配置连接对象"><a href="#配置连接对象" class="headerlink" title="配置连接对象"></a>配置连接对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host     : <span class="string">'localhost'</span>,</span><br><span class="line">  user     : <span class="string">'user'</span>,</span><br><span class="line">  password : <span class="string">'password'</span>,</span><br><span class="line">  database : <span class="string">'my_db'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="连接数据库-1"><a href="#连接数据库-1" class="headerlink" title="连接数据库"></a>连接数据库</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启连接</span></span><br><span class="line">connection.connect()</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断开连接</span></span><br><span class="line">connection.end()</span><br></pre></td></tr></table></figure><h4 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h4><ul><li>均使用connection.query</li><li>根据不同的需要传入不同的SQL语句就可以</li><li>回调函数中的参数<ul><li>error 显示错误信息</li><li>results 查询的结果</li><li>fields 改变的行的数量</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line">connection.query(<span class="string">'SELECT 1 + 1 AS solution'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The solution is: '</span>, results[<span class="number">0</span>].solution);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于javascript中的分号的问题</title>
      <link href="/2019/03/02/%E5%85%B3%E4%BA%8Ejavascript%E4%B8%AD%E7%9A%84%E5%88%86%E5%8F%B7%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/03/02/%E5%85%B3%E4%BA%8Ejavascript%E4%B8%AD%E7%9A%84%E5%88%86%E5%8F%B7%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在开发中，有的编码规范可以对分号没有要求，可以省去分号<code>;</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'nn'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>但是在一下情况中，绝对不能省略</strong></p><p><code>[</code>,<code>(</code>,<code>&#39;（此处代表反引号）</code>因为可能导致，编译错误，所以这样加上一句冒号，就能避免这样的错误。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> foo = <span class="string">'bar'</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">;<span class="string">`hello`</span>.toString()</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端适配方案总结</title>
      <link href="/2019/02/20/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/"/>
      <url>/2019/02/20/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>对于移动端设备，通常就是解决不同设备的显示问题，总结常见布局的优缺点</p><ul><li>流式布局</li><li>响应式布局</li><li>rem适配</li></ul><p>在移动端的设备，需要进行视口的设置(类似于 浏览器-包含一个视口-包含我们看到的页面dom)，要最先解读到css属性所以一般放在头部<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, user-scalable=0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol><li>其中width,视口的宽度自动跟随设备调整，</li><li>inital-scale是初始化缩放级别，用户看到的和在pc端的是1:1的关系，（不会因为整体缩小，而导致字体过小无法看到）</li><li>user-scalable是用户是否可以自动缩放 1 yes  或者 0 no</li></ol><h4 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h4><hr><p>流式布局的原理就是利用<code>width:100%</code>已达到解决响应式的问题，在这种设计基础上，一定要注意</p><ul><li>使用边框盒子（防止溢出）<code>box-sizing: border-box</code></li><li>宽度尽量使用<code>width: 100%</code></li></ul><p>比较简单，使用浏览器自适应宽度，达到自适应的效果，要注意由于使用border-box所以在设置的时候，要尽量设置爱元素的padding,防止元素溢出</p><ul><li>双飞翼布局</li><li>两栏布局</li></ul><p>有一款插件，是为了解决局部元素的滑动，可以使用iscroll.js,当其元素有超出的长度的时候，可以在局部进行滑动，<a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener">iscroll,局部刷新</a></p><h4 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h4><hr><p>响应式布局主要通过<strong>媒体查询</strong>来判断当前容器的宽度之类，在执行相应的css代码</p><ul><li>css媒体查询 <code>@media screen and (max-width: 768px)</code> <em>最大宽度为768px时执行的代码</em></li></ul><p>css代码<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.contain</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">1000px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line"><span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">768px</span>) and (min-width: <span class="number">320px</span>)&#123;</span><br><span class="line"><span class="selector-class">.contain</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">992px</span>) and (min-width: <span class="number">768px</span>)&#123;</span><br><span class="line"><span class="selector-class">.contain</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">750px</span>;</span><br><span class="line"><span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">1200px</span>) and (min-width: <span class="number">992px</span>)&#123;</span><br><span class="line"><span class="selector-class">.contain</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">970px</span>;</span><br><span class="line"><span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">1200px</span>)&#123;</span><br><span class="line"><span class="selector-class">.contain</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line"><span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>html代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">媒体查询</span></span><br><span class="line"><span class="comment">使用css关键字 @media screen and (&lt;这里接条件&gt;)</span></span><br><span class="line"><span class="comment">通过查询不同的屏幕尺寸 做不同的相应（css 优先级）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">需求</span></span><br><span class="line"><span class="comment">超小屏幕 768px宽度100%背景色   蓝色</span></span><br><span class="line"><span class="comment">小屏设备768px-992px宽度750px背景色绿色</span></span><br><span class="line"><span class="comment">中屏设备992px-1200px宽度970px背景色红色</span></span><br><span class="line"><span class="comment">大屏设备1200px宽度1170px背景色黄色</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">宽度要小于最小界限 保证显示不出现滚动条</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"contain"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最终的效果为</p><ul><li>大屏设备    1200px        宽度1170px    背景色    黄色<br><img src="/img/2019/02/13/1.png" alt="大屏设备"></li><li>中屏设备992px-1200px    宽度970px    背景色    红色<br><img src="/img/2019/02/13/2.png" alt="中屏设备"></li><li>小屏设备768px-992px    宽度750px    背景色    绿色<br><img src="/img/2019/02/13/3.png" alt="小屏设备"></li><li>超小屏幕 768px        宽度100%        背景色   蓝色<br><img src="/img/2019/02/13/4.png" alt="超小屏幕"></li></ul><p>其中著名的框架有<strong><a href="https://v3.bootcss.com" target="_blank" rel="noopener">bootstrap</a></strong></p><h4 id="rem适配"><a href="#rem适配" class="headerlink" title="rem适配"></a>rem适配</h4><hr><p>rem适配主要通过:html中的style中font-size从而判断出整体的页面布局样式大小，从而达到自适应。<br><strong>也就是在html头部统一定义了基准大小，所有尺寸按照基准大小设置，如果更改了设备，只需要动态更改基准大小，从而就能达到整个页面的自适应效果</strong></p><blockquote><p>em是以父元素为基准，rem是以根元素root(<em>也就是<code>&lt;html&gt;&lt;/html&gt;</code></em>),</p></blockquote><p>这里有一个换算， 当前基准尺寸 = （当前设备宽度/设计稿设备宽度）* 设计稿基准尺寸</p><ul><li>使用不同屏幕下的基准值 动态的去设置html中的font-size这个基准值</li></ul><p><em>假设当前设计稿 width:750px  font-size:100px</em><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 动态设配基准值的css</span><br><span class="line">@<span class="keyword">meadia</span> (min-width: <span class="number">750px</span>)&#123;</span><br><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">font-size:100px;//(750/750)*100</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">meadia</span> (min-width: <span class="number">640px</span>)&#123;</span><br><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">font-size:85.33333px;//(640/750)*100</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">meadia</span> (min-width: <span class="number">414px</span>)&#123;</span><br><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">font-size:55.2px;//(414/750)*100</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">meadia</span> (min-width: <span class="number">320px</span>)&#123;</span><br><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">font-size:42.7px;//(320/750)*100</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 样式的css代码</span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">font-size: 0.2rem;// 设计稿中是20px 基准值是100px 相对为 20/100 rem, </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">width: 100%;// 设计稿中是100%的宽度</span><br><span class="line">height: 0.5rem;// 设计稿中是50px 基准值是100px 相对为 50/100 rem</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 如果是到了其他设备 比如414px的设备  则在原有代码的情况下</span></span><br><span class="line"><span class="comment">* 之前的设计稿 0.2rem = 0.2 * 100 = 20px</span></span><br><span class="line"><span class="comment">* 就会变为0.2rem = 0.2 * 55.2 = 11.4px</span></span><br><span class="line"><span class="comment">* 也就达到了适配的目的,等比例缩放的效果。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><ul><li>在这里使用less编写，可以达到自动计算所有的适配屏的css代码的编写</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">"UTF-8"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*variable.less*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配设备的集合</span></span><br><span class="line"><span class="variable">@adapterDeviceList:</span><span class="number">750px</span>,<span class="number">720px</span>,<span class="number">640px</span>,<span class="number">540px</span>,<span class="number">480px</span>,<span class="number">424px</span>,<span class="number">414px</span>,<span class="number">400px</span>,<span class="number">384px</span>,<span class="number">375px</span>,<span class="number">360px</span>,<span class="number">320px</span>;</span><br><span class="line"><span class="comment">// 设计稿尺寸</span></span><br><span class="line"><span class="variable">@psdWidth:</span><span class="number">750px</span>;</span><br><span class="line"><span class="comment">// 预设基准值</span></span><br><span class="line"><span class="variable">@baseFontSize:</span><span class="number">100px</span>;</span><br><span class="line"><span class="comment">// 主流设备的个数</span></span><br><span class="line"><span class="variable">@len:</span>length(<span class="variable">@adapterDeviceList</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*adapter.less*/</span></span><br><span class="line"><span class="comment">// 1.适配不同宽度的基准，利用递归函数实现循环 </span></span><br><span class="line"><span class="comment">// 2.由于这里是min-width，考虑到css从上到下读取，应该使用min-width:320,414,640,750这种顺序</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.adapterMixin</span>(<span class="variable">@index</span>) <span class="keyword">when</span>(<span class="variable">@index</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">@media</span> (<span class="attribute">min-width</span>: extract(<span class="variable">@adapterDeviceList</span>, <span class="variable">@index</span>))&#123;</span><br><span class="line">        <span class="selector-tag">html</span>&#123;</span><br><span class="line">            <span class="attribute">font-size</span>: extract(<span class="variable">@adapterDeviceList</span>, <span class="variable">@index</span>) / <span class="variable">@psdWidth</span> * <span class="variable">@baseFontSize</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.adapterMixin</span>(<span class="variable">@index</span> - <span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的使用</span></span><br><span class="line"><span class="selector-class">.adapterMixin</span>(<span class="variable">@len</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*样式的less代码，由于less有计算功能，就比较方便*/</span></span><br><span class="line"><span class="comment">//@baseFontSize; 为之前定义过的基准font-size</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20rem</span>/<span class="variable">@baseFontSize</span>;<span class="comment">//设计稿是20px  直接就是20 rem / 100 = 0.2rem</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;<span class="comment">// 设计稿中是100%的宽度</span></span><br><span class="line"><span class="attribute">height</span>: <span class="number">50rem</span>/<span class="variable">@baseFontSize</span>;<span class="comment">// 设计稿是50px  直接就是50 rem / 100 = 0.5rem</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了less后，可以动态的生成适配代码，并且以后的维护也比较方便,也不用去计算那些适配值，只需要带入即可</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><hr><p>无论是<strong>流式布局</strong>，<strong>响应式布局</strong>，<strong>rem布局</strong>，其实之间都用到了很多相似的地方，很多地方，都有width:100%等。并且在rem布局中很多地方也用到了width:100%，所以并不只是单一的技术实现，是多种技术共同作用，达到移动端适配的目的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS模块化（四）ES6的应用（目前使用较广，较火）</title>
      <link href="/2019/02/05/JS%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%88%E5%9B%9B%EF%BC%89ES6%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88%E7%9B%AE%E5%89%8D%E4%BD%BF%E7%94%A8%E8%BE%83%E5%B9%BF%EF%BC%8C%E8%BE%83%E7%81%AB%EF%BC%89/"/>
      <url>/2019/02/05/JS%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%88%E5%9B%9B%EF%BC%89ES6%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%88%E7%9B%AE%E5%89%8D%E4%BD%BF%E7%94%A8%E8%BE%83%E5%B9%BF%EF%BC%8C%E8%BE%83%E7%81%AB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ES6模块化需要编译打包处理，由于目前部分浏览器不支持es6，需要先转换es5</p></blockquote><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ul><li>暴露出去 <code>export</code></li><li>应用进来 <code>import</code></li><li>使用方式<ol><li>先用babel转化es5</li><li>使用browserify编译转换</li></ol></li><li>需要提前安装一些库<br><code>npm install babel-cli browserify -g</code><br><code>npm install babel-preset-es2015 --save-dev</code></li></ul><h4 id="自定义依赖"><a href="#自定义依赖" class="headerlink" title="自定义依赖"></a>自定义依赖</h4><ul><li><p>文件结构 （列举了主要部分）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">│  .babelrc</span><br><span class="line">│  package-lock.json</span><br><span class="line">│  package.json</span><br><span class="line">│</span><br><span class="line">├─js</span><br><span class="line">│  ├─dist</span><br><span class="line">│  └─src</span><br><span class="line">│          main.js</span><br><span class="line">│          modules1.js</span><br><span class="line">│          modules2.js</span><br><span class="line">│          modules3.js</span><br></pre></td></tr></table></figure></li><li><p>.babelrc (babel run controller)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"presets"</span>:[<span class="string">"es2015"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>各个模块文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">modules1.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露模块  分别暴漏</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"foo() module1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"bar() module1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">modules2.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露模块 统一暴露</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"fun1() module2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"fun2() module2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;fun1, fun2&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">modules3.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认暴露 export default </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">msg:<span class="string">"默认暴露"</span>,</span><br><span class="line">foo()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"foo() modules3"</span>,<span class="keyword">this</span>.msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主文件 main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入其他模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法 import xxx from '路径'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一暴露方式  统一暴露方式 是要什么取什么</span></span><br><span class="line"><span class="keyword">import</span> &#123;foo, bar, arr&#125; <span class="keyword">from</span> <span class="string">'./modules1'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;fun1, fun2&#125; <span class="keyword">from</span> <span class="string">'./modules1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认暴露</span></span><br><span class="line"><span class="keyword">import</span> modules3 <span class="keyword">from</span> <span class="string">'./modules3'</span>;</span><br><span class="line"></span><br><span class="line">foo();<span class="comment">// foo() module1</span></span><br><span class="line">bar();<span class="comment">// bar() module1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line">fun1();<span class="comment">// fun1() module2</span></span><br><span class="line">fun2();<span class="comment">// fun2() module2 </span></span><br><span class="line"></span><br><span class="line">modules3.foo();<span class="comment">// foo() modules3 默认暴露</span></span><br></pre></td></tr></table></figure></li><li><p>编译打包 </p><ol><li>babel命令 es6-es5 <code>babel js/src -d js/lib</code></li><li>使用browserift命令 <code>browserify js/src/main.js -o js/dist/bundle.js</code></li></ol></li><li><p>将最终的bundle放入index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"04-ES6/js/dist/bundle.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>这种方式需要<strong>首先使用babel将es6-es5,在使用browserify进行编译打包</strong>，每一次改变都需要这样，相对较为繁琐（所以就有了后面的自动打包工具） </p><h4 id="使用第三方依赖"><a href="#使用第三方依赖" class="headerlink" title="使用第三方依赖"></a>使用第三方依赖</h4><ul><li><p>在npm安装依赖 （jquery为例 <code>npm install jquery@1.12.4</code>）</p></li><li><p>在主文件中引入即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">"jquery"</span>;</span><br><span class="line"></span><br><span class="line">$(<span class="string">"body"</span>).css(<span class="string">"background"</span>,<span class="string">"yellowgreen"</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用<code>babel</code>与<code>browserify</code>分别进行编译 打包</p></li><li><p>最后html代码还是 放入browserify最终生成的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"04-ES6/js/dist/bundle.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>使用ES6的这种方式 相对来时 是比较简单的，而且命令也相对好记  <code>export</code>与<code>import</code>这种方式也是使用最为广泛，目前比较好的一种方式，唯一不好的就是需要每一次都编译打包，后来诞生出一些自动化工具。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS模块化（三）AMD(Asynchronous Module Definition)的应用</title>
      <link href="/2019/02/05/JS%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89AMD(Asynchronous%20Module%20Definition)%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2019/02/05/JS%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89AMD(Asynchronous%20Module%20Definition)%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ul><li><p>暴露出去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义没有依赖的模块</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> 模块</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义有依赖的模块</span></span><br><span class="line">define([<span class="string">'module1'</span>,<span class="string">'module2'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">m1,m2</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> 模块</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>应用进来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">requirejs([<span class="string">'module1'</span>,<span class="string">'module2'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">m1,m2</span>)</span>&#123;</span><br><span class="line">使用m1,m2即可</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="自定义依赖的引用"><a href="#自定义依赖的引用" class="headerlink" title="自定义依赖的引用"></a>自定义依赖的引用</h4><ul><li><p>文件的结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">└─js</span><br><span class="line">    │  main.js</span><br><span class="line">    │</span><br><span class="line">    ├─libs</span><br><span class="line">    │      require.js</span><br><span class="line">    │</span><br><span class="line">    └─modules</span><br><span class="line">            alerter.js</span><br><span class="line">            dataService.js</span><br><span class="line">│</span><br><span class="line">│  index.html</span><br></pre></td></tr></table></figure></li><li><p>modules 的文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">dataService.js</span><br><span class="line"></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"dataService.js"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外暴露模块</span></span><br><span class="line"><span class="keyword">return</span> &#123;getName&#125;;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alerter.js</span><br><span class="line"></span><br><span class="line">define([<span class="string">'dataService'</span>],<span class="function"><span class="keyword">function</span> (<span class="params">dataService</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">"alerter.js"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(msg, dataService.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外暴露模块</span></span><br><span class="line"><span class="keyword">return</span> &#123;showMsg&#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>主文件main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 配置requirejs</span></span><br><span class="line">requirejs.config(&#123;</span><br><span class="line">baseUrl: <span class="string">"js/"</span>,</span><br><span class="line">paths: &#123;</span><br><span class="line">dataService: <span class="string">'./modules/dataService'</span>,</span><br><span class="line">alerter: <span class="string">'./modules/alerter'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入依赖</span></span><br><span class="line">requirejs([<span class="string">'alerter'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">alerter</span>) </span>&#123;</span><br><span class="line">alerter.showMsg();<span class="comment">// alerter.js dataService.js</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li><li><p>html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"js/main.js"</span> <span class="attr">src</span>=<span class="string">"js/libs/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>这种方式需要做requirejs的配置，之后再引入js文件的时候，<strong>注意src是requre.js 而data-main才是我们的main.js</strong>,这种方式是针对客户端较早出现的一种方式</p><h4 id="引入第三方的依赖-（引入jQuery为例）"><a href="#引入第三方的依赖-（引入jQuery为例）" class="headerlink" title="引入第三方的依赖 （引入jQuery为例）"></a>引入第三方的依赖 （引入jQuery为例）</h4><ul><li><p>放入相关的js，文件结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">│  index.html</span><br><span class="line">│</span><br><span class="line">└─js</span><br><span class="line">    │  main.js</span><br><span class="line">    │</span><br><span class="line">    ├─libs</span><br><span class="line">    │      jquery-1.11.0.js</span><br><span class="line">    │      require.js</span><br><span class="line">    │</span><br><span class="line">    └─modules</span><br><span class="line">            alerter.js</span><br><span class="line">            dataService.js</span><br></pre></td></tr></table></figure></li><li><p>其余和之前相同，就是引入第三方库即可，main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 配置requirejs</span></span><br><span class="line">requirejs.config(&#123;</span><br><span class="line">baseUrl: <span class="string">"js/"</span>,</span><br><span class="line">paths: &#123;</span><br><span class="line">dataService: <span class="string">'./modules/dataService'</span>,</span><br><span class="line">alerter: <span class="string">'./modules/alerter'</span>,</span><br><span class="line">jquery: <span class="string">'./libs/jquery-1.11.0'</span><span class="comment">// jQuery源码中 遵循了AMD规范 并且暴露模块为jquery</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入依赖</span></span><br><span class="line">requirejs([<span class="string">'alerter'</span>,<span class="string">"jquery"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">alerter,$</span>) </span>&#123;</span><br><span class="line">alerter.showMsg();</span><br><span class="line">$(<span class="string">"body"</span>).css(<span class="string">"background"</span>,<span class="string">"deeppink"</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li><li><p>html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"js/main.js"</span> <span class="attr">src</span>=<span class="string">"js/libs/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>都是在内部引入的，所以发请求只需要一个请求就可以搞定，只需要配置好模块路径即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS模块化（二）CommonJS的应用</title>
      <link href="/2019/02/05/JS%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89CommonJS%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2019/02/05/JS%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89CommonJS%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ul><li>暴露出去 <code>module.exports = value</code>或者是<code>exports.xxx = value</code></li><li>引入进来 <code>let xxx = require(&quot;./modules/xxx&quot;);</code></li></ul><p>补充：因为exports是 module.exports的一个引用，也就相当于在代码中，还有</p><p><code>var exports = module.exports</code>,所以他们俩是等价的，但是要注意一点，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可理解为 var exports = module.exports 系统自动做的</span></span><br><span class="line"><span class="comment">// 导出的时候 是 return module.exports</span></span><br><span class="line"></span><br><span class="line">exports.foo = bar<span class="comment">// module.exports.foo = bar</span></span><br><span class="line">exports = &#123;&#125; <span class="comment">// 这里改变了exports的指向，</span></span><br><span class="line"><span class="comment">// 指向了一个新的对象后，而不是module.export</span></span><br><span class="line">exports.age = <span class="number">16</span><span class="comment">// 所以在导出的时候，不会有这个age</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也就是相当于exports如果改变了指向，</span></span><br><span class="line"><span class="comment">// 那么以后添加的方法则不会暴露出去，（改变指向后，无法修改到原对象了）</span></span><br></pre></td></tr></table></figure><h4 id="CommonJS-node-服务端"><a href="#CommonJS-node-服务端" class="headerlink" title="CommonJS-node(服务端)"></a>CommonJS-node(服务端)</h4><ul><li><p>首先部署出文件的结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├─modules</span><br><span class="line">│      modules1.js</span><br><span class="line">│      modules2.js</span><br><span class="line">│      modules3.js</span><br><span class="line">│</span><br><span class="line">│  app.js</span><br><span class="line">│  package-lock.json</span><br><span class="line">│  package.json</span><br></pre></td></tr></table></figure></li><li><p>modules的文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">module1.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用module.exports = value</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">msg:<span class="string">"module1"</span>,</span><br><span class="line">foo()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"foo() "</span> + <span class="keyword">this</span>.msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module2.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用module.exports = value</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>  (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"foo() module2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module3.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用exports.xxx = value</span></span><br><span class="line">exports.foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"foo() module3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"bar() module3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露一个数组出去</span></span><br><span class="line">exports.arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>];</span><br></pre></td></tr></table></figure></li><li><p>app.js主配置文件 使用node app.js运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">app.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提前引入第三方库</span></span><br><span class="line"><span class="comment">// 引入uniq</span></span><br><span class="line"><span class="keyword">let</span> uniq = <span class="built_in">require</span>(<span class="string">"uniq"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将其他模块汇总到主模块</span></span><br><span class="line"><span class="keyword">let</span> module1 = <span class="built_in">require</span>(<span class="string">"./modules/modules1"</span>);</span><br><span class="line"><span class="keyword">let</span> module2 = <span class="built_in">require</span>(<span class="string">"./modules/modules2"</span>);</span><br><span class="line"><span class="keyword">let</span> module3 = <span class="built_in">require</span>(<span class="string">"./modules/modules3"</span>);</span><br><span class="line"></span><br><span class="line">module1.foo();<span class="comment">// foo() module1</span></span><br><span class="line">module2();<span class="comment">// foo() module2</span></span><br><span class="line"></span><br><span class="line">module3.foo();<span class="comment">// foo() module3</span></span><br><span class="line">module3.bar();<span class="comment">// bar() module3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(module3.arr);<span class="comment">// [ 1, 2, 3, 4, 5, 2, 3, 1, 2, 4 ]</span></span><br><span class="line"><span class="keyword">let</span> result = uniq(module3.arr);</span><br><span class="line"><span class="built_in">console</span>.log(module3.arr);<span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure></li></ul><p>在服务端运行的时候 语法相对简单，要注意第三方库要放在最开始的地方，因入库写名字就可以</p><h4 id="CommonJS-Browserify-客户端"><a href="#CommonJS-Browserify-客户端" class="headerlink" title="CommonJS-Browserify(客户端)"></a>CommonJS-Browserify(客户端)</h4><ul><li><p>首先部署出文件的结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├─js</span><br><span class="line">│  ├─dist</span><br><span class="line">│  └─src</span><br><span class="line">│          app.js</span><br><span class="line">│          modules1.js</span><br><span class="line">│          modules2.js</span><br><span class="line">│          modules3.js</span><br><span class="line">│</span><br><span class="line">│  package-lock.json</span><br><span class="line">│  package.json</span><br></pre></td></tr></table></figure></li><li><p>modules的文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">module1.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用module.exports = value</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">msg:<span class="string">"module1"</span>,</span><br><span class="line">foo()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"foo() "</span> + <span class="keyword">this</span>.msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module2.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用module.exports = value</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>  (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"foo() module2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module3.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用exports.xxx = value</span></span><br><span class="line">exports.foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"foo() module3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"bar() module3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露一个数组出去</span></span><br><span class="line">exports.arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>];</span><br></pre></td></tr></table></figure></li><li><p>app.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提前引入第三方库</span></span><br><span class="line"><span class="comment">// 引入uniq</span></span><br><span class="line"><span class="keyword">let</span> uniq = <span class="built_in">require</span>(<span class="string">"uniq"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将其他模块汇总到主模块</span></span><br><span class="line"><span class="keyword">let</span> module1 = <span class="built_in">require</span>(<span class="string">"./modules/modules1"</span>);</span><br><span class="line"><span class="keyword">let</span> module2 = <span class="built_in">require</span>(<span class="string">"./modules/modules2"</span>);</span><br><span class="line"><span class="keyword">let</span> module3 = <span class="built_in">require</span>(<span class="string">"./modules/modules3"</span>);</span><br><span class="line"></span><br><span class="line">module1.foo();</span><br><span class="line">module2();</span><br><span class="line"></span><br><span class="line">module3.foo();</span><br><span class="line">module3.bar();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(module3.arr);</span><br><span class="line"><span class="keyword">let</span> result = uniq(module3.arr);</span><br><span class="line"><span class="built_in">console</span>.log(module3.arr);</span><br></pre></td></tr></table></figure></li><li><p>打包处理js<br><code>browserify js/src/app.js -o js/dist/bundle.js</code></p></li><li><p>在 页面引入 （运行结果与之前相同）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/dist/bundle.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>在客户端运行的时候，要放到<strong>dist</strong>生成环境的文件夹，要进行打包处理才能变成浏览器识别的文件 </p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS模块化（一）</title>
      <link href="/2019/02/05/JS%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/02/05/JS%E6%A8%A1%E5%9D%97%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="js发展历史"><a href="#js发展历史" class="headerlink" title="js发展历史"></a>js发展历史</h4><ul><li>全局function的方式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.js</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"foo()  "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"bar()  "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"module.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式虽然带来了简便方式，但是一定程度上造成了命名冲突的问题，并且在后期难以维护，是一个比较严重的问题，污染全局变量</p><ul><li>采用namespace的方式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">msg : <span class="string">"module"</span>,</span><br><span class="line">foo()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"foo()"</span> + <span class="keyword">this</span>.msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"module.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">obj.foo();<span class="comment">// foo()module</span></span></span><br><span class="line"><span class="javascript">obj.msg = <span class="string">"namespace"</span>;</span></span><br><span class="line"><span class="javascript">obj.foo();<span class="comment">// foo()namespace</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式虽然解决了命名冲突的问题，但是不安全，由于使用对象进行封装，所以仍然可以修改对象中的内容</p><ul><li>采用IIFE的方式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用闭包的方式 IIFE</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">"module"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"foo() "</span> + msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 暴露出去对象</span></span><br><span class="line"><span class="built_in">window</span>.obj = &#123;foo&#125;;</span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"module.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">msg = <span class="string">"IIFE"</span>;<span class="comment">// 此时为隐式全局变量</span></span></span><br><span class="line"><span class="javascript">obj.foo();<span class="comment">// foo() module</span></span></span><br><span class="line"><span class="javascript">obj.msg = <span class="string">"IIFE"</span>;<span class="comment">// 由于存在了闭包，修改的并不是那一个数据</span></span></span><br><span class="line"><span class="javascript">obj.foo();<span class="comment">// foo() module</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式通过全局变量传递出去模块名称，而且采用了<strong>立即执行函数</strong>相对数据较安全，也是比较好的一种模块定义方式</p><ul><li>采用IIFE-引入依赖的方式<ul><li>这种方式是IIFE的增强模式，由IIFE发展而来，也是今后的js模块化的一种标准<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.js</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window,$</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">"module"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"foo() "</span> + msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.obj = &#123;foo&#125;;</span><br><span class="line"><span class="comment">// 此时引入第三方库的方法</span></span><br><span class="line">$(<span class="string">"body"</span>).css(<span class="string">"background"</span>,<span class="string">"deeppink"</span>);</span><br><span class="line">&#125;)(<span class="built_in">window</span>,jQuery)</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery-1.11.0.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"module.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">obj.foo();<span class="comment">// foo() module</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是在IIFE上发展而来的一种方式，引入了第三方的依赖，但是由于有依赖关系，一定要注意引入的顺序，由于<strong>module.js引入了jquery,所以jquery要先被解析</strong></p><ul><li>传统的相互依赖演示</li></ul><ul><li><p>文件的结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└─js</span><br><span class="line">        alerter.js</span><br><span class="line">        dataService.js</span><br><span class="line">│</span><br><span class="line">│  app.js</span><br><span class="line">│  index.html</span><br></pre></td></tr></table></figure></li><li><p>module的文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">dataService.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个没有依赖的模块</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"dataService.js"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 暴露出去</span></span><br><span class="line"><span class="built_in">window</span>.dataService = &#123;getName&#125;;</span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alerter.js</span><br><span class="line"><span class="comment">// 定义一个有依赖的模块</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">window,dataService</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">"alerter.js"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMsg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(msg, dataService.getName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 暴露出去</span></span><br><span class="line"><span class="built_in">window</span>.alerter = &#123;showMsg&#125;;</span><br><span class="line">&#125;)(<span class="built_in">window</span>,dataService)</span><br></pre></td></tr></table></figure></li><li><p>app.js的主文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接调用alerter.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">alerter</span>) </span>&#123;</span><br><span class="line">alerter.showMsg();<span class="comment">// alerter.js dataService.js</span></span><br><span class="line">&#125;)(alerter)</span><br></pre></td></tr></table></figure></li><li><p>html文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/dataService.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/alerter.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"app.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>由于他们之间产生了依赖关系 所以一定要弄清楚之间的关系，引入顺序很重要</p><h4 id="在这些传统的方式上产生了一些引入js的标准"><a href="#在这些传统的方式上产生了一些引入js的标准" class="headerlink" title="在这些传统的方式上产生了一些引入js的标准"></a>在这些传统的方式上产生了一些引入js的标准</h4><ul><li>CommonJS</li><li>AMD</li><li>CMD(目前使用不广泛)</li><li>ES6<br>接下来会分别介绍 <code>CommonJS</code>,<code>AMD</code>，<code>ES6</code>引入依赖的方式</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019-祝自己</title>
      <link href="/2019/02/05/2019-%E7%A5%9D%E8%87%AA%E5%B7%B1/"/>
      <url>/2019/02/05/2019-%E7%A5%9D%E8%87%AA%E5%B7%B1/</url>
      
        <content type="html"><![CDATA[<h4 id="关于新年"><a href="#关于新年" class="headerlink" title="关于新年"></a>关于新年</h4><p>做自己守护者，<br>愿自己，<br>身体健康。<br><img src="/img/2019/02/05/1.jpg" alt="新年快乐">(图源：包图网)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>h5语义化标签及其兼容性解决</title>
      <link href="/2019/01/26/h5%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE%E5%8F%8A%E5%85%B6%E5%85%BC%E5%AE%B9%E6%80%A7%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/01/26/h5%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE%E5%8F%8A%E5%85%B6%E5%85%BC%E5%AE%B9%E6%80%A7%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>html5的语义化标签确实为我们带来了许多方便，但是如何解决他的兼容性代码也是需要我们去解决的，简单分析一下h5的相关使用</p></blockquote><h4 id="h5带来了哪些好处"><a href="#h5带来了哪些好处" class="headerlink" title="h5带来了哪些好处"></a>h5带来了哪些好处</h4><ul><li>比较利于开发人员使用,不需要去仔细阅读每一个类，就可以较为清楚地分析出网页的整体结构。</li><li>利于SEO-搜索引擎优化,搜索引擎也要分析我们的网页，当时用了h5的时候，他也可以很方便的寻找出网页的重点部分，排名靠前。</li></ul><p><img src="/img/2019/01/26/1.png" alt="h5与传统结构对比">(左为h5 右为传统网页)</p><h4 id="h5带来的问题"><a href="#h5带来的问题" class="headerlink" title="h5带来的问题"></a>h5带来的问题</h4><ul><li><p>最大就是兼容性，在<strong>IE8及其以前</strong>是不支持h5的，并且会将其解析为行间元素，涉及到h5标签(包括h5的相关api)，以及大部分的css3属性</p><ul><li>IE9的显示效果  <img src="/img/2019/01/26/2.png" alt="IE9的显示效果"></li><li>IE8的显示效果，（IE8是将其转换为行间元素进行解析）<img src="/img/2019/01/26/3.png" alt="IE8的显示效果"></li></ul></li></ul><ul><li>如何解决兼容性问题<ol><li>首先使用js创建元素，<code>document.createElement(&#39;header&#39;)</code></li><li>设置其css的<code>display：block</code></li><li>在这里可以使用<a href="https://github.com/aFarkas/html5shiv" target="_blank" rel="noopener">html5shiv.js</a>这个插件来帮我们完成,需要注意的一点，此处我们需在网页的最开始引入此js文件</li></ol></li></ul><ul><li><p>如何判断我们是否需要去引入该插件</p><ul><li>因为只有<strong>IE8及其以前</strong>的版本需要处理，那在其他的浏览器下就是不太需要的操作</li><li>（X）使用js的<code>userAgent</code>来进行判断,应为我们需要最开始来加载，所以不能使用js的方式来判断</li><li><p>（√）使用条件注释的方式来进行判断</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">&lt;h1&gt;您的浏览器版本过低，请及时更新您的浏览器&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>  (这里 lt&lt; lte&lt;= gt&gt; gte&gt;=)</p></li></ul></li></ul><ul><li>处理兼容性的代码  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">&lt;script src="bower_components/html5shiv/dist/html5shiv.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>loading过渡动画的使用</title>
      <link href="/2019/01/18/loading%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/01/18/loading%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="使用loading相关插件优化用户体验"><a href="#使用loading相关插件优化用户体验" class="headerlink" title="使用loading相关插件优化用户体验"></a>使用loading相关插件优化用户体验</h4><blockquote><p>在使用ajax刷新数据的时候，中间的间隔可以使用一些过渡动画增加用户体验</p></blockquote><ol><li><p>首先选用一些动画插件 比如此处的<a href="http://loading.awesomes.cn/" target="_blank" rel="noopener">http://loading.awesomes.cn/</a>找到要使用的样式</p></li><li><p>插入相关的代码，这里可以单独列出文件整合起来</p></li></ol><ul><li><p>html代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--loading动画--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball-pulse-sync"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*loading动画的样式表*/</span></span><br><span class="line"><span class="selector-class">.ball-pulse-sync</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ball-pulse-sync</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-animation</span>: ball-pulse-sync <span class="number">0.6s</span> -<span class="number">0.14s</span> infinite ease-in-out;</span><br><span class="line">  <span class="attribute">animation</span>: ball-pulse-sync <span class="number">0.6s</span> -<span class="number">0.14s</span> infinite ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ball-pulse-sync</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-animation</span>: ball-pulse-sync <span class="number">0.6s</span> -<span class="number">0.07s</span> infinite ease-in-out;</span><br><span class="line">  <span class="attribute">animation</span>: ball-pulse-sync <span class="number">0.6s</span> -<span class="number">0.07s</span> infinite ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ball-pulse-sync</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-animation</span>: ball-pulse-sync <span class="number">0.6s</span> <span class="number">0s</span> infinite ease-in-out;</span><br><span class="line">  <span class="attribute">animation</span>: ball-pulse-sync <span class="number">0.6s</span> <span class="number">0s</span> infinite ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ball-pulse-sync</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">-webkit-animation-fill-mode</span>: both;</span><br><span class="line">  <span class="attribute">animation-fill-mode</span>: both;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> ball-pulse-sync &#123;</span><br><span class="line">  33% &#123;</span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(10px);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(10px);</span><br><span class="line">  &#125;</span><br><span class="line">  66% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(-10px);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-10px);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(0);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>设置其元素显示的时机，这里提供一种可以居中的方式</li></ol><ul><li><p>css代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ball-pulse-sync</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;<span class="comment">/*使用flex布局*/</span></span><br><span class="line">  <span class="attribute">align-items</span>: center;<span class="comment">/*居中*/</span></span><br><span class="line">  <span class="attribute">justify-content</span>: center;<span class="comment">/*居中*/</span></span><br><span class="line">  <span class="attribute">position</span>: fixed;<span class="comment">/*固定于浏览器*/</span></span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1001</span>;<span class="comment">/*设定层级*/</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(0,0,0,.7);<span class="comment">/*背景色*/</span></span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>可以使用jquery的 <code>fadeIn()</code>  与 <code>fadeOut()</code> 方法 在<code>&lt;div style=&quot;display:none&quot;&gt;···&lt;/div&gt;</code> 之所以设置<strong>display:none</strong> 是为了淡入淡出可以恢复 display:flew的特性（jQuery默认是display:block）</p></li></ul><ol start="4"><li>效果图<img src="/img/2019/01/18/1.png" alt="loading"></li></ol><h4 id="其实使用这种进度条，或是加载函数都是一种表面的东西，其内部是一些函数，会走的越来越慢，当加载完毕的时候一下子走通，造成了一种进度条的感觉，实际是ajax开始一个动作，结束一个动作"><a href="#其实使用这种进度条，或是加载函数都是一种表面的东西，其内部是一些函数，会走的越来越慢，当加载完毕的时候一下子走通，造成了一种进度条的感觉，实际是ajax开始一个动作，结束一个动作" class="headerlink" title="其实使用这种进度条，或是加载函数都是一种表面的东西，其内部是一些函数，会走的越来越慢，当加载完毕的时候一下子走通，造成了一种进度条的感觉，实际是ajax开始一个动作，结束一个动作"></a>其实使用这种进度条，或是加载函数都是一种表面的东西，其内部是一些函数，会走的越来越慢，当加载完毕的时候一下子走通，造成了一种进度条的感觉，实际是ajax开始一个动作，结束一个动作</h4><pre><code class="JavaScript"><span class="comment">// jQuery中的统一ajax</span>$(<span class="built_in">document</span>).ajaxStart(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{    <span class="comment">// ajax开始的代码</span>}).ajaxStop(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{    <span class="comment">// ajax结束的代码</span>});</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>梦·书·电影</title>
      <link href="/2018/12/25/%E6%A2%A6%C2%B7%E4%B9%A6%C2%B7%E7%94%B5%E5%BD%B1/"/>
      <url>/2018/12/25/%E6%A2%A6%C2%B7%E4%B9%A6%C2%B7%E7%94%B5%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>想要把自己活成一场梦，一本书,一步电影。 – 齐一</p></blockquote><p>00：20平安夜，everyone,祝平安，快乐，每个人都会得到想要的！加油！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>可能否</title>
      <link href="/2018/12/08/%E5%8F%AF%E8%83%BD%E5%90%A6/"/>
      <url>/2018/12/08/%E5%8F%AF%E8%83%BD%E5%90%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="可能否"><a href="#可能否" class="headerlink" title="可能否"></a>可能否</h2><pre><code>春天的风 能否吹来夏天的雨秋天的月 能否照亮冬天的雪夜空的星 能否落向晨曦的海山间的泉 能否遇上南飞的雁能否早一点 看透命运的伏线能否不轻易就深陷能否慢一点 挥霍有限的时间能否许我一个永远可能我撞了南墙才会回头吧可能我见了黄河才会死心吧可能我偏要一条路走到黑吧可能我还没遇见 那个她吧断掉的弦 能否扯破自缚的茧熄灭的火 能否烧光残留的念梦中的云 能否化作熟悉的脸前世的劫 能否换来今生的缘能否早一点 相信年少的誓言能否不轻易说再见能否慢一点 感受岁月的缱绻能否许我一次成全可能我撞了南墙才会回头吧可能我见了黄河才会死心吧可能我偏要一条路走到黑吧可能我还没遇见 那个她吧可能我撞了南墙才会回头吧可能我见了黄河才会死心吧可能我偏要一条路走到黑吧可能我还没遇见 那个她吧可能我还没忘掉 哪个她吧</code></pre><p><img src="/img/20181208/1.jpg" alt="1"><br><br>可能否 – 木小雅<br></p><blockquote><p>2018-12-08 杭州 · 杭州电子科技大学 · 雪</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>你所遭受的苦难，都将在未来的某个时刻派上用场</title>
      <link href="/2018/11/26/%E4%BD%A0%E6%89%80%E9%81%AD%E5%8F%97%E7%9A%84%E8%8B%A6%E9%9A%BE%EF%BC%8C%E9%83%BD%E5%B0%86%E5%9C%A8%E6%9C%AA%E6%9D%A5%E7%9A%84%E6%9F%90%E4%B8%AA%E6%97%B6%E5%88%BB%E6%B4%BE%E4%B8%8A%E7%94%A8%E5%9C%BA/"/>
      <url>/2018/11/26/%E4%BD%A0%E6%89%80%E9%81%AD%E5%8F%97%E7%9A%84%E8%8B%A6%E9%9A%BE%EF%BC%8C%E9%83%BD%E5%B0%86%E5%9C%A8%E6%9C%AA%E6%9D%A5%E7%9A%84%E6%9F%90%E4%B8%AA%E6%97%B6%E5%88%BB%E6%B4%BE%E4%B8%8A%E7%94%A8%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>加油，一切都会过去！干！</p></blockquote><p><img src="/img/20181126/1.png" alt="1"></p><div style="text-align: right"><br>    2018-11-26&#160; &#160; 23:26 <br><br>    杭州·杭州电子科技大学<br></div>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>定制bootstrap的列相关</title>
      <link href="/2018/11/08/%E5%AE%9A%E5%88%B6bootstrap%E7%9A%84%E5%88%97%E7%9B%B8%E5%85%B3/"/>
      <url>/2018/11/08/%E5%AE%9A%E5%88%B6bootstrap%E7%9A%84%E5%88%97%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="如何定制bs的栅格"><a href="#如何定制bs的栅格" class="headerlink" title="如何定制bs的栅格"></a>如何定制bs的栅格</h1><hr><blockquote><p>BS（bootstrap）默认是以12列，那么我们如果想布局5列的话，就比较困难了，(12/5不能整除的，所以我们布局五列的时候，使用原生的bs进行调整就很困难了)这里我们可以使用bs的定制功能，定制一个我们自己想要的列数等，<strong>这里我们使用15列为基础，则每一列占3列 col-sm-3</strong></p></blockquote><h2 id="去bs官网进行定制并下载"><a href="#去bs官网进行定制并下载" class="headerlink" title="去bs官网进行定制并下载"></a>去bs官网进行定制并下载</h2><ul><li>官网<br><img src="/img/20181108/1.png" alt=""><br><img src="/img/20181108/2.png" alt=""></li><li>下载之后<code>js</code>,<code>css</code>,<code>font</code><br><img src="/img/20181108/3.png" alt=""></li></ul><p>完成定制之后，我们的列就已经变成了15列，那么我们此时进行普通的操作即可。<br><img src="/img/20181108/4.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux的基本操作及Jdk,MySQL,Tomcat</title>
      <link href="/2018/10/29/Linux%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%8F%8AJdk-MySQL-Tomcat/"/>
      <url>/2018/10/29/Linux%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%8F%8AJdk-MySQL-Tomcat/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-中的一些-常用操作"><a href="#Linux-中的一些-常用操作" class="headerlink" title="Linux 中的一些 常用操作"></a>Linux 中的一些 常用操作</h2><ul><li>目录的操作<ul><li>创建文件夹 <code>mkdir &lt;name&gt;</code></li><li>查看隐藏文件 <code>ls -a</code></li><li>查看文件的详细信息 <code>ls -l</code>或者是<code>ll</code></li><li>修改目录名称 <code>mv &lt;oldName&gt; &lt;newName&gt;</code></li><li>拷贝操作 <code>cp -r &lt;src&gt; &lt;dest&gt;</code></li><li>删除操作 <code>rm -rf &lt;fileName&gt;</code>使用提示<code>rm -r &lt;fileName&gt;</code> 在输入y或者n选择是否确定删除</li></ul></li><li>文件的操作<ul><li><code>cat &lt;fileName&gt;</code> 查看某个文件的最后一屏幕  </li><li><code>more &lt;fileName&gt;</code> 查看文件的所有，<code>回车</code>是一行  <code>空格</code>下一页</li><li><code>less &lt;fileName&gt;</code> 查看文件页的形式，使用上下页查看，<code>PageUp键</code>向上 <code>PageDown键</code>向下  <code>q</code>结束查看</li><li><code>tail -&lt;n&gt; &lt;filename&gt;</code> 查看文件的后n行</li><li><code>tail -f &lt;fileName&gt;</code> 查看文件的日志</li><li><code>ll -h</code> 查看文件的大小</li></ul></li><li>文件的编辑<ul><li>使用<code>vi</code>或者<code>vim</code>进入文本编辑器</li><li><code>i</code>,<code>o</code>进行文本编辑</li><li><code>:wq</code>保存并退出 writeQuit</li><li><code>:q</code> 不保存退出 quit</li></ul></li><li>文件的压缩(tar只是打包命令 文件大小没有多少区别 .tar.gz是加入gzip指令，会压缩存放)<ul><li>-c: 建立压缩档案</li><li>-x：解压</li><li>-t：查看内容</li><li>-r：向压缩归档文件末尾追加文件</li><li>-u：更新原压缩包中的文件<blockquote><p>一些可选指令更在后面即可</p></blockquote></li><li>-z：有gzip属性的</li><li>-j：有bz2属性的</li><li>-Z：有compress属性的</li><li>-v：显示所有过程</li><li>-O：将文件解开到标准输出</li><li>-f: 使用档案名字，<strong>必须放在最后</strong><blockquote><p>操作 压缩</p></blockquote></li><li><code>tar -cvf &lt;tarName&gt;.tar *.jpg</code> 进所有jpg压缩进tarName.tar</li><li><code>tar –czf &lt;tarName&gt;.tar.gz *.jpg</code> 打成gz包</li><li><code>tar –cjf &lt;tarName&gt;.tar.bz2 *.jpg</code> 打成bz2包（bz2压缩比高一些）</li><li><code>tar –cZf jpg.tar.Z *.jpg</code> 打成Z包<blockquote><p>操作 解压</p></blockquote></li><li><code>tar –xvf &lt;fileName&gt;.tar</code> 解压tar包</li><li><code>tar -xzvf &lt;fileName&gt;.tar.gz</code> 解压tar.gz</li><li><code>tar -xjvf file.tar.bz2</code> 解压 tar.bz2</li><li><code>tar –xZvf file.tar.Z</code>解压tar.Z<br>&lt;!–<br>暂时有一些问题</li></ul></li><li>文件权限的修改<ul><li><code>r</code>读权限 <code>w</code>写权限 <code>x</code> 操作权限</li><li><code>chmod u=--- g=--- o=--- &lt;fileName&gt;</code>修改文件的权限，要分三组来看</li></ul></li></ul><p>–&gt;</p><ul><li>系统管理命令<ul><li>查看时间<code>date</code> 设置时间<code>date -s &quot;yyyy-MM-dd HH:mm:ss&quot;</code></li><li>查看分区情况 <code>df</code>查看xxG或者xxM <code>df -h</code></li><li>显示内存 <code>free</code> 查看xxG或者xxM <code>free -h</code></li><li>清屏 <code>clear</code></li><li>显示登录日志信息 <code>who</code></li><li>显示主机名称 <code>hostname</code></li><li>系统信息 <code>uname</code> 详细信息 <code>uname -a</code></li></ul></li><li>其他一些指令<ul><li><code>pwd</code> 查看当前文件目录</li><li><code>grep &lt;keyword&gt; &lt;fileName&gt; --color</code>在fileName中查看keyword关键字并且高亮</li><li><code>ps -ef</code>查看当前的进程</li><li><code>kill -9 &lt;pId&gt;</code>干掉进程</li><li><code>netstat -an</code>查看端口的使用情况</li></ul></li><li>命令的逻辑<ul><li><code>&amp;&amp;</code>和编程中一样，逻辑与 <code>&lt;command1&gt; &amp;&amp; &lt;command2&gt;</code> <ul><li>命令1执行成功 后执行 命令2</li><li>命令1执行失败 不执行 命令2</li></ul></li><li><code>||</code>和编程中类似有短路效果<code>&lt;command1&gt; || &lt;command2&gt;</code><ul><li>命令1执行成功 不执行 命令2</li><li>命令1执行失败 后执行 命令2</li></ul></li></ul></li><li><p>创建一个公共的文件夹 供Vm共享的文件夹</p><ol><li>打开Vm中的共享文件夹</li><li><strong>根目录下</strong><code>mnt/hgfs/</code>可看到我们刚刚设置的公共文件夹</li></ol></li><li><p>服务</p><ul><li><code>rpm -qa | grep &lt;keywords&gt;</code> 查看服务</li><li><code>rpm -e --nodeps &lt;name&gt;</code> 删除相关服务</li></ul></li></ul><h2 id="安装JDK的操作"><a href="#安装JDK的操作" class="headerlink" title="安装JDK的操作"></a>安装JDK的操作</h2><ul><li><code>rpm -qa | grap java</code>查询是否安装了jdk</li><li>解压jdk <code>tar -zxvf &lt;jdkName.tar.gz&gt;</code></li><li>配置 <em>/etc/profile</em>中文件<code>vi /etc/profile</code></li><li>添加如下的操作，注意此处的/usr/java/xxx/jdkxxx(下一层就有bin了，同时这个文件夹也是刚刚解压出来的)<blockquote><ul><li><code>#java environment</code></li><li><code>export JAVA_HOME=/usr/java/&lt;directoryName&gt;</code></li><li><code>export CLASSPATH=.:${JAVA_HOME}/jre/lib/rt.jar:${JAVA_HOME}/lib/dt.jar:</code>${JAVA_HOME}/lib/tools.jar`</li><li><code>export PATH=$PATH:${JAVA_HOME}/bin</code></li></ul></blockquote></li><li>最后<code>source /etc/profile</code></li></ul><h2 id="安装MySQL的操作-一定要注意路径的修改-software-文件-data-数据库"><a href="#安装MySQL的操作-一定要注意路径的修改-software-文件-data-数据库" class="headerlink" title="安装MySQL的操作(一定要注意路径的修改 software/文件,data/数据库)"></a>安装MySQL的操作(一定要注意路径的修改 <code>software/文件</code>,<code>data/数据库</code>)</h2><ul><li>创建文件夹(可根据需求定制)<ul><li>新建文件夹 <code>xxx/mysql/software/</code>MySQL程序</li><li>新建文件夹 <code>xxx/mysql/data/</code>数据库文件</li></ul></li><li>复制文件过去 <code>cp 指令</code>并解压<code>tar指令</code></li><li>创建用户和组<ul><li><code>groupadd mysql</code></li><li><code>useradd -r -g mysql mysql</code></li></ul></li><li>关联myql用户到mysql用户组中<ul><li><code>#chown -R mysql:mysql  /software/mysql/</code></li><li><code>#chown -R mysql:mysql  /data/mysql/</code></li><li><code>#chown -R mysql  /software/mysql/</code></li><li><code>#chown -R mysql  /data/mysql</code></li></ul></li><li>更改mysql安装文件夹mysql/的权限 <code>chmod -R 755 /software/mysql/</code></li><li>注意根据需要 安装libaio<code>yum install libaio</code></li><li>进行数据库的初始化工作<code>./mysqld --user=mysql --basedir=/software/mysql --datadir=/data/mysql --initialize</code><blockquote><p>注意root@localhost: <strong>(oiwsWz7-dhc</strong>这里的初始密码！切记！切记！</p></blockquote></li><li>修改mysql配置文件<code>vim /software/mysql/support-files/mysql.server</code>保存退出后拷过去<code>cp /software/mysql/support-files/mysql.server  /etc/init.d/mysqld</code>，并添加权限<code>chmod 755 /etc/init.d/mysqld</code><blockquote><p>if test -z “$basedir”<br>then<br>bindir=/software/mysql/bin<br>if test -z “$datadir”<br>then<br>datadir=/data/mysql<br>fi<br>sbindir=/software/mysql/bin<br>libexecdir=/software/mysql/bin<br>else<br>bindir=”$basedir/bin”<br>if test -z “$datadir”<br>then<br>datadir=”$basedir/data”<br>fi<br>sbindir=”$basedir/sbin”<br>libexecdir=”$basedir/libexec”<br>fi</p></blockquote></li><li>修改my.cnf文件<code>vim /etc/my.cnf</code><blockquote><p>[client]</p><pre><code>no-beepsocket =/software/mysql/mysql.sock</code></pre></blockquote><pre><code># pipe# socket=0.0port=3306[mysql]default-character-set=utf8[mysqld]basedir=/software/mysqldatadir=/data/mysqlport=3306pid-file=/software/mysql/mysqld.pid#skip-grant-tablesskip-name-resolvesocket = /software/mysql/mysql.sockcharacter-set-server=utf8default-storage-engine=INNODBexplicit_defaults_for_timestamp = true# Server Id.server-id=1max_connections=2000query_cache_size=0 table_open_cache=2000 tmp_table_size=246M thread_cache_size=300 #限定用于每个数据库线程的栈大小。默认设置足以满足大多数应用 thread_stack = 192k key_buffer_size=512M read_buffer_size=4M read_rnd_buffer_size=32M innodb_data_home_dir = /data/mysql innodb_flush_log_at_trx_commit=0 innodb_log_buffer_size=16M innodb_buffer_pool_size=256M innodb_log_file_size=128M innodb_thread_concurrency=128 innodb_autoextend_increment=1000 innodb_buffer_pool_instances=8 innodb_concurrency_tickets=5000 innodb_old_blocks_time=1000 innodb_open_files=300 innodb_stats_on_metadata=0 innodb_file_per_table=1 innodb_checksum_algorithm=0 back_log=80 flush_time=0 join_buffer_size=128M max_allowed_packet=1024M max_connect_errors=2000 open_files_limit=4161 query_cache_type=0 sort_buffer_size=32M table_definition_cache=1400 binlog_row_event_max_size=8K sync_master_info=10000 sync_relay_log=10000 sync_relay_log_info=10000#批量插入数据缓存大小，可以有效提高插入效率，默认为8M bulk_insert_buffer_size = 64M interactive_timeout = 120 wait_timeout = 120 log-bin-trust-function-creators=1 sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES&lt;br/## include all files from the config directory#!includedir /etc/my.cnf.d</code></pre></li><li>启动<code>/etc/init.d/mysqld start</code></li><li>登录mysql<code>/software/mysql/bin/mysql -u root –p</code><blockquote><p>p 为上一步的临时密码 (oiwsWz7-dhc</p></blockquote></li><li>最后进入mysql修改初始密码即可<code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;新密码&#39;</code><br>##Tomcat的安装##</li><li>解压tomcat并放到所需的文件夹下</li><li>打开防火墙的8080端口（也可打开80端口）<ul><li><code>firewall-cmd --zone=public --add-port=8080/tcp --permanent</code> 8080port</li><li><code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code> 80port</li><li><code>firewall-cmd --reload</code>重启防火墙</li></ul></li><li>打开服务器即可 <strong>tomcat/bin</strong>目录下的<ul><li>开启<code>./startup.sh</code></li><li>关闭 <code>./shutdown.sh</code></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为你我受冷风吹</title>
      <link href="/2018/10/20/%E4%B8%BA%E4%BD%A0%E6%88%91%E5%8F%97%E5%86%B7%E9%A3%8E%E5%90%B9/"/>
      <url>/2018/10/20/%E4%B8%BA%E4%BD%A0%E6%88%91%E5%8F%97%E5%86%B7%E9%A3%8E%E5%90%B9/</url>
      
        <content type="html"><![CDATA[<ul><li>第一次用自己的力量做公益！<ul><li><em>浙江·杭州辰星儿童早期干预中心</em></li><li><em>记一次公益墙绘行！</em> <br></li><li><em><a href="https://mp.weixin.qq.com/s?__biz=MzA3MzE1MjAzNA==&amp;mid=2653648677&amp;idx=1&amp;sn=78986c636f9011dd2b60ea428d624494&amp;chksm=84ccb468b3bb3d7e86a6f37e44b58e7e56db1fc6f1b4bca5d6d50b43c21163a151eb75438dcd&amp;scene=0&amp;subscene=131&amp;ascene=7&amp;devicetype=android-25&amp;version=26070336&amp;nettype=cmnet&amp;abtest_cookie=AwABAAoACwATAAMAJZceAFaZHgCEmR4AAAA%3D&amp;lang=en&amp;pass_ticket=EwiaMT0OO2s3udyCfqvhjhyfPB2IINQYeD3dLI9ABDJysAUJ28%2BQs3gF8fDrJgsI&amp;wx_header=1" target="_blank" rel="noopener">微信推文</a></em></li></ul></li></ul><blockquote><p>&#160; &#160; &#160; &#160;经过了两周的准备，从开始联系记者，老师，到后来跟进项目计划，再到后来策划颜料，人员，发票，再到每个人中午的午饭问题，一切都是新的开始，让我一个非艺术生去带他们画画，还是有点意思的！但是，这次活动总体而来还是很不错的，学到了很多，也看到了他们的优秀，强就对了！</p></blockquote><hr><h1 id="话不多说，上图"><a href="#话不多说，上图" class="headerlink" title="话不多说，上图"></a>话不多说，上图</h1><p><center>早上7:50出门，找到车站已经快8:30了，哈哈</center><br><img src="/img/20181020/1.jpg" alt="1"></p><hr><p><center>先是铅笔构图<code>打底子</code></center><br><img src="/img/20181020/2.jpg" alt="2"><br><img src="/img/20181020/3.jpg" alt="3"><br><img src="/img/20181020/4.jpg" alt="4"></p><hr><p><center>到了午饭时间，是胃口大还是饭订少了！嘻嘻，真香！吃就对了</center><br><img src="/img/20181020/5.jpg" alt="5"></p><hr><p><center>底子打起来</center><br><img src="/img/20181020/6.jpg" alt="6"><br><img src="/img/20181020/7.jpg" alt="7"><br><img src="/img/20181020/8.jpg" alt="8"></p><hr><p><center>屋内的<code>哆啦A梦</code>主题，画起来还是很起劲的嘛！</center><br><img src="/img/20181020/9.jpg" alt="9"><br><img src="/img/20181020/10.jpg" alt="10"><br><img src="/img/20181020/11.jpg" alt="11"><br><img src="/img/20181020/12.jpg" alt="12"></p><hr><p><center>这两只鲸鱼还是很有爱的！一进门看到是不很舒爽，不接受反驳</center></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/img/20181020/13.jpg" alt="13"></h2><p><center>最后的成果走一波</center><br><img src="/img/20181020/14.jpg" alt="14"><br><img src="/img/20181020/15.jpg" alt="15"><br><img src="/img/20181020/16.jpg" alt="16"><br><img src="/img/20181020/17.jpg" alt="17"><br><img src="/img/20181020/18.jpg" alt="18"><br><img src="/img/20181020/19.jpg" alt="19"><br><img src="/img/20181020/20.jpg" alt="20"><br><img src="/img/20181020/21.jpg" alt="21"><br><img src="/img/20181020/22.jpg" alt="22"><br><img src="/img/20181020/23.jpg" alt="23"><br><img src="/img/20181020/24.jpg" alt="24"><br><img src="/img/20181020/25.jpg" alt="25"><br><img src="/img/20181020/26.jpg" alt="26"><br><img src="/img/20181020/27.jpg" alt="27"></p><hr><p><center>公交车我们包了！都累成了狗！哈哈，不过确实是充实的一天</center><br><img src="/img/20181020/28.jpg" alt="28"></p><hr><p>最后愿大家：前程似锦，海阔任鱼跃，天高任鸟飞！<br>这不是套话，是真心对你们的祝福！(ﾉ´▽｀)ﾉ♪</p>]]></content>
      
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git中分支相关的操作</title>
      <link href="/2018/10/18/Git%E4%B8%AD%E5%88%86%E6%94%AF%E7%9B%B8%E5%85%B3%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/10/18/Git%E4%B8%AD%E5%88%86%E6%94%AF%E7%9B%B8%E5%85%B3%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要存在分支"><a href="#为什么要存在分支" class="headerlink" title="为什么要存在分支"></a>为什么要存在分支</h1><p><br></p><blockquote><ul><li>如果只有一个主分支<strong>master</strong>那么我们在提交或是 修改的时候很容易影响到其他的代码或是文件，所以这里就需要引入一些分支，在这个分支修改好之后，再推送到主分支上。</li><li>一般Master分支是最稳定的一个分支，用于发布版本使用</li></ul></blockquote><h1 id="新建一个分支-git-branch-lt-branchName-gt"><a href="#新建一个分支-git-branch-lt-branchName-gt" class="headerlink" title="新建一个分支 $ git branch &lt;branchName&gt;"></a>新建一个分支 <code>$ git branch &lt;branchName&gt;</code></h1><p><br></p><blockquote><p>新建一个分支</p></blockquote><h1 id="切换一个分支-git-checkout-lt-branchName-gt"><a href="#切换一个分支-git-checkout-lt-branchName-gt" class="headerlink" title="切换一个分支 $ git checkout &lt;branchName&gt;"></a>切换一个分支 <code>$ git checkout &lt;branchName&gt;</code></h1><p><br></p><blockquote><p>切换一个分支，这里可以使用一个比较快捷的操作，再新建完分支 直接切换过去<code>$ git checkout -b &lt;branchName&gt;</code> 直接新建并且切换到该分支</p></blockquote><h1 id="分支的删除-git-branche-d-lt-branchName-gt"><a href="#分支的删除-git-branche-d-lt-branchName-gt" class="headerlink" title="分支的删除 $ git branche -d &lt;branchName&gt;"></a>分支的删除 <code>$ git branche -d &lt;branchName&gt;</code></h1><p><br></p><blockquote><p>可以删除这个分支</p></blockquote><h1 id="分支的合并-git-merge-lt-branchName-gt"><a href="#分支的合并-git-merge-lt-branchName-gt" class="headerlink" title="分支的合并$ git merge &lt;branchName&gt;"></a>分支的合并<code>$ git merge &lt;branchName&gt;</code></h1><p><br></p><ul><li>先切换到需要被 合并的分支 比如主Master分支</li><li>之后进行分支的合并<code>$ git merge &lt;branchName&gt;</code></li><li>如果出现了冲突，那么我们就在本地解决 冲突，最后不要忘记本地的提交 <strong>add</strong>与<strong>commit</strong></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Git的与远程仓库搭配的使用</title>
      <link href="/2018/10/18/Git%E7%9A%84%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%90%AD%E9%85%8D%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/10/18/Git%E7%9A%84%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%90%AD%E9%85%8D%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="了解向远程仓库通讯"><a href="#了解向远程仓库通讯" class="headerlink" title="了解向远程仓库通讯"></a>了解向远程仓库通讯</h1><p><br> </p><blockquote><p>&#160; &#160;&#160; &#160;在远端的Git仓库中 比如我们在github中的仓库，会涉及到对文件的<strong>上传</strong>与下载<strong>下载</strong></p></blockquote><h1 id="文件push（推送）到远程仓库-160-git-push"><a href="#文件push（推送）到远程仓库-160-git-push" class="headerlink" title="文件push（推送）到远程仓库&#160;$ git push"></a>文件push（推送）到远程仓库&#160;<code>$ git push</code></h1><p><br></p><blockquote><p> &#160; &#160;&#160; &#160;在向远程的仓库进行提交文件的时候，他会覆盖到原来的一个版本，所以在push之前我们要做好准备。</p></blockquote><h1 id="文件pull（拉取）到本地仓库-160-git-pull"><a href="#文件pull（拉取）到本地仓库-160-git-pull" class="headerlink" title="文件pull（拉取）到本地仓库&#160;$ git pull"></a>文件pull（拉取）到本地仓库&#160;<code>$ git pull</code></h1><p><br></p><blockquote><p> &#160; &#160;&#160; &#160;在向本地仓库拉取文件的时候，很可能会出现 与远程仓库不一致的情况，这个时候与本地合并分支比较类似，他会在本地有冲突的文件做一些提示，我们在本地修改好之后直接提交即可，<strong>注意</strong>这时一定不要忘了 提交<code>$ git add .</code>与<code>$ git commit -m&#39;&#39;</code>与本地保持一致，这个时候本地仓库就已经是与远程仓库相同的情况。</p></blockquote><h1 id="文件远程同步的步骤"><a href="#文件远程同步的步骤" class="headerlink" title="文件远程同步的步骤"></a>文件远程同步的步骤</h1><p><br></p><ul><li>一般情况下 先是从远程仓库 <strong>pull</strong>下来，此时有冲突 也比较好解决</li><li>再解决相应的冲突 即可将代码<strong>push</strong>推送的远程仓库</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Git的基本本地操作</title>
      <link href="/2018/10/18/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9C%AC%E5%9C%B0%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/10/18/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%9C%AC%E5%9C%B0%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="首先需要了解的就是Git大致仓库的含义"><a href="#首先需要了解的就是Git大致仓库的含义" class="headerlink" title="首先需要了解的就是Git大致仓库的含义"></a>首先需要了解的就是Git大致仓库的含义</h1><p><br></p><blockquote><p>&#160; &#160;&#160; &#160;Git中仓库（.git文件）其实他的含义并不是一个真正的仓库，只是一个存放文件状态的一个位置，真正的文件还是在我们的文件夹中。<br>&#160; &#160;&#160; &#160;那么也就是说他的文件夹存放的时文件状态的一些文件，可以使用这些状态文件，恢复到任何一个版本的文件，也就是达到了所谓的<code>仓库</code>的概念。</p></blockquote><h1 id="为什么使用暂存盘与仓库"><a href="#为什么使用暂存盘与仓库" class="headerlink" title="为什么使用暂存盘与仓库"></a>为什么使用暂存盘与仓库</h1><p><br></p><blockquote><p> &#160; &#160;&#160; &#160;之后需要明确的一点就是 Git中的<strong>暂存盘</strong> 与 <strong>仓库</strong>的区别他是先将文件放到暂存盘中，之后一起拿去做提交更改，很类似公交车拉人的一种感觉，拉满了一车过去，就会提高一些效率。</p></blockquote><h1 id="文件提交的的流程"><a href="#文件提交的的流程" class="headerlink" title="文件提交的的流程"></a>文件提交的的流程</h1><ul><li>先将文件 <code>$ git add a.txt</code> 将a.txt这个文件放到暂存盘中</li><li>再将文件 <code>$ git commit -m &#39;提交了文件a.txt&#39;</code> 将这个a.txt做一次提交，也就是将此次状态保存到了git仓库里。</li></ul><h1 id="文件修改的的流程"><a href="#文件修改的的流程" class="headerlink" title="文件修改的的流程"></a>文件修改的的流程</h1><ul><li>首先已经提交过文件了确保这个文件在git的管理中 <code>$ git add b.txt</code> 将b.txt这个文件放到暂存盘中</li><li>对b.txt这个文件做一些操作，之后文件的状态发生改变,出现没有暂存的修改</li><li>我们需要将这个修改添加到暂存盘中 <code>$ git add b.txt</code>现在他已经在我们的暂存盘中了</li><li>最后一波提交即可<code>$ git commit -m &#39;提交了文件b.txt&#39;</code>现在b.txt文件的状态也已经存储到仓库中了</li></ul><h1 id="文件删除的的流程"><a href="#文件删除的的流程" class="headerlink" title="文件删除的的流程"></a>文件删除的的流程</h1><ul><li>首先已经提交过文件了确保这个文件在git的管理中 <code>$ git add c.txt</code> 将c.txt这个文件放到暂存盘中</li><li>c.txt这个文件删除<code>rm c.txt</code>此时该文件目前是被删除（文件夹中查看是不见的）</li><li>此时我们确定删除，<code>$ git commit -m &#39;删除了c.txt&#39;</code>现在c.txt文件被删除的状态也已经存储到仓库中了</li></ul><h1 id="一些撤销的操作"><a href="#一些撤销的操作" class="headerlink" title="一些撤销的操作"></a>一些撤销的操作</h1><ul><li>当我们<strong>修改/删除</strong>了文件 <strong>没有</strong>提交到暂存盘的时候我们可以使用 <code>$ git checkout --file</code>进行回退操作（这里不加–也是可以的<code>$ git checkout file</code>容易和分支搞混）</li><li>当我们<strong>修改/删除</strong>了文件 <strong>已经</strong>提交到暂存盘的时候我们可以使用 <code>$ git reset file</code>将文件从暂存区撤回（现在相当于修改了未提交），之后进行上面的操作即可</li></ul><h1 id="一些版本回退的操作"><a href="#一些版本回退的操作" class="headerlink" title="一些版本回退的操作"></a>一些版本回退的操作</h1><blockquote><p> 我们可以使用 <code>$ git log</code> 查看历史纪录</p></blockquote><ul><li>也可以使用 <code>$ git reflog</code> 查看历史纪录,此时查询出的历史记录是带一些版本号，便于我们恢复</li><li>git reset –hard HEAD~3`前3步</li><li>我们可以使用<code>$ git reset --hard xxxxx</code>回退到指定的步数 也就是我们在<code>$ git reflog</code>查询出的序列号</li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>hello Hexo(1)</title>
      <link href="/2018/09/13/hello-Hexo/"/>
      <url>/2018/09/13/hello-Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-markdown"><a href="#Hello-markdown" class="headerlink" title="Hello-markdown"></a>Hello-markdown</h1><p>JAVA！</p><p><img src="/img/hello-hexo/javaBig.jpg" alt="JAVA"></p><hr><p>2018-09-13 15:36<br>杭州·杭州电子科技大学</p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
